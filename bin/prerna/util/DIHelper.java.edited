package prerna.util;



import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Properties;
import java.util.Vector;
import java.awt.geom.*;
import java.awt.*;

import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

import org.apache.commons.collections15.Transformer;

import com.hp.hpl.jena.rdf.model.Model;
import com.ibm.icu.util.StringTokenizer;

import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.algorithms.layout.FRLayout;
import edu.uci.ics.jung.algorithms.layout.ISOMLayout;
import edu.uci.ics.jung.algorithms.layout.KKLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.algorithms.layout.SpringLayout;
import edu.uci.ics.jung.visualization.util.Animator;

import prerna.om.DBCMEdge;
import prerna.om.DBCMVertex;
import prerna.rdf.engine.api.IEngine;

public class DIHelper {
	
	// helps with all of the dependency injection
	public static DIHelper helper = null;
	
	IEngine rdfEngine = null;
	Properties rdfMap = null;
	Hashtable<String, DBCMVertex> vertHash = new Hashtable<String, DBCMVertex>();
	Hashtable<String, DBCMEdge> edgeHash = new Hashtable<String, DBCMEdge>();
	
	// all the transformers
	Transformer vertexLabelTransformer = null;
	Transformer vertexIconTransformer = null;
	Transformer vertexShapeTransformer = null;
	Transformer edgeLabelTransformer = null;
	Transformer vertexToolTipTransformer = null;
	
	// core properties file
	Properties coreProp = null;
	Properties extendProp = null;
	// Hashtable of local properties
	// will have the following keys
	// Perspective -<Hashtable of questions and identifier> - Possibly change this over to vector
	// Question-ID Key
	Hashtable localProp = new Hashtable();
	
	protected DIHelper()
	{
		// do nothing
	}
	
	public static DIHelper getInstance()
	{
		if(helper == null)
		{
			helper = new DIHelper();
			// need to set up the shapes here
<<<<<<< .mine
			//Graphics g2 = new Line2D.Double(-5,-5,10, 10);
			///((Graphics2D) g2).draw(new Line2D.Double(-5,-5,10, 10));
			//Rectangle2D rect = new Rectangle2D.Double(-5,-5,10, 10);
			//((Graphics2D) g2).fill(rect);
			//g2.setColor(Color.white);
			//((Graphics2D) g2).fill(rect);
			//g2.setColor(Color.black);
			//((Graphics2D) g2).draw(rect);
			Shape square = new Rectangle2D.Double(-5,-5,10, 10);

			//new Graphics2D().dr
			//square = (Shape) g2;
			Shape circle = new Ellipse2D.Double(-5, -5, 10, 10);
=======
			Ellipse2D.Double circle = new Ellipse2D.Double(-5, -5, 10, 10);

			Rectangle2D.Double square = new Rectangle2D.Double(-5,-5,10, 10);
			RoundRectangle2D.Double round = new RoundRectangle2D.Double(-5,-5,10, 10, 6, 6);
			
>>>>>>> .r2443
			Shape triangle = helper.createUpTriangle(5);
			Shape star = helper.createStar();
			Shape rhom = helper.createRhombus(7);

			helper.localProp.put(Constants.SQUARE, square);
			helper.localProp.put(Constants.CIRCLE, circle);
			helper.localProp.put(Constants.TRIANGLE, triangle);
			helper.localProp.put(Constants.STAR, star);
			helper.localProp.put(Constants.DIAMOND, rhom);
			helper.localProp.put(Constants.ROUNDRECT, round);

			Shape squareL = new Rectangle2D.Double(0,0,40, 40);
			Shape circleL = new Ellipse2D.Double(0, 0, 15, 15);
			Shape triangleL = helper.createUpTriangleL();
			Shape starL = helper.createStarL();
			Shape rhomL = helper.createRhombusL();
			
			helper.localProp.put(Constants.SQUARE + Constants.LEGEND, squareL);
			helper.localProp.put(Constants.CIRCLE + Constants.LEGEND, circleL);
			helper.localProp.put(Constants.TRIANGLE + Constants.LEGEND, triangleL);
			helper.localProp.put(Constants.STAR + Constants.LEGEND, starL);
			helper.localProp.put(Constants.RHOMBUS + Constants.LEGEND, rhomL);

			
			
			helper.localProp.put(Constants.BLUE, Color.BLUE);
			helper.localProp.put(Constants.GREEN, Color.GREEN);
			helper.localProp.put(Constants.RED, Color.RED);
			helper.localProp.put(Constants.BLACK, Color.BLACK);
			helper.localProp.put(Constants.MAGENTA, Color.MAGENTA);
			helper.localProp.put(Constants.YELLOW, Color.YELLOW);
			helper.localProp.put(Constants.ORANGE, Color.ORANGE);
			
			// put all the layouts as well
			helper.localProp.put(Constants.FR, FRLayout.class);
			helper.localProp.put(Constants.KK, KKLayout.class);
			helper.localProp.put(Constants.ISO, ISOMLayout.class);
			helper.localProp.put(Constants.SPRING, SpringLayout.class);
			helper.localProp.put(Constants.CIRCLE_LAYOUT, CircleLayout.class);

		}
		return helper; 
	}
	
	

	public IEngine getRdfEngine() {
		return rdfEngine;
	}

	public void setRdfEngine(IEngine rdfEngine) {
		this.rdfEngine = rdfEngine;
	}

	public Transformer getVertexLabelTransformer() {
		return vertexLabelTransformer;
	}

	public void setVertexLabelTransformer(Transformer vertexLabelTransformer) {
		this.vertexLabelTransformer = vertexLabelTransformer;
	}

	public Transformer getVertexIconTransformer() {
		return vertexIconTransformer;
	}

	public void setVertexIconTransformer(Transformer vertexIconTransformer) {
		this.vertexIconTransformer = vertexIconTransformer;
	}

	public Transformer getVertexShapeTransformer() {
		return vertexShapeTransformer;
	}

	public void setVertexShapeTransformer(Transformer vertexShapeTransformer) {
		this.vertexShapeTransformer = vertexShapeTransformer;
	}

	public Transformer getEdgeLabelTransformer() {
		return edgeLabelTransformer;
	}

	public void setEdgeLabelTransformer(Transformer edgeLabelTransformer) {
		this.edgeLabelTransformer = edgeLabelTransformer;
	}

	public Transformer getVertexToolTipTransformer() {
		return vertexToolTipTransformer;
	}

	public void setVertexToolTipTransformer(Transformer vertexToolTipTransformer) {
		this.vertexToolTipTransformer = vertexToolTipTransformer;
	}

	public Properties getCoreProp() {
		return coreProp;
	}

	public void setCoreProp(Properties coreProp) {
		this.coreProp = coreProp;
	}

	public Properties getRdfMap() {
		return coreProp;
	}

	
	public String getProperty(String name)
	{
		return coreProp.getProperty(name);
	}

	public void putProperty(String name, String value)
	{
		coreProp.put(name, value);
	}

	  public Shape createStar() 
	  {
		  double x = .5;
		  double points[][] = { 
		        { 0*x, -15*x }, { 4.5*x, -5*x }, { 14.5*x,-5*x}, { 7.5*x,3*x }, 
		        { 10.5*x, 13*x}, { 0*x, 7*x }, { -10.5*x, 13*x}, { -7.5*x, 3*x }, 
		        {-14.5*x,-5*x}, { -4.5*x,-5*x}, { 0, -15*x} 
		    };
	      final GeneralPath star = new GeneralPath();
	        star.moveTo(points[0][0], points[0][1]);

	        for (int k = 1; k < points.length; k++)
	            star.lineTo(points[k][0], points[k][1]);

	      star.closePath();
	      return star;
	  }

	  public Shape createStarL() 
	  {
		  double points[][] = {{7.5,0} ,{9,5} ,{14.5, 5}, {11, 9}, {12.5, 14}, {7.2, 10.5}, {2.2, 14}, {3.5, 9}, {0,5}, {5, 5}, {7.5, 0}};
		  
	      final GeneralPath star = new GeneralPath();
	        star.moveTo(points[0][0], points[0][1]);

	        for (int k = 1; k < points.length; k++)
	            star.lineTo(points[k][0], points[k][1]);

	      star.closePath();
	      return star;
	  }

	  public Shape createHex(final double s) 
	  {
			GeneralPath hexagon = new GeneralPath();
			hexagon.moveTo(s, 0);
			for (int i = 0; i < 6; i++) 
			    hexagon.lineTo((float)Math.cos(i*Math.PI/3)*s, 
					   (float)Math.sin(i*Math.PI/3)*s);
			hexagon.closePath();
	      return hexagon;
	  }
	  
	  public Shape createRhombus(final double s) 
	  {
		  double points[][] = { 
			        { 0, -s }, { -s, 0}, { 0,s}, { s,0 }, 
			    };
		      final GeneralPath r = new GeneralPath();
		        r.moveTo(points[0][0], points[0][1]);

		        for (int k = 1; k < points.length; k++)
		            r.lineTo(points[k][0], points[k][1]);

		      r.closePath();
		      return r;
	  }

	  public Shape createRhombusL() 
	  {
		  double points2[][] = { 
			        { 10, 0 }, { 0, 10}, { 10,20}, { 20,10 }, 
			    };
	      final GeneralPath r = new GeneralPath(); // rhombus
	        r.moveTo(points2[0][0], points2[0][1]);

	        for (int k = 1; k < points2.length; k++)
	            r.lineTo(points2[k][0], points2[k][1]);

	      r.closePath();
	      return r;
	  }

	  public Shape createUpTriangle(final double s) 
	  {
	      final GeneralPath p0 = new GeneralPath();
	      p0.moveTo(0, -s);
	      p0.lineTo(s, s);
	      p0.lineTo(-s, s);
	      p0.closePath();
	      return p0;
	  }

	  public Shape createUpTriangleL() 
	  {
	      GeneralPath p0 = new GeneralPath(); // triangle
	      
	      p0.moveTo(20, 0);
	      p0.lineTo(10, 20);
	      p0.lineTo(0, 0);
	      p0.closePath();
	      return p0;
	  }

	  public void loadPerspectives()
	  {
		  String perspectives = (String)coreProp.get(Constants.PERSPECTIVE);
		  StringTokenizer tokens = new StringTokenizer(perspectives, ";");
		  Hashtable perspectiveHash = new Hashtable();
		  while(tokens.hasMoreTokens())
		  {
			  String perspective = tokens.nextToken();
			  perspectiveHash.put(perspective, perspective); // the value will be replaced later with another hash
			  localProp.put(Constants.PERSPECTIVE, perspectiveHash);
			  loadQuestions(perspective);			  	
		  }
	  }
	  
	  public Object getLocalProp(String key)
	  {
		  return localProp.get(key);
	  }

	  public void loadQuestions(String perspective)
	  {
			String key = perspective;
			String qsList = coreProp.getProperty(key); // get the ; delimited questions
			
			Hashtable qsHash = new Hashtable();
			Hashtable layoutHash = new Hashtable();
			if(qsList != null)
			{
				StringTokenizer qsTokens = new StringTokenizer(qsList,";");
				while(qsTokens.hasMoreElements())
				{
					String qsKey = qsTokens.nextToken();
					String qsDescr = coreProp.getProperty(qsKey);
					String layoutName = coreProp.getProperty(qsKey + "_" + Constants.LAYOUT);
					qsHash.put(qsDescr, qsKey); // I do this because I will use this to look up other things later
					layoutHash.put(qsKey + "_" + Constants.LAYOUT, layoutName);
					localProp.put(qsDescr, qsKey);
				}
				localProp.put(key, qsHash); // replaces the previous hash with the new one now
				localProp.put(key + "_" + Constants.LAYOUT, layoutHash);
			}
	  }
	  
	  public void loadExtendObjects()
	  {
		  String perspective = (String)extendProp.get(Constants.EXTEND_PERSPECTIVE);
		  
		  StringTokenizer tokens = new StringTokenizer(perspective, ";");
		  Hashtable extendHash = new Hashtable();
		  while(tokens.hasMoreTokens())
		  {
			  String type = tokens.nextToken();
			  Vector questionV = loadExtendQuestions(type);
			  extendHash.put(type, questionV);
		  }
		  localProp.put(Constants.EXTEND_TABLE, extendHash);
	  }
	  
	  public Vector loadExtendQuestions(String type)
	  {
			String key = type;
			String qsList = extendProp.getProperty(key); // get the ; delimited questions
			
			Vector v= new Vector();
			if(qsList != null)
			{
				StringTokenizer qsTokens = new StringTokenizer(qsList,";");
				while(qsTokens.hasMoreElements())
				{
					String qsKey = qsTokens.nextToken();
					String qsDescr = extendProp.getProperty(qsKey);
					
					v.addElement(qsDescr);
				}
			}
			
			return v;
	  }
	  public Hashtable getQuestions(String perspective)
	  {
		  return (Hashtable)localProp.get(perspective);
		  
	  }
	  
	  public void setLocalProperty(String property, Object value)
	  {
		  localProp.put(property, value);
	  }
	  
	  public String getIDForQuestion(String question)
	  {
		  return (String)localProp.get(question);
	  }
	  
	  public void loadCoreProp(String fileName, String extendFileName)
	  {
			try {
				coreProp = new Properties();
				coreProp.load(new FileInputStream(fileName));
				extendProp = new Properties();
				extendProp.load(new FileInputStream(extendFileName));
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	  }
	  
	  public Hashtable<String, DBCMVertex> getVertexStore()
	  {
		  return this.vertHash;
	  }
	  
	  public Hashtable<String, DBCMEdge> getEdgeStore()
	  {
		  return this.edgeHash;
	  }
	  
	  
}
