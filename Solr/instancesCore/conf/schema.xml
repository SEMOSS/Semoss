<?xml version="1.0" encoding="UTF-8" ?>

<!-- schema for instances -->
<schema name="instances-solr" version="1.5">

	<!-- Valid attributes for fields:
	 name: mandatory - the name for the field
	 type: mandatory - the name of a field type from the 
	   <types> fieldType section
	 indexed: true if this field should be indexed (searchable or sortable)
	 stored: true if this field should be retrievable
	 docValues: true if this field should have doc values. Doc values are
	   useful for faceting, grouping, sorting and function queries. Although not
	   required, doc values will make the index faster to load, more
	   NRT-friendly and more memory-efficient. They however come with some
	   limitations: they are currently only supported by StrField, UUIDField
	   and all Trie*Fields, and depending on the field type, they might
	   require the field to be single-valued, be required or have a default
	   value (check the documentation of the field type you're interested in
	   for more information)
	 multiValued: true if this field may contain multiple values per document
	 omitNorms: (expert) set to true to omit the norms associated with
	   this field (this disables length normalization and index-time
	   boosting for the field, and saves some memory).  Only full-text
	   fields or fields that need an index-time boost need norms.
	   Norms are omitted for primitive (non-analyzed) types by default.
	 termVectors: [false] set to true to store the term vector for a
	   given field.
	   When using MoreLikeThis, fields used for similarity should be
	   stored for best performance.
	 termPositions: Store position information with the term vector.  
	   This will increase storage costs.
	 termOffsets: Store offset information with the term vector. This 
	   will increase storage costs.
	 required: The field is required.  It will throw an error if the
	   value does not exist
	 default: a value that should be used if no value is specified
	   when adding a document.
	-->

	<!-- field names should consist of alphanumeric or underscore characters only and
	  not start with a digit.  This is not currently strictly enforced,
	  but other field names will not have first class support from all components
	  and back compatibility is not guaranteed.  Names with both leading and
	  trailing underscores (e.g. _version_) are reserved.
	-->
	
	<fields>
		<!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml
		  or Solr won't start. _version_ and update log are required for SolrCloud
		--> 
		<field name="_version_" type="long" indexed="true" stored="true"/>

		<!-- points to the root document of a block of nested documents. Required for nested
		  document support, may be removed otherwise
		-->
		<field name="_root_" type="string" indexed="true" stored="false"/>

		<!-- Only remove the "id" field if you have a very good reason to. While not strictly
		 required, it is highly recommended. A <uniqueKey> is present in almost all Solr 
		 installations. See the <uniqueKey> declaration below where <uniqueKey> is set to "id".
		-->   
		
		<!-- THIS IS GENERAL INFORMATION REGARDING SEARCHING INSIGHTS
		 this will hold a unique id for each insight 
		-->
		<field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false" />
		<field name="core_engine" type="string" indexed="true" stored="true" required="true" multiValued="false" />
		<field name="value" type="string" indexed="true" stored="true" required="true" multiValued="false" /> 
		<field name="instances" type="text_en_splitting" indexed="true" stored="true" required="true" multiValued="true" /> 
		
		<!-- field for suggest -->
		<field name="instance_suggest" type="text_suggest" indexed="true" stored="false" required="true" multiValued="true" /> 
		<copyField source="instances" dest="instance_suggest"/>
		
		<!-- field for spellcheck -->
		<field name="instance_spelling" type="text_spelling" indexed="true" stored="false" required="true" multiValued="true" termVectors="true" termPositions="true" termOffsets="true"/> 
		<copyField source="instances" dest="instance_spelling"/>
		
	</fields>
	<!-- Field to use to determine and enforce document uniqueness. 
		Unless this field is marked with required="false", it will be a required field
	-->
	<uniqueKey>id</uniqueKey>
	
	<types>
	
		<!-- string type-->
		<fieldType name="string" class="solr.TextField" sortMissingLast="true" />
		<!-- boolean type: "true" or "false" -->
		<fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>
		<!-- string type-->
		<fieldType name="date" class="solr.DateField" sortMissingLast="true"/>

		<fieldType name="view_count" keyField="id" defVal="0" stored="true" indexed="true" class="solr.ExternalFileField" valType="pfloat"/>
		<fieldType name="favorites_count" keyField="id" defVal="0" stored="true" indexed="true" class="solr.ExternalFileField" valType="pfloat"/>

		<!--
		  Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
		  These fields support doc values, but they require the field to be
		  single-valued and either be required or have a default value.
		-->
		<fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
		<fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
		<fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
		<fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>
			

		
	<!-- creating a new field type for autosuggest that doesnt use 'term vectors'-->
		<fieldType name="text_suggest" class="solr.TextField" positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.KeywordTokenizerFactory"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="_" replacement=" " replace="all" /> 
				<filter class="solr.EnglishMinimalStemFilterFactory"/> 
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.KeywordTokenizerFactory"/>
				<filter class="solr.StopFilterFactory" words="stopwords.txt" ignoreCase="true"/>
				<filter class="solr.LowerCaseFilterFactory"/>
			</analyzer>
		</fieldType>

		
			<!-- Field type for spellcheck that uses whitespace tokenizer'-->
		<fieldType name="text_spelling" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
		  <analyzer type="index">
			<tokenizer class="solr.WhitespaceTokenizerFactory"/>
			<filter class="solr.PatternReplaceFilterFactory" pattern="_" replacement=" " replace="all" /> 
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
			<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="0" catenateWords="1" splitOnNumerics="0" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
			<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
		  </analyzer>
		  <analyzer type="query">
			<tokenizer class="solr.WhitespaceTokenizerFactory"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
			<filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0"  stemEnglishPossessive="0" catenateWords="0" splitOnNumerics="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
		  </analyzer>
		</fieldType>
		
			
			<!-- Field type that uses KeyWord Tokenizer-->
		<fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
		  <analyzer type="index">
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.PatternReplaceFilterFactory" pattern="_" replacement=" " replace="all" /> 
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
			<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="0" catenateWords="1" splitOnNumerics="0" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
			<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
		  </analyzer>
		  <analyzer type="query">
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
			<filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0"  stemEnglishPossessive="0" catenateWords="0" splitOnNumerics="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
		  </analyzer>
		</fieldType>					

	</types>
	 
</schema>