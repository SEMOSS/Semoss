Package prerna.sablecc2;

Helpers
 alpha = [['a' .. 'z'] + ['A' .. 'Z']];
 letter_s = ['a' .. 'z'];
 letter_b = ['A' .. 'Z'];
 digit = ['0' .. '9'];
 underscore = '_';
 alphanumeric = [0 .. 0xFFFF];
 quote = ('"' | ''');
 not_quote = [alphanumeric - ['"' + ''']];
 startjson = '<json>';
 endjson = '</json>';
 
Tokens
 number = ['0' .. '9']+;
 boolean = ('TRUE' | 'FALSE' | 'true' | 'false');
 sort = ('up' | 'down' | 'asc' | 'dsc');
 id = (letter_s | letter_b | digit | underscore)*;
 dot = '.';
 code_alpha='<c>' alphanumeric* '</c>';
 semicolon = ';';
 colon = ':';
 plus = '+';
 minus = '-';
 mod = '%';
 pow = '^';
 quote = ('"' | ''' | '~');
 word = quote not_quote* quote;
 mult = '*';
 comma = ',';
 div = '/';
 comparator = ('>' | '<' | '<=' | '>=' | '!=' | '?like' | '==' | '<>');
 equal = '=';
 selectorid = ('s='| 's');
 optionid = 'o=';
 projectid = 'p=';
 propid = 'props=';
 labelid = 'l=';
 joinid = 'j=';
 tooltipid = 't=';
 l_par = '(';
 r_par = ')';
 l_brac = '[';
 r_brac = ']';
 frameprefix = 'f$';
 frameid = 'f';
 blank = (' ' | 13 | 10);
 output = 'output';
 java = '<j>' alphanumeric* '</j>';
 r = '<j> runR(' alphanumeric* ')</j>';
 if = 'if';
 as_op = ('.as' | '.out');
 custom = '|';
 rel_type = ('inner.join' | 'outer.join' | 'right.outer.join' | 'left.outer.join' | 'cross.join' | 'self.join' ); 

Ignored Tokens
blank;

Productions 

 ///////////////////////////////////////////////////////////////////////
 ///////////////////////// START HIGHEST LEVEL /////////////////////////
 ///////////////////////////////////////////////////////////////////////
 // everything is a configuration
 // this should very very rarely change
 
 configuration = routine*;
 
 // all routines are a series of scripts
 // or an assignment from the series of scripts
 routine = 
	{output} scriptchain semicolon 
	| {assign} assignment semicolon
	;
 
 scriptchain = script otherscript*;
 otherscript = custom script;

 // an assignment if a word or number equal to
 // some kind of evaluation
 assignment = word_or_id equal scriptchain;
 
 // script is any expression
 // or an assignment
 script = {expression} expr 
		| {embedded_assignment} embedded_assignment 
		;
 
  // if we have an assignment that is embedded within a script
 embedded_assignment = l_par id equal script r_par;
 
 ///////////////////////////////////////////////////////////////////////
 ///////////////////////// END HIGHEST LEVEL ///////////////////////////
 ///////////////////////////////////////////////////////////////////////
 
 expr =
  {expr_component} expr_component
  | {plus} [left]:expr_component plus [right]:expr
  | {minus} [left]:expr_component minus [right]:expr
  | {mult} [left]:expr_component mult [right]:expr 
  | {div} [left]:expr_component div [right]:expr 
  | {mod} [left]:expr_component mod [right]:expr
  | {comparison} [left]:expr_component comparator [right]:expr
  ;
  
 expr_component = {term} term | {power} power;
 
 term = {reg_term} reg_term | {neg_term} neg_term | {pos_term} pos_term;
 
 // to accomodate for -var and +var 
 neg_term = minus term;
 pos_term = plus term;
 
 reg_term =
    {scalar} scalar
	| {formula} formula
	| {opformula} operation_formula
	| {frameop} frameop
	| {ref} rcol
	| {dotcol} dotcol 
	| {java_op} java_op 
	| {r_op} r_op
	| {list} list
	| {csv} gen_row
  //| null <- todo, will need to redefine this
  	; 
 
 // to handle something raised to a power
 power = [base]:term pow [exponent]:term;
 
 // reference - this means the 4th column in the current frame
 rcol = frameprefix number; // f$4
 dotcol = frameid dot [column_name]:id; // f.Title
 
 // for java and r operations
 java_op = java;
 r_op = r;
 
 // word or id or number
 scalar = {num} decimal | {word_or_id} word_or_id | {boolean} boolean;
 // word or an id
 word_or_id = {word} word | {id} id;
 // numbers
 decimal = {whole_decimal} whole_decimal | {fraction_decimal} fraction_decimal;
 whole_decimal = [whole]:number dot? [fraction]:number?;
 fraction_decimal = dot [fraction]:number?;
 
 // need to able to group expressions 
 // will call this a formula
 formula = l_par expr r_par;
 
 // need to allow a list of expressions
 list = l_par expr other_expr+ r_par;
 other_expr = comma expr;
 
 // col def is an expression, a reference to a frame header
 // or a filter/prop/relationship to be used within an operation
 col_def = {expr} expr 
		| {prop} prop 
		| {relation} relationship
		;
 
 // creating another column
 othercol =  comma col_def;
 
 // different ways to define col_def within operations
 gen_row = l_brac  col_def othercol* r_brac; // generic row
 plain_row = l_par col_def? othercol* r_par;
 
 // example - output of any operation
 operation_formula = id plain_row asop?;
 
 // operations on a frame with explicit parameters
 frameop = id l_par noun othernoun* r_par asop?; // any operation on the frame. we will pick up the name through reflection
 
 prop = id equal scalar;

 // s=[col, col, col...]
 selectors = selectorid  gen_row;
 projectors = projectid  gen_row;
 labels = labelid  gen_row;
 props = propid gen_row;
 tooltips = tooltipid gen_row;
 joins = joinid  gen_row;
 generic = id equal gen_row;
 
 noun = {select} selectors | {project} projectors | {labels} labels | {tooltips} tooltips | {others} generic | {props} props | {code} code_alpha;
 othernoun =  comma noun;

 // operation used for aliasing columns
 asop = as_op l_par gen_row r_par;
 
 // relationship is used for joins within a database and table joining when adding new data to existing frame
 relationship = l_par [lcol]:col_def rel_type [rcol]:col_def r_par; 