/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.analysis;

import prerna.sablecc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAConfiguration(AConfiguration node);
    void caseAColopScript(AColopScript node);
    void caseAVaropScript(AVaropScript node);
    void caseAJOpScript(AJOpScript node);
    void caseAExprScript(AExprScript node);
    void caseAScript(AScript node);
    void caseAAddColumnColop(AAddColumnColop node);
    void caseAJoincolColop(AJoincolColop node);
    void caseARemcolColop(ARemcolColop node);
    void caseASetcolColop(ASetcolColop node);
    void caseAPivotcolColop(APivotcolColop node);
    void caseAFiltercolColop(AFiltercolColop node);
    void caseAFocuscolColop(AFocuscolColop node);
    void caseAUnfocusColop(AUnfocusColop node);
    void caseAAddColumn(AAddColumn node);
    void caseAJoinColumn(AJoinColumn node);
    void caseARemColumn(ARemColumn node);
    void caseASetColumn(ASetColumn node);
    void caseAPivotColumn(APivotColumn node);
    void caseAFilterColumn(AFilterColumn node);
    void caseAFocusColumn(AFocusColumn node);
    void caseAUnfocus(AUnfocus node);
    void caseAExprGroup(AExprGroup node);
    void caseAApiBlock(AApiBlock node);
    void caseAIfBlock(AIfBlock node);
    void caseAColGroup(AColGroup node);
    void caseAColDef(AColDef node);
    void caseAVarDef(AVarDef node);
    void caseAVarop(AVarop node);
    void caseAJOp(AJOp node);
    void caseAFactorExpr(AFactorExpr node);
    void caseAPlusExpr(APlusExpr node);
    void caseAMinusExpr(AMinusExpr node);
    void caseAMathFunExpr(AMathFunExpr node);
    void caseAMathFun(AMathFun node);
    void caseATermFactor(ATermFactor node);
    void caseAMultFactor(AMultFactor node);
    void caseADivFactor(ADivFactor node);
    void caseAModFactor(AModFactor node);
    void caseANumberTerm(ANumberTerm node);
    void caseAExprTerm(AExprTerm node);
    void caseAVarTerm(AVarTerm node);
    void caseAColTerm(AColTerm node);
    void caseAApiTerm(AApiTerm node);
    void caseATerm(ATerm node);

    void caseTNumber(TNumber node);
    void caseTId(TId node);
    void caseTSemicolon(TSemicolon node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTComma(TComma node);
    void caseTDiv(TDiv node);
    void caseTCol(TCol node);
    void caseTComparator(TComparator node);
    void caseTColadd(TColadd node);
    void caseTApi(TApi node);
    void caseTMath(TMath node);
    void caseTColjoin(TColjoin node);
    void caseTColprefix(TColprefix node);
    void caseTValprefix(TValprefix node);
    void caseTColremove(TColremove node);
    void caseTColfilter(TColfilter node);
    void caseTColset(TColset node);
    void caseTColpivot(TColpivot node);
    void caseTColfocus(TColfocus node);
    void caseTCollink(TCollink node);
    void caseTShowHide(TShowHide node);
    void caseTMod(TMod node);
    void caseTLPar(TLPar node);
    void caseTDot(TDot node);
    void caseTRPar(TRPar node);
    void caseTBlank(TBlank node);
    void caseTEqual(TEqual node);
    void caseTNewline(TNewline node);
    void caseTCodeblock(TCodeblock node);
    void caseTJava(TJava node);
    void caseTProc(TProc node);
    void caseTThis(TThis node);
    void caseTNull(TNull node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
