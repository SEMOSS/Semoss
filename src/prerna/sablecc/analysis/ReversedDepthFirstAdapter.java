/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.analysis;

import java.util.*;
import prerna.sablecc.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPConfiguration().apply(this);
        outStart(node);
    }

    public void inAConfiguration(AConfiguration node)
    {
        defaultIn(node);
    }

    public void outAConfiguration(AConfiguration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConfiguration(AConfiguration node)
    {
        inAConfiguration(node);
        {
            List<PScript> copy = new ArrayList<PScript>(node.getScript());
            Collections.reverse(copy);
            for(PScript e : copy)
            {
                e.apply(this);
            }
        }
        outAConfiguration(node);
    }

    public void inAColopScript(AColopScript node)
    {
        defaultIn(node);
    }

    public void outAColopScript(AColopScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColopScript(AColopScript node)
    {
        inAColopScript(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getColop() != null)
        {
            node.getColop().apply(this);
        }
        outAColopScript(node);
    }

    public void inAVaropScript(AVaropScript node)
    {
        defaultIn(node);
    }

    public void outAVaropScript(AVaropScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVaropScript(AVaropScript node)
    {
        inAVaropScript(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getVarop() != null)
        {
            node.getVarop().apply(this);
        }
        outAVaropScript(node);
    }

    public void inAJOpScript(AJOpScript node)
    {
        defaultIn(node);
    }

    public void outAJOpScript(AJOpScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJOpScript(AJOpScript node)
    {
        inAJOpScript(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getJOp() != null)
        {
            node.getJOp().apply(this);
        }
        outAJOpScript(node);
    }

    public void inAExprScript(AExprScript node)
    {
        defaultIn(node);
    }

    public void outAExprScript(AExprScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprScript(AExprScript node)
    {
        inAExprScript(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprScript(node);
    }

    public void inAScript(AScript node)
    {
        defaultIn(node);
    }

    public void outAScript(AScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScript(AScript node)
    {
        inAScript(node);
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        outAScript(node);
    }

    public void inAAddColumnColop(AAddColumnColop node)
    {
        defaultIn(node);
    }

    public void outAAddColumnColop(AAddColumnColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddColumnColop(AAddColumnColop node)
    {
        inAAddColumnColop(node);
        if(node.getAddColumn() != null)
        {
            node.getAddColumn().apply(this);
        }
        outAAddColumnColop(node);
    }

    public void inAJoincolColop(AJoincolColop node)
    {
        defaultIn(node);
    }

    public void outAJoincolColop(AJoincolColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJoincolColop(AJoincolColop node)
    {
        inAJoincolColop(node);
        if(node.getJoinColumn() != null)
        {
            node.getJoinColumn().apply(this);
        }
        outAJoincolColop(node);
    }

    public void inARemcolColop(ARemcolColop node)
    {
        defaultIn(node);
    }

    public void outARemcolColop(ARemcolColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemcolColop(ARemcolColop node)
    {
        inARemcolColop(node);
        if(node.getRemColumn() != null)
        {
            node.getRemColumn().apply(this);
        }
        outARemcolColop(node);
    }

    public void inASetcolColop(ASetcolColop node)
    {
        defaultIn(node);
    }

    public void outASetcolColop(ASetcolColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetcolColop(ASetcolColop node)
    {
        inASetcolColop(node);
        if(node.getSetColumn() != null)
        {
            node.getSetColumn().apply(this);
        }
        outASetcolColop(node);
    }

    public void inAPivotcolColop(APivotcolColop node)
    {
        defaultIn(node);
    }

    public void outAPivotcolColop(APivotcolColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPivotcolColop(APivotcolColop node)
    {
        inAPivotcolColop(node);
        if(node.getPivotColumn() != null)
        {
            node.getPivotColumn().apply(this);
        }
        outAPivotcolColop(node);
    }

    public void inAFiltercolColop(AFiltercolColop node)
    {
        defaultIn(node);
    }

    public void outAFiltercolColop(AFiltercolColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFiltercolColop(AFiltercolColop node)
    {
        inAFiltercolColop(node);
        if(node.getFilterColumn() != null)
        {
            node.getFilterColumn().apply(this);
        }
        outAFiltercolColop(node);
    }

    public void inAFocuscolColop(AFocuscolColop node)
    {
        defaultIn(node);
    }

    public void outAFocuscolColop(AFocuscolColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFocuscolColop(AFocuscolColop node)
    {
        inAFocuscolColop(node);
        if(node.getFocusColumn() != null)
        {
            node.getFocusColumn().apply(this);
        }
        outAFocuscolColop(node);
    }

    public void inAUnfocusColop(AUnfocusColop node)
    {
        defaultIn(node);
    }

    public void outAUnfocusColop(AUnfocusColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnfocusColop(AUnfocusColop node)
    {
        inAUnfocusColop(node);
        if(node.getUnfocus() != null)
        {
            node.getUnfocus().apply(this);
        }
        outAUnfocusColop(node);
    }

    public void inAAddColumn(AAddColumn node)
    {
        defaultIn(node);
    }

    public void outAAddColumn(AAddColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddColumn(AAddColumn node)
    {
        inAAddColumn(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExprGroup() != null)
        {
            node.getExprGroup().apply(this);
        }
        if(node.getNewcol() != null)
        {
            node.getNewcol().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getColadd() != null)
        {
            node.getColadd().apply(this);
        }
        outAAddColumn(node);
    }

    public void inAJoinColumn(AJoinColumn node)
    {
        defaultIn(node);
    }

    public void outAJoinColumn(AJoinColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJoinColumn(AJoinColumn node)
    {
        inAJoinColumn(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PColGroup> copy = new ArrayList<PColGroup>(node.getJoincol());
            Collections.reverse(copy);
            for(PColGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNewcol() != null)
        {
            node.getNewcol().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getColjoin() != null)
        {
            node.getColjoin().apply(this);
        }
        outAJoinColumn(node);
    }

    public void inARemColumn(ARemColumn node)
    {
        defaultIn(node);
    }

    public void outARemColumn(ARemColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemColumn(ARemColumn node)
    {
        inARemColumn(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PColGroup> copy = new ArrayList<PColGroup>(node.getColGroup());
            Collections.reverse(copy);
            for(PColGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNewcol() != null)
        {
            node.getNewcol().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getColremove() != null)
        {
            node.getColremove().apply(this);
        }
        outARemColumn(node);
    }

    public void inASetColumn(ASetColumn node)
    {
        defaultIn(node);
    }

    public void outASetColumn(ASetColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetColumn(ASetColumn node)
    {
        inASetColumn(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getNewcol() != null)
        {
            node.getNewcol().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getColset() != null)
        {
            node.getColset().apply(this);
        }
        outASetColumn(node);
    }

    public void inAPivotColumn(APivotColumn node)
    {
        defaultIn(node);
    }

    public void outAPivotColumn(APivotColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPivotColumn(APivotColumn node)
    {
        inAPivotColumn(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PColGroup> copy = new ArrayList<PColGroup>(node.getColGroup());
            Collections.reverse(copy);
            for(PColGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFirstcol() != null)
        {
            node.getFirstcol().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getColpivot() != null)
        {
            node.getColpivot().apply(this);
        }
        outAPivotColumn(node);
    }

    public void inAFilterColumn(AFilterColumn node)
    {
        defaultIn(node);
    }

    public void outAFilterColumn(AFilterColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilterColumn(AFilterColumn node)
    {
        inAFilterColumn(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIfBlock() != null)
        {
            node.getIfBlock().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        {
            List<PColGroup> copy = new ArrayList<PColGroup>(node.getColGroup());
            Collections.reverse(copy);
            for(PColGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFirstcol() != null)
        {
            node.getFirstcol().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getColfilter() != null)
        {
            node.getColfilter().apply(this);
        }
        outAFilterColumn(node);
    }

    public void inAFocusColumn(AFocusColumn node)
    {
        defaultIn(node);
    }

    public void outAFocusColumn(AFocusColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFocusColumn(AFocusColumn node)
    {
        inAFocusColumn(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getShowHide() != null)
        {
            node.getShowHide().apply(this);
        }
        {
            List<PColGroup> copy = new ArrayList<PColGroup>(node.getColGroup());
            Collections.reverse(copy);
            for(PColGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getColfocus() != null)
        {
            node.getColfocus().apply(this);
        }
        outAFocusColumn(node);
    }

    public void inAUnfocus(AUnfocus node)
    {
        defaultIn(node);
    }

    public void outAUnfocus(AUnfocus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnfocus(AUnfocus node)
    {
        inAUnfocus(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getShowHide() != null)
        {
            node.getShowHide().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getColfocus() != null)
        {
            node.getColfocus().apply(this);
        }
        outAUnfocus(node);
    }

    public void inAExprGroup(AExprGroup node)
    {
        defaultIn(node);
    }

    public void outAExprGroup(AExprGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprGroup(AExprGroup node)
    {
        inAExprGroup(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAExprGroup(node);
    }

    public void inAApiBlock(AApiBlock node)
    {
        defaultIn(node);
    }

    public void outAApiBlock(AApiBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAApiBlock(AApiBlock node)
    {
        inAApiBlock(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PColGroup> copy = new ArrayList<PColGroup>(node.getOtherInput());
            Collections.reverse(copy);
            for(PColGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getInsight() != null)
        {
            node.getInsight().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getEngineName() != null)
        {
            node.getEngineName().apply(this);
        }
        if(node.getApi() != null)
        {
            node.getApi().apply(this);
        }
        outAApiBlock(node);
    }

    public void inAIfBlock(AIfBlock node)
    {
        defaultIn(node);
    }

    public void outAIfBlock(AIfBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfBlock(AIfBlock node)
    {
        inAIfBlock(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getComparator() != null)
        {
            node.getComparator().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAIfBlock(node);
    }

    public void inAColGroup(AColGroup node)
    {
        defaultIn(node);
    }

    public void outAColGroup(AColGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColGroup(AColGroup node)
    {
        inAColGroup(node);
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAColGroup(node);
    }

    public void inAColDef(AColDef node)
    {
        defaultIn(node);
    }

    public void outAColDef(AColDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColDef(AColDef node)
    {
        inAColDef(node);
        if(node.getColname() != null)
        {
            node.getColname().apply(this);
        }
        if(node.getColprefix() != null)
        {
            node.getColprefix().apply(this);
        }
        outAColDef(node);
    }

    public void inAVarDef(AVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDef(AVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDef(AVarDef node)
    {
        inAVarDef(node);
        if(node.getValname() != null)
        {
            node.getValname().apply(this);
        }
        if(node.getValprefix() != null)
        {
            node.getValprefix().apply(this);
        }
        outAVarDef(node);
    }

    public void inAVarop(AVarop node)
    {
        defaultIn(node);
    }

    public void outAVarop(AVarop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarop(AVarop node)
    {
        inAVarop(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAVarop(node);
    }

    public void inAJOp(AJOp node)
    {
        defaultIn(node);
    }

    public void outAJOp(AJOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJOp(AJOp node)
    {
        inAJOp(node);
        if(node.getCodeblock() != null)
        {
            node.getCodeblock().apply(this);
        }
        if(node.getJava() != null)
        {
            node.getJava().apply(this);
        }
        outAJOp(node);
    }

    public void inAFactorExpr(AFactorExpr node)
    {
        defaultIn(node);
    }

    public void outAFactorExpr(AFactorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorExpr(AFactorExpr node)
    {
        inAFactorExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorExpr(node);
    }

    public void inAPlusExpr(APlusExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusExpr(APlusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpr(APlusExpr node)
    {
        inAPlusExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAPlusExpr(node);
    }

    public void inAMinusExpr(AMinusExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusExpr(AMinusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpr(AMinusExpr node)
    {
        inAMinusExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMinusExpr(node);
    }

    public void inAMathFunExpr(AMathFunExpr node)
    {
        defaultIn(node);
    }

    public void outAMathFunExpr(AMathFunExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMathFunExpr(AMathFunExpr node)
    {
        inAMathFunExpr(node);
        if(node.getMathFun() != null)
        {
            node.getMathFun().apply(this);
        }
        outAMathFunExpr(node);
    }

    public void inAMathFun(AMathFun node)
    {
        defaultIn(node);
    }

    public void outAMathFun(AMathFun node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMathFun(AMathFun node)
    {
        inAMathFun(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getProc() != null)
        {
            node.getProc().apply(this);
        }
        outAMathFun(node);
    }

    public void inATermFactor(ATermFactor node)
    {
        defaultIn(node);
    }

    public void outATermFactor(ATermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        inATermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermFactor(node);
    }

    public void inAMultFactor(AMultFactor node)
    {
        defaultIn(node);
    }

    public void outAMultFactor(AMultFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        inAMultFactor(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultFactor(node);
    }

    public void inADivFactor(ADivFactor node)
    {
        defaultIn(node);
    }

    public void outADivFactor(ADivFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivFactor(node);
    }

    public void inAModFactor(AModFactor node)
    {
        defaultIn(node);
    }

    public void outAModFactor(AModFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        inAModFactor(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModFactor(node);
    }

    public void inANumberTerm(ANumberTerm node)
    {
        defaultIn(node);
    }

    public void outANumberTerm(ANumberTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        inANumberTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberTerm(node);
    }

    public void inAExprTerm(AExprTerm node)
    {
        defaultIn(node);
    }

    public void outAExprTerm(AExprTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprTerm(AExprTerm node)
    {
        inAExprTerm(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAExprTerm(node);
    }

    public void inAVarTerm(AVarTerm node)
    {
        defaultIn(node);
    }

    public void outAVarTerm(AVarTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        inAVarTerm(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getValprefix() != null)
        {
            node.getValprefix().apply(this);
        }
        outAVarTerm(node);
    }

    public void inAColTerm(AColTerm node)
    {
        defaultIn(node);
    }

    public void outAColTerm(AColTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColTerm(AColTerm node)
    {
        inAColTerm(node);
        if(node.getCol() != null)
        {
            node.getCol().apply(this);
        }
        outAColTerm(node);
    }

    public void inAApiTerm(AApiTerm node)
    {
        defaultIn(node);
    }

    public void outAApiTerm(AApiTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAApiTerm(AApiTerm node)
    {
        inAApiTerm(node);
        if(node.getApiBlock() != null)
        {
            node.getApiBlock().apply(this);
        }
        outAApiTerm(node);
    }

    public void inATerm(ATerm node)
    {
        defaultIn(node);
    }

    public void outATerm(ATerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATerm(ATerm node)
    {
        inATerm(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outATerm(node);
    }
}
