/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.analysis;

import java.util.*;
import prerna.sablecc.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPConfiguration().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAConfiguration(AConfiguration node)
    {
        defaultIn(node);
    }

    public void outAConfiguration(AConfiguration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConfiguration(AConfiguration node)
    {
        inAConfiguration(node);
        {
            List<PScript> copy = new ArrayList<PScript>(node.getScript());
            for(PScript e : copy)
            {
                e.apply(this);
            }
        }
        outAConfiguration(node);
    }

    public void inAColopScript(AColopScript node)
    {
        defaultIn(node);
    }

    public void outAColopScript(AColopScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColopScript(AColopScript node)
    {
        inAColopScript(node);
        if(node.getColop() != null)
        {
            node.getColop().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAColopScript(node);
    }

    public void inAVaropScript(AVaropScript node)
    {
        defaultIn(node);
    }

    public void outAVaropScript(AVaropScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVaropScript(AVaropScript node)
    {
        inAVaropScript(node);
        if(node.getVarop() != null)
        {
            node.getVarop().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAVaropScript(node);
    }

    public void inAExprScript(AExprScript node)
    {
        defaultIn(node);
    }

    public void outAExprScript(AExprScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprScript(AExprScript node)
    {
        inAExprScript(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAExprScript(node);
    }

    public void inAHelpScript(AHelpScript node)
    {
        defaultIn(node);
    }

    public void outAHelpScript(AHelpScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHelpScript(AHelpScript node)
    {
        inAHelpScript(node);
        if(node.getHelp() != null)
        {
            node.getHelp().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAHelpScript(node);
    }

    public void inAPanelopScript(APanelopScript node)
    {
        defaultIn(node);
    }

    public void outAPanelopScript(APanelopScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelopScript(APanelopScript node)
    {
        inAPanelopScript(node);
        if(node.getPanelop() != null)
        {
            node.getPanelop().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPanelopScript(node);
    }

    public void inAScript(AScript node)
    {
        defaultIn(node);
    }

    public void outAScript(AScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScript(AScript node)
    {
        inAScript(node);
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        outAScript(node);
    }

    public void inAAddColumnColop(AAddColumnColop node)
    {
        defaultIn(node);
    }

    public void outAAddColumnColop(AAddColumnColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddColumnColop(AAddColumnColop node)
    {
        inAAddColumnColop(node);
        if(node.getAddColumn() != null)
        {
            node.getAddColumn().apply(this);
        }
        outAAddColumnColop(node);
    }

    public void inARemcolColop(ARemcolColop node)
    {
        defaultIn(node);
    }

    public void outARemcolColop(ARemcolColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemcolColop(ARemcolColop node)
    {
        inARemcolColop(node);
        if(node.getRemColumn() != null)
        {
            node.getRemColumn().apply(this);
        }
        outARemcolColop(node);
    }

    public void inASetcolColop(ASetcolColop node)
    {
        defaultIn(node);
    }

    public void outASetcolColop(ASetcolColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetcolColop(ASetcolColop node)
    {
        inASetcolColop(node);
        if(node.getSetColumn() != null)
        {
            node.getSetColumn().apply(this);
        }
        outASetcolColop(node);
    }

    public void inAPivotcolColop(APivotcolColop node)
    {
        defaultIn(node);
    }

    public void outAPivotcolColop(APivotcolColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPivotcolColop(APivotcolColop node)
    {
        inAPivotcolColop(node);
        if(node.getPivotColumn() != null)
        {
            node.getPivotColumn().apply(this);
        }
        outAPivotcolColop(node);
    }

    public void inAFiltercolColop(AFiltercolColop node)
    {
        defaultIn(node);
    }

    public void outAFiltercolColop(AFiltercolColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFiltercolColop(AFiltercolColop node)
    {
        inAFiltercolColop(node);
        if(node.getFilterColumn() != null)
        {
            node.getFilterColumn().apply(this);
        }
        outAFiltercolColop(node);
    }

    public void inAFocuscolColop(AFocuscolColop node)
    {
        defaultIn(node);
    }

    public void outAFocuscolColop(AFocuscolColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFocuscolColop(AFocuscolColop node)
    {
        inAFocuscolColop(node);
        if(node.getFocusColumn() != null)
        {
            node.getFocusColumn().apply(this);
        }
        outAFocuscolColop(node);
    }

    public void inAUnfocusColop(AUnfocusColop node)
    {
        defaultIn(node);
    }

    public void outAUnfocusColop(AUnfocusColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnfocusColop(AUnfocusColop node)
    {
        inAUnfocusColop(node);
        if(node.getUnfocus() != null)
        {
            node.getUnfocus().apply(this);
        }
        outAUnfocusColop(node);
    }

    public void inAImportColop(AImportColop node)
    {
        defaultIn(node);
    }

    public void outAImportColop(AImportColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportColop(AImportColop node)
    {
        inAImportColop(node);
        if(node.getImportColumn() != null)
        {
            node.getImportColumn().apply(this);
        }
        outAImportColop(node);
    }

    public void inAAliasColop(AAliasColop node)
    {
        defaultIn(node);
    }

    public void outAAliasColop(AAliasColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAliasColop(AAliasColop node)
    {
        inAAliasColop(node);
        if(node.getAliasColumn() != null)
        {
            node.getAliasColumn().apply(this);
        }
        outAAliasColop(node);
    }

    public void inAImportDataColop(AImportDataColop node)
    {
        defaultIn(node);
    }

    public void outAImportDataColop(AImportDataColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportDataColop(AImportDataColop node)
    {
        inAImportDataColop(node);
        if(node.getImportData() != null)
        {
            node.getImportData().apply(this);
        }
        outAImportDataColop(node);
    }

    public void inAUnfiltercolColop(AUnfiltercolColop node)
    {
        defaultIn(node);
    }

    public void outAUnfiltercolColop(AUnfiltercolColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnfiltercolColop(AUnfiltercolColop node)
    {
        inAUnfiltercolColop(node);
        if(node.getUnfilterColumn() != null)
        {
            node.getUnfilterColumn().apply(this);
        }
        outAUnfiltercolColop(node);
    }

    public void inARemoveDataColop(ARemoveDataColop node)
    {
        defaultIn(node);
    }

    public void outARemoveDataColop(ARemoveDataColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemoveDataColop(ARemoveDataColop node)
    {
        inARemoveDataColop(node);
        if(node.getRemoveData() != null)
        {
            node.getRemoveData().apply(this);
        }
        outARemoveDataColop(node);
    }

    public void inADataFrameColop(ADataFrameColop node)
    {
        defaultIn(node);
    }

    public void outADataFrameColop(ADataFrameColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataFrameColop(ADataFrameColop node)
    {
        inADataFrameColop(node);
        if(node.getDataFrame() != null)
        {
            node.getDataFrame().apply(this);
        }
        outADataFrameColop(node);
    }

    public void inADashboardJoinColop(ADashboardJoinColop node)
    {
        defaultIn(node);
    }

    public void outADashboardJoinColop(ADashboardJoinColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADashboardJoinColop(ADashboardJoinColop node)
    {
        inADashboardJoinColop(node);
        if(node.getDashboardJoin() != null)
        {
            node.getDashboardJoin().apply(this);
        }
        outADashboardJoinColop(node);
    }

    public void inAOpenDataColop(AOpenDataColop node)
    {
        defaultIn(node);
    }

    public void outAOpenDataColop(AOpenDataColop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenDataColop(AOpenDataColop node)
    {
        inAOpenDataColop(node);
        if(node.getOpenData() != null)
        {
            node.getOpenData().apply(this);
        }
        outAOpenDataColop(node);
    }

    public void inAPanelVizPanelop(APanelVizPanelop node)
    {
        defaultIn(node);
    }

    public void outAPanelVizPanelop(APanelVizPanelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelVizPanelop(APanelVizPanelop node)
    {
        inAPanelVizPanelop(node);
        if(node.getPanelViz() != null)
        {
            node.getPanelViz().apply(this);
        }
        outAPanelVizPanelop(node);
    }

    public void inAPanelCommentPanelop(APanelCommentPanelop node)
    {
        defaultIn(node);
    }

    public void outAPanelCommentPanelop(APanelCommentPanelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelCommentPanelop(APanelCommentPanelop node)
    {
        inAPanelCommentPanelop(node);
        if(node.getPanelComment() != null)
        {
            node.getPanelComment().apply(this);
        }
        outAPanelCommentPanelop(node);
    }

    public void inAPanelCommentRemovePanelop(APanelCommentRemovePanelop node)
    {
        defaultIn(node);
    }

    public void outAPanelCommentRemovePanelop(APanelCommentRemovePanelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelCommentRemovePanelop(APanelCommentRemovePanelop node)
    {
        inAPanelCommentRemovePanelop(node);
        if(node.getPanelCommentRemove() != null)
        {
            node.getPanelCommentRemove().apply(this);
        }
        outAPanelCommentRemovePanelop(node);
    }

    public void inAPanelCommentEditPanelop(APanelCommentEditPanelop node)
    {
        defaultIn(node);
    }

    public void outAPanelCommentEditPanelop(APanelCommentEditPanelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelCommentEditPanelop(APanelCommentEditPanelop node)
    {
        inAPanelCommentEditPanelop(node);
        if(node.getPanelCommentEdit() != null)
        {
            node.getPanelCommentEdit().apply(this);
        }
        outAPanelCommentEditPanelop(node);
    }

    public void inAPanelLookAndFeelPanelop(APanelLookAndFeelPanelop node)
    {
        defaultIn(node);
    }

    public void outAPanelLookAndFeelPanelop(APanelLookAndFeelPanelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelLookAndFeelPanelop(APanelLookAndFeelPanelop node)
    {
        inAPanelLookAndFeelPanelop(node);
        if(node.getPanelLookAndFeel() != null)
        {
            node.getPanelLookAndFeel().apply(this);
        }
        outAPanelLookAndFeelPanelop(node);
    }

    public void inAPanelToolsPanelop(APanelToolsPanelop node)
    {
        defaultIn(node);
    }

    public void outAPanelToolsPanelop(APanelToolsPanelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelToolsPanelop(APanelToolsPanelop node)
    {
        inAPanelToolsPanelop(node);
        if(node.getPanelTools() != null)
        {
            node.getPanelTools().apply(this);
        }
        outAPanelToolsPanelop(node);
    }

    public void inAPanelConfigPanelop(APanelConfigPanelop node)
    {
        defaultIn(node);
    }

    public void outAPanelConfigPanelop(APanelConfigPanelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelConfigPanelop(APanelConfigPanelop node)
    {
        inAPanelConfigPanelop(node);
        if(node.getPanelConfig() != null)
        {
            node.getPanelConfig().apply(this);
        }
        outAPanelConfigPanelop(node);
    }

    public void inAPanelClonePanelop(APanelClonePanelop node)
    {
        defaultIn(node);
    }

    public void outAPanelClonePanelop(APanelClonePanelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelClonePanelop(APanelClonePanelop node)
    {
        inAPanelClonePanelop(node);
        if(node.getPanelClone() != null)
        {
            node.getPanelClone().apply(this);
        }
        outAPanelClonePanelop(node);
    }

    public void inAPanelClosePanelop(APanelClosePanelop node)
    {
        defaultIn(node);
    }

    public void outAPanelClosePanelop(APanelClosePanelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelClosePanelop(APanelClosePanelop node)
    {
        inAPanelClosePanelop(node);
        if(node.getPanelClose() != null)
        {
            node.getPanelClose().apply(this);
        }
        outAPanelClosePanelop(node);
    }

    public void inAOutputInsightPanelop(AOutputInsightPanelop node)
    {
        defaultIn(node);
    }

    public void outAOutputInsightPanelop(AOutputInsightPanelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutputInsightPanelop(AOutputInsightPanelop node)
    {
        inAOutputInsightPanelop(node);
        if(node.getOutputInsight() != null)
        {
            node.getOutputInsight().apply(this);
        }
        outAOutputInsightPanelop(node);
    }

    public void inAPanelViz(APanelViz node)
    {
        defaultIn(node);
    }

    public void outAPanelViz(APanelViz node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelViz(APanelViz node)
    {
        inAPanelViz(node);
        if(node.getPanelviz() != null)
        {
            node.getPanelviz().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getLayout() != null)
        {
            node.getLayout().apply(this);
        }
        if(node.getC1() != null)
        {
            node.getC1().apply(this);
        }
        if(node.getDatatablealign() != null)
        {
            node.getDatatablealign().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getUioptions() != null)
        {
            node.getUioptions().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPanelViz(node);
    }

    public void inAPanelComment(APanelComment node)
    {
        defaultIn(node);
    }

    public void outAPanelComment(APanelComment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelComment(APanelComment node)
    {
        inAPanelComment(node);
        if(node.getPanelcommentadd() != null)
        {
            node.getPanelcommentadd().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getC1() != null)
        {
            node.getC1().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getLocation() != null)
        {
            node.getLocation().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getGroup() != null)
        {
            node.getGroup().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPanelComment(node);
    }

    public void inAPanelCommentEdit(APanelCommentEdit node)
    {
        defaultIn(node);
    }

    public void outAPanelCommentEdit(APanelCommentEdit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelCommentEdit(APanelCommentEdit node)
    {
        inAPanelCommentEdit(node);
        if(node.getPanelcommentedit() != null)
        {
            node.getPanelcommentedit().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getC1() != null)
        {
            node.getC1().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getLocation() != null)
        {
            node.getLocation().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getGroup() != null)
        {
            node.getGroup().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPanelCommentEdit(node);
    }

    public void inAPanelCommentRemove(APanelCommentRemove node)
    {
        defaultIn(node);
    }

    public void outAPanelCommentRemove(APanelCommentRemove node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelCommentRemove(APanelCommentRemove node)
    {
        inAPanelCommentRemove(node);
        if(node.getPanelcommentremove() != null)
        {
            node.getPanelcommentremove().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPanelCommentRemove(node);
    }

    public void inAPanelLookAndFeel(APanelLookAndFeel node)
    {
        defaultIn(node);
    }

    public void outAPanelLookAndFeel(APanelLookAndFeel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelLookAndFeel(APanelLookAndFeel node)
    {
        inAPanelLookAndFeel(node);
        if(node.getPanellookandfeel() != null)
        {
            node.getPanellookandfeel().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMap() != null)
        {
            node.getMap().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPanelLookAndFeel(node);
    }

    public void inAPanelTools(APanelTools node)
    {
        defaultIn(node);
    }

    public void outAPanelTools(APanelTools node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelTools(APanelTools node)
    {
        inAPanelTools(node);
        if(node.getPaneltools() != null)
        {
            node.getPaneltools().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMap() != null)
        {
            node.getMap().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPanelTools(node);
    }

    public void inAPanelConfig(APanelConfig node)
    {
        defaultIn(node);
    }

    public void outAPanelConfig(APanelConfig node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelConfig(APanelConfig node)
    {
        inAPanelConfig(node);
        if(node.getPanelconfig() != null)
        {
            node.getPanelconfig().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMap() != null)
        {
            node.getMap().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPanelConfig(node);
    }

    public void inAPanelClone(APanelClone node)
    {
        defaultIn(node);
    }

    public void outAPanelClone(APanelClone node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelClone(APanelClone node)
    {
        inAPanelClone(node);
        if(node.getPanelclone() != null)
        {
            node.getPanelclone().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getNewid() != null)
        {
            node.getNewid().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPanelClone(node);
    }

    public void inAPanelClose(APanelClose node)
    {
        defaultIn(node);
    }

    public void outAPanelClose(APanelClose node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPanelClose(APanelClose node)
    {
        inAPanelClose(node);
        if(node.getPanelclose() != null)
        {
            node.getPanelclose().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPanelClose(node);
    }

    public void inADataFrame(ADataFrame node)
    {
        defaultIn(node);
    }

    public void outADataFrame(ADataFrame node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataFrame(ADataFrame node)
    {
        inADataFrame(node);
        if(node.getDataframe() != null)
        {
            node.getDataframe().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getBuilder() != null)
        {
            node.getBuilder().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outADataFrame(node);
    }

    public void inAAddColumn(AAddColumn node)
    {
        defaultIn(node);
    }

    public void outAAddColumn(AAddColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddColumn(AAddColumn node)
    {
        inAAddColumn(node);
        if(node.getColadd() != null)
        {
            node.getColadd().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getNewcol() != null)
        {
            node.getNewcol().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAAddColumn(node);
    }

    public void inARemColumn(ARemColumn node)
    {
        defaultIn(node);
    }

    public void outARemColumn(ARemColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemColumn(ARemColumn node)
    {
        inARemColumn(node);
        if(node.getColremove() != null)
        {
            node.getColremove().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getNewcol() != null)
        {
            node.getNewcol().apply(this);
        }
        {
            List<PColGroup> copy = new ArrayList<PColGroup>(node.getColGroup());
            for(PColGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outARemColumn(node);
    }

    public void inASetColumn(ASetColumn node)
    {
        defaultIn(node);
    }

    public void outASetColumn(ASetColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetColumn(ASetColumn node)
    {
        inASetColumn(node);
        if(node.getColset() != null)
        {
            node.getColset().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getNewcol() != null)
        {
            node.getNewcol().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outASetColumn(node);
    }

    public void inAPivotColumn(APivotColumn node)
    {
        defaultIn(node);
    }

    public void outAPivotColumn(APivotColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPivotColumn(APivotColumn node)
    {
        inAPivotColumn(node);
        if(node.getColpivot() != null)
        {
            node.getColpivot().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFirstcol() != null)
        {
            node.getFirstcol().apply(this);
        }
        {
            List<PColGroup> copy = new ArrayList<PColGroup>(node.getColGroup());
            for(PColGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPivotColumn(node);
    }

    public void inAFilterColumn(AFilterColumn node)
    {
        defaultIn(node);
    }

    public void outAFilterColumn(AFilterColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilterColumn(AFilterColumn node)
    {
        inAFilterColumn(node);
        if(node.getColfilter() != null)
        {
            node.getColfilter().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhere() != null)
        {
            node.getWhere().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFilterColumn(node);
    }

    public void inAUnfilterColumn(AUnfilterColumn node)
    {
        defaultIn(node);
    }

    public void outAUnfilterColumn(AUnfilterColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnfilterColumn(AUnfilterColumn node)
    {
        inAUnfilterColumn(node);
        if(node.getColunfilter() != null)
        {
            node.getColunfilter().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAUnfilterColumn(node);
    }

    public void inAFocusColumn(AFocusColumn node)
    {
        defaultIn(node);
    }

    public void outAFocusColumn(AFocusColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFocusColumn(AFocusColumn node)
    {
        inAFocusColumn(node);
        if(node.getColfocus() != null)
        {
            node.getColfocus().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        {
            List<PColGroup> copy = new ArrayList<PColGroup>(node.getColGroup());
            for(PColGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getShowHide() != null)
        {
            node.getShowHide().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFocusColumn(node);
    }

    public void inAUnfocus(AUnfocus node)
    {
        defaultIn(node);
    }

    public void outAUnfocus(AUnfocus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnfocus(AUnfocus node)
    {
        inAUnfocus(node);
        if(node.getColfocus() != null)
        {
            node.getColfocus().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getShowHide() != null)
        {
            node.getShowHide().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAUnfocus(node);
    }

    public void inAImportColumn(AImportColumn node)
    {
        defaultIn(node);
    }

    public void outAImportColumn(AImportColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportColumn(AImportColumn node)
    {
        inAImportColumn(node);
        if(node.getColimport() != null)
        {
            node.getColimport().apply(this);
        }
        if(node.getLp1() != null)
        {
            node.getLp1().apply(this);
        }
        if(node.getCols() != null)
        {
            node.getCols().apply(this);
        }
        if(node.getRelations() != null)
        {
            node.getRelations().apply(this);
        }
        if(node.getRp2() != null)
        {
            node.getRp2().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getData() != null)
        {
            node.getData().apply(this);
        }
        outAImportColumn(node);
    }

    public void inAAliasColumn(AAliasColumn node)
    {
        defaultIn(node);
    }

    public void outAAliasColumn(AAliasColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAliasColumn(AAliasColumn node)
    {
        inAAliasColumn(node);
        if(node.getColalias() != null)
        {
            node.getColalias().apply(this);
        }
        if(node.getLp1() != null)
        {
            node.getLp1().apply(this);
        }
        if(node.getCols() != null)
        {
            node.getCols().apply(this);
        }
        if(node.getWhere() != null)
        {
            node.getWhere().apply(this);
        }
        if(node.getRp2() != null)
        {
            node.getRp2().apply(this);
        }
        outAAliasColumn(node);
    }

    public void inAImportData(AImportData node)
    {
        defaultIn(node);
    }

    public void outAImportData(AImportData node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportData(AImportData node)
    {
        inAImportData(node);
        if(node.getDataimporttoken() != null)
        {
            node.getDataimporttoken().apply(this);
        }
        if(node.getLp1() != null)
        {
            node.getLp1().apply(this);
        }
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        if(node.getJoins() != null)
        {
            node.getJoins().apply(this);
        }
        if(node.getRp2() != null)
        {
            node.getRp2().apply(this);
        }
        outAImportData(node);
    }

    public void inAOpenData(AOpenData node)
    {
        defaultIn(node);
    }

    public void outAOpenData(AOpenData node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenData(AOpenData node)
    {
        inAOpenData(node);
        if(node.getDataopentoken() != null)
        {
            node.getDataopentoken().apply(this);
        }
        if(node.getLp() != null)
        {
            node.getLp().apply(this);
        }
        if(node.getEngine() != null)
        {
            node.getEngine().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getEngineId() != null)
        {
            node.getEngineId().apply(this);
        }
        if(node.getRp() != null)
        {
            node.getRp().apply(this);
        }
        outAOpenData(node);
    }

    public void inAApiImportBlock(AApiImportBlock node)
    {
        defaultIn(node);
    }

    public void outAApiImportBlock(AApiImportBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAApiImportBlock(AApiImportBlock node)
    {
        inAApiImportBlock(node);
        if(node.getApiBlock() != null)
        {
            node.getApiBlock().apply(this);
        }
        outAApiImportBlock(node);
    }

    public void inACsvTableImportBlock(ACsvTableImportBlock node)
    {
        defaultIn(node);
    }

    public void outACsvTableImportBlock(ACsvTableImportBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACsvTableImportBlock(ACsvTableImportBlock node)
    {
        inACsvTableImportBlock(node);
        if(node.getCsvTable() != null)
        {
            node.getCsvTable().apply(this);
        }
        outACsvTableImportBlock(node);
    }

    public void inAPastedDataImportBlock(APastedDataImportBlock node)
    {
        defaultIn(node);
    }

    public void outAPastedDataImportBlock(APastedDataImportBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPastedDataImportBlock(APastedDataImportBlock node)
    {
        inAPastedDataImportBlock(node);
        if(node.getPastedDataBlock() != null)
        {
            node.getPastedDataBlock().apply(this);
        }
        outAPastedDataImportBlock(node);
    }

    public void inAPastedDataBlock(APastedDataBlock node)
    {
        defaultIn(node);
    }

    public void outAPastedDataBlock(APastedDataBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPastedDataBlock(APastedDataBlock node)
    {
        inAPastedDataBlock(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPastedData() != null)
        {
            node.getPastedData().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getDelimitier() != null)
        {
            node.getDelimitier().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPastedDataBlock(node);
    }

    public void inAPastedData(APastedData node)
    {
        defaultIn(node);
    }

    public void outAPastedData(APastedData node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPastedData(APastedData node)
    {
        inAPastedData(node);
        if(node.getFileText() != null)
        {
            node.getFileText().apply(this);
        }
        outAPastedData(node);
    }

    public void inARemoveData(ARemoveData node)
    {
        defaultIn(node);
    }

    public void outARemoveData(ARemoveData node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemoveData(ARemoveData node)
    {
        inARemoveData(node);
        if(node.getDataremovetoken() != null)
        {
            node.getDataremovetoken().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getApiBlock() != null)
        {
            node.getApiBlock().apply(this);
        }
        if(node.getRelationClause() != null)
        {
            node.getRelationClause().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outARemoveData(node);
    }

    public void inADecimal(ADecimal node)
    {
        defaultIn(node);
    }

    public void outADecimal(ADecimal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecimal(ADecimal node)
    {
        inADecimal(node);
        if(node.getWhole() != null)
        {
            node.getWhole().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getFraction() != null)
        {
            node.getFraction().apply(this);
        }
        outADecimal(node);
    }

    public void inAExprGroup(AExprGroup node)
    {
        defaultIn(node);
    }

    public void outAExprGroup(AExprGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprGroup(AExprGroup node)
    {
        inAExprGroup(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprGroup(node);
    }

    public void inAOutputInsight(AOutputInsight node)
    {
        defaultIn(node);
    }

    public void outAOutputInsight(AOutputInsight node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutputInsight(AOutputInsight node)
    {
        inAOutputInsight(node);
        if(node.getOutputToken() != null)
        {
            node.getOutputToken().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getEngineName() != null)
        {
            node.getEngineName().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getInsightId() != null)
        {
            node.getInsightId().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAOutputInsight(node);
    }

    public void inAApiBlock(AApiBlock node)
    {
        defaultIn(node);
    }

    public void outAApiBlock(AApiBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAApiBlock(AApiBlock node)
    {
        inAApiBlock(node);
        if(node.getApi() != null)
        {
            node.getApi().apply(this);
        }
        if(node.getEngineName() != null)
        {
            node.getEngineName().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getInsight() != null)
        {
            node.getInsight().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSelectors() != null)
        {
            node.getSelectors().apply(this);
        }
        if(node.getWhere() != null)
        {
            node.getWhere().apply(this);
        }
        if(node.getRelations() != null)
        {
            node.getRelations().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getProperties() != null)
        {
            node.getProperties().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAApiBlock(node);
    }

    public void inASelector(ASelector node)
    {
        defaultIn(node);
    }

    public void outASelector(ASelector node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelector(ASelector node)
    {
        inASelector(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getColCsv() != null)
        {
            node.getColCsv().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outASelector(node);
    }

    public void inAColWhere(AColWhere node)
    {
        defaultIn(node);
    }

    public void outAColWhere(AColWhere node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColWhere(AColWhere node)
    {
        inAColWhere(node);
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        if(node.getEqualOrCompare() != null)
        {
            node.getEqualOrCompare().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAColWhere(node);
    }

    public void inAColDefColDefOrCsvRow(AColDefColDefOrCsvRow node)
    {
        defaultIn(node);
    }

    public void outAColDefColDefOrCsvRow(AColDefColDefOrCsvRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColDefColDefOrCsvRow(AColDefColDefOrCsvRow node)
    {
        inAColDefColDefOrCsvRow(node);
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        outAColDefColDefOrCsvRow(node);
    }

    public void inACsvColDefOrCsvRow(ACsvColDefOrCsvRow node)
    {
        defaultIn(node);
    }

    public void outACsvColDefOrCsvRow(ACsvColDefOrCsvRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACsvColDefOrCsvRow(ACsvColDefOrCsvRow node)
    {
        inACsvColDefOrCsvRow(node);
        if(node.getCsvRow() != null)
        {
            node.getCsvRow().apply(this);
        }
        outACsvColDefOrCsvRow(node);
    }

    public void inAColWhereGroup(AColWhereGroup node)
    {
        defaultIn(node);
    }

    public void outAColWhereGroup(AColWhereGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColWhereGroup(AColWhereGroup node)
    {
        inAColWhereGroup(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getColWhere() != null)
        {
            node.getColWhere().apply(this);
        }
        outAColWhereGroup(node);
    }

    public void inAWhereClause(AWhereClause node)
    {
        defaultIn(node);
    }

    public void outAWhereClause(AWhereClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhereClause(AWhereClause node)
    {
        inAWhereClause(node);
        if(node.getColWhere() != null)
        {
            node.getColWhere().apply(this);
        }
        {
            List<PColWhereGroup> copy = new ArrayList<PColWhereGroup>(node.getColWhereGroup());
            for(PColWhereGroup e : copy)
            {
                e.apply(this);
            }
        }
        outAWhereClause(node);
    }

    public void inAWhereStatement(AWhereStatement node)
    {
        defaultIn(node);
    }

    public void outAWhereStatement(AWhereStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhereStatement(AWhereStatement node)
    {
        inAWhereStatement(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhereClause() != null)
        {
            node.getWhereClause().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAWhereStatement(node);
    }

    public void inARelationDef(ARelationDef node)
    {
        defaultIn(node);
    }

    public void outARelationDef(ARelationDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationDef(ARelationDef node)
    {
        inARelationDef(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getCom1() != null)
        {
            node.getCom1().apply(this);
        }
        if(node.getRelType() != null)
        {
            node.getRelType().apply(this);
        }
        if(node.getCom2() != null)
        {
            node.getCom2().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outARelationDef(node);
    }

    public void inARelationGroup(ARelationGroup node)
    {
        defaultIn(node);
    }

    public void outARelationGroup(ARelationGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationGroup(ARelationGroup node)
    {
        inARelationGroup(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getRelationDef() != null)
        {
            node.getRelationDef().apply(this);
        }
        outARelationGroup(node);
    }

    public void inARelationClause(ARelationClause node)
    {
        defaultIn(node);
    }

    public void outARelationClause(ARelationClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationClause(ARelationClause node)
    {
        inARelationClause(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRelationDef() != null)
        {
            node.getRelationDef().apply(this);
        }
        {
            List<PRelationGroup> copy = new ArrayList<PRelationGroup>(node.getRelationGroup());
            for(PRelationGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outARelationClause(node);
    }

    public void inAIfBlock(AIfBlock node)
    {
        defaultIn(node);
    }

    public void outAIfBlock(AIfBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfBlock(AIfBlock node)
    {
        inAIfBlock(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getEqualOrCompare() != null)
        {
            node.getEqualOrCompare().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAIfBlock(node);
    }

    public void inAColGroup(AColGroup node)
    {
        defaultIn(node);
    }

    public void outAColGroup(AColGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColGroup(AColGroup node)
    {
        inAColGroup(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        outAColGroup(node);
    }

    public void inAKeyvalue(AKeyvalue node)
    {
        defaultIn(node);
    }

    public void outAKeyvalue(AKeyvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeyvalue(AKeyvalue node)
    {
        inAKeyvalue(node);
        if(node.getWord1() != null)
        {
            node.getWord1().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getWord2() != null)
        {
            node.getWord2().apply(this);
        }
        outAKeyvalue(node);
    }

    public void inAKeyvalueGroup(AKeyvalueGroup node)
    {
        defaultIn(node);
    }

    public void outAKeyvalueGroup(AKeyvalueGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeyvalueGroup(AKeyvalueGroup node)
    {
        inAKeyvalueGroup(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getKeyvalue() != null)
        {
            node.getKeyvalue().apply(this);
        }
        outAKeyvalueGroup(node);
    }

    public void inAMapObj(AMapObj node)
    {
        defaultIn(node);
    }

    public void outAMapObj(AMapObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMapObj(AMapObj node)
    {
        inAMapObj(node);
        if(node.getLCurlBracket() != null)
        {
            node.getLCurlBracket().apply(this);
        }
        if(node.getKeyvalue() != null)
        {
            node.getKeyvalue().apply(this);
        }
        {
            List<PKeyvalueGroup> copy = new ArrayList<PKeyvalueGroup>(node.getKeyvalueGroup());
            for(PKeyvalueGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRCurlBracket() != null)
        {
            node.getRCurlBracket().apply(this);
        }
        outAMapObj(node);
    }

    public void inAGroupBy(AGroupBy node)
    {
        defaultIn(node);
    }

    public void outAGroupBy(AGroupBy node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGroupBy(AGroupBy node)
    {
        inAGroupBy(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        {
            List<PColGroup> copy = new ArrayList<PColGroup>(node.getColGroup());
            for(PColGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAGroupBy(node);
    }

    public void inAColDef(AColDef node)
    {
        defaultIn(node);
    }

    public void outAColDef(AColDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColDef(AColDef node)
    {
        inAColDef(node);
        if(node.getColprefix() != null)
        {
            node.getColprefix().apply(this);
        }
        if(node.getColname() != null)
        {
            node.getColname().apply(this);
        }
        outAColDef(node);
    }

    public void inATableDef(ATableDef node)
    {
        defaultIn(node);
    }

    public void outATableDef(ATableDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATableDef(ATableDef node)
    {
        inATableDef(node);
        if(node.getTablePrefix() != null)
        {
            node.getTablePrefix().apply(this);
        }
        if(node.getCardinality() != null)
        {
            node.getCardinality().apply(this);
        }
        outATableDef(node);
    }

    public void inAVarop(AVarop node)
    {
        defaultIn(node);
    }

    public void outAVarop(AVarop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarop(AVarop node)
    {
        inAVarop(node);
        if(node.getValprefix() != null)
        {
            node.getValprefix().apply(this);
        }
        if(node.getValname() != null)
        {
            node.getValname().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getInputOrExpr() != null)
        {
            node.getInputOrExpr().apply(this);
        }
        outAVarop(node);
    }

    public void inACsvRow(ACsvRow node)
    {
        defaultIn(node);
    }

    public void outACsvRow(ACsvRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACsvRow(ACsvRow node)
    {
        inACsvRow(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getWordOrNum() != null)
        {
            node.getWordOrNum().apply(this);
        }
        {
            List<PCsvGroup> copy = new ArrayList<PCsvGroup>(node.getCsvGroup());
            for(PCsvGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outACsvRow(node);
    }

    public void inAEasyRow(AEasyRow node)
    {
        defaultIn(node);
    }

    public void outAEasyRow(AEasyRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEasyRow(AEasyRow node)
    {
        inAEasyRow(node);
        if(node.getWordOrNum() != null)
        {
            node.getWordOrNum().apply(this);
        }
        {
            List<PEasyGroup> copy = new ArrayList<PEasyGroup>(node.getEasyGroup());
            for(PEasyGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        outAEasyRow(node);
    }

    public void inAEasyGroup(AEasyGroup node)
    {
        defaultIn(node);
    }

    public void outAEasyGroup(AEasyGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEasyGroup(AEasyGroup node)
    {
        inAEasyGroup(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getWordOrNum() != null)
        {
            node.getWordOrNum().apply(this);
        }
        outAEasyGroup(node);
    }

    public void inACsvTable(ACsvTable node)
    {
        defaultIn(node);
    }

    public void outACsvTable(ACsvTable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACsvTable(ACsvTable node)
    {
        inACsvTable(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        {
            List<PCsvRow> copy = new ArrayList<PCsvRow>(node.getCsvRow());
            for(PCsvRow e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outACsvTable(node);
    }

    public void inAColCsv(AColCsv node)
    {
        defaultIn(node);
    }

    public void outAColCsv(AColCsv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColCsv(AColCsv node)
    {
        inAColCsv(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        {
            List<PColGroup> copy = new ArrayList<PColGroup>(node.getColGroup());
            for(PColGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAColCsv(node);
    }

    public void inANumWordOrNum(ANumWordOrNum node)
    {
        defaultIn(node);
    }

    public void outANumWordOrNum(ANumWordOrNum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumWordOrNum(ANumWordOrNum node)
    {
        inANumWordOrNum(node);
        if(node.getDecimal() != null)
        {
            node.getDecimal().apply(this);
        }
        outANumWordOrNum(node);
    }

    public void inAAlphaWordOrNum(AAlphaWordOrNum node)
    {
        defaultIn(node);
    }

    public void outAAlphaWordOrNum(AAlphaWordOrNum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAlphaWordOrNum(AAlphaWordOrNum node)
    {
        inAAlphaWordOrNum(node);
        if(node.getWord() != null)
        {
            node.getWord().apply(this);
        }
        outAAlphaWordOrNum(node);
    }

    public void inAExprWordOrNum(AExprWordOrNum node)
    {
        defaultIn(node);
    }

    public void outAExprWordOrNum(AExprWordOrNum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprWordOrNum(AExprWordOrNum node)
    {
        inAExprWordOrNum(node);
        if(node.getFormula() != null)
        {
            node.getFormula().apply(this);
        }
        outAExprWordOrNum(node);
    }

    public void inAWordOrNumWordOrNumOrNestedObj(AWordOrNumWordOrNumOrNestedObj node)
    {
        defaultIn(node);
    }

    public void outAWordOrNumWordOrNumOrNestedObj(AWordOrNumWordOrNumOrNestedObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWordOrNumWordOrNumOrNestedObj(AWordOrNumWordOrNumOrNestedObj node)
    {
        inAWordOrNumWordOrNumOrNestedObj(node);
        if(node.getWordOrNum() != null)
        {
            node.getWordOrNum().apply(this);
        }
        outAWordOrNumWordOrNumOrNestedObj(node);
    }

    public void inANestedMapWordOrNumOrNestedObj(ANestedMapWordOrNumOrNestedObj node)
    {
        defaultIn(node);
    }

    public void outANestedMapWordOrNumOrNestedObj(ANestedMapWordOrNumOrNestedObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedMapWordOrNumOrNestedObj(ANestedMapWordOrNumOrNestedObj node)
    {
        inANestedMapWordOrNumOrNestedObj(node);
        if(node.getMapObj() != null)
        {
            node.getMapObj().apply(this);
        }
        outANestedMapWordOrNumOrNestedObj(node);
    }

    public void inANestedCsvWordOrNumOrNestedObj(ANestedCsvWordOrNumOrNestedObj node)
    {
        defaultIn(node);
    }

    public void outANestedCsvWordOrNumOrNestedObj(ANestedCsvWordOrNumOrNestedObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedCsvWordOrNumOrNestedObj(ANestedCsvWordOrNumOrNestedObj node)
    {
        inANestedCsvWordOrNumOrNestedObj(node);
        if(node.getCsvRow() != null)
        {
            node.getCsvRow().apply(this);
        }
        outANestedCsvWordOrNumOrNestedObj(node);
    }

    public void inAFlexSelectorRow(AFlexSelectorRow node)
    {
        defaultIn(node);
    }

    public void outAFlexSelectorRow(AFlexSelectorRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFlexSelectorRow(AFlexSelectorRow node)
    {
        inAFlexSelectorRow(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        {
            List<PTermGroup> copy = new ArrayList<PTermGroup>(node.getTermGroup());
            for(PTermGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAFlexSelectorRow(node);
    }

    public void inATermGroup(ATermGroup node)
    {
        defaultIn(node);
    }

    public void outATermGroup(ATermGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermGroup(ATermGroup node)
    {
        inATermGroup(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermGroup(node);
    }

    public void inAFormula(AFormula node)
    {
        defaultIn(node);
    }

    public void outAFormula(AFormula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormula(AFormula node)
    {
        inAFormula(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFormula(node);
    }

    public void inACsvGroup(ACsvGroup node)
    {
        defaultIn(node);
    }

    public void outACsvGroup(ACsvGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACsvGroup(ACsvGroup node)
    {
        inACsvGroup(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getCsv() != null)
        {
            node.getCsv().apply(this);
        }
        outACsvGroup(node);
    }

    public void inAExprRow(AExprRow node)
    {
        defaultIn(node);
    }

    public void outAExprRow(AExprRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprRow(AExprRow node)
    {
        inAExprRow(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<PExprGroup> copy = new ArrayList<PExprGroup>(node.getExprGroup());
            for(PExprGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAExprRow(node);
    }

    public void inADashboardJoin(ADashboardJoin node)
    {
        defaultIn(node);
    }

    public void outADashboardJoin(ADashboardJoin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADashboardJoin(ADashboardJoin node)
    {
        inADashboardJoin(node);
        if(node.getJoin() != null)
        {
            node.getJoin().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getInsight1() != null)
        {
            node.getInsight1().apply(this);
        }
        if(node.getCom1() != null)
        {
            node.getCom1().apply(this);
        }
        if(node.getInsight2() != null)
        {
            node.getInsight2().apply(this);
        }
        if(node.getCom2() != null)
        {
            node.getCom2().apply(this);
        }
        if(node.getInsight1Col() != null)
        {
            node.getInsight1Col().apply(this);
        }
        if(node.getCom3() != null)
        {
            node.getCom3().apply(this);
        }
        if(node.getInsight2Col() != null)
        {
            node.getInsight2Col().apply(this);
        }
        if(node.getCom4() != null)
        {
            node.getCom4().apply(this);
        }
        if(node.getRel() != null)
        {
            node.getRel().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outADashboardJoin(node);
    }

    public void inAJOp(AJOp node)
    {
        defaultIn(node);
    }

    public void outAJOp(AJOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJOp(AJOp node)
    {
        inAJOp(node);
        if(node.getJava() != null)
        {
            node.getJava().apply(this);
        }
        if(node.getCodeblock() != null)
        {
            node.getCodeblock().apply(this);
        }
        outAJOp(node);
    }

    public void inAHelp(AHelp node)
    {
        defaultIn(node);
    }

    public void outAHelp(AHelp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHelp(AHelp node)
    {
        inAHelp(node);
        if(node.getHelpToken() != null)
        {
            node.getHelpToken().apply(this);
        }
        outAHelp(node);
    }

    public void inAComparatorEqualOrCompare(AComparatorEqualOrCompare node)
    {
        defaultIn(node);
    }

    public void outAComparatorEqualOrCompare(AComparatorEqualOrCompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparatorEqualOrCompare(AComparatorEqualOrCompare node)
    {
        inAComparatorEqualOrCompare(node);
        if(node.getComparator() != null)
        {
            node.getComparator().apply(this);
        }
        outAComparatorEqualOrCompare(node);
    }

    public void inAEqualEqualOrCompare(AEqualEqualOrCompare node)
    {
        defaultIn(node);
    }

    public void outAEqualEqualOrCompare(AEqualEqualOrCompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualEqualOrCompare(AEqualEqualOrCompare node)
    {
        inAEqualEqualOrCompare(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualEqualOrCompare(node);
    }

    public void inAUserInput(AUserInput node)
    {
        defaultIn(node);
    }

    public void outAUserInput(AUserInput node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUserInput(AUserInput node)
    {
        inAUserInput(node);
        if(node.getUserinput() != null)
        {
            node.getUserinput().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getOptions() != null)
        {
            node.getOptions().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getSelections() != null)
        {
            node.getSelections().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAUserInput(node);
    }

    public void inAExprInputOrExpr(AExprInputOrExpr node)
    {
        defaultIn(node);
    }

    public void outAExprInputOrExpr(AExprInputOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprInputOrExpr(AExprInputOrExpr node)
    {
        inAExprInputOrExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprInputOrExpr(node);
    }

    public void inAInputInputOrExpr(AInputInputOrExpr node)
    {
        defaultIn(node);
    }

    public void outAInputInputOrExpr(AInputInputOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInputInputOrExpr(AInputInputOrExpr node)
    {
        inAInputInputOrExpr(node);
        if(node.getUserInput() != null)
        {
            node.getUserInput().apply(this);
        }
        outAInputInputOrExpr(node);
    }

    public void inATermExpr(ATermExpr node)
    {
        defaultIn(node);
    }

    public void outATermExpr(ATermExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpr(ATermExpr node)
    {
        inATermExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpr(node);
    }

    public void inAPlusExpr(APlusExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusExpr(APlusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpr(APlusExpr node)
    {
        inAPlusExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAPlusExpr(node);
    }

    public void inAMinusExpr(AMinusExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusExpr(AMinusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpr(AMinusExpr node)
    {
        inAMinusExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMinusExpr(node);
    }

    public void inAMultExpr(AMultExpr node)
    {
        defaultIn(node);
    }

    public void outAMultExpr(AMultExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpr(AMultExpr node)
    {
        inAMultExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMultExpr(node);
    }

    public void inAExpr(AExpr node)
    {
        defaultIn(node);
    }

    public void outAExpr(AExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr(AExpr node)
    {
        inAExpr(node);
        outAExpr(node);
    }

    public void inADivExpr(ADivExpr node)
    {
        defaultIn(node);
    }

    public void outADivExpr(ADivExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpr(ADivExpr node)
    {
        inADivExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivExpr(node);
    }

    public void inAModExpr(AModExpr node)
    {
        defaultIn(node);
    }

    public void outAModExpr(AModExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExpr(AModExpr node)
    {
        inAModExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAModExpr(node);
    }

    public void inAEExprExpr(AEExprExpr node)
    {
        defaultIn(node);
    }

    public void outAEExprExpr(AEExprExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExprExpr(AEExprExpr node)
    {
        inAEExprExpr(node);
        if(node.getExtendedExpr() != null)
        {
            node.getExtendedExpr().apply(this);
        }
        outAEExprExpr(node);
    }

    public void inAMathFun(AMathFun node)
    {
        defaultIn(node);
    }

    public void outAMathFun(AMathFun node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMathFun(AMathFun node)
    {
        inAMathFun(node);
        if(node.getProc() != null)
        {
            node.getProc().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getGroup() != null)
        {
            node.getGroup().apply(this);
        }
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMathFun(node);
    }

    public void inAMathParam(AMathParam node)
    {
        defaultIn(node);
    }

    public void outAMathParam(AMathParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMathParam(AMathParam node)
    {
        inAMathParam(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getMapObj() != null)
        {
            node.getMapObj().apply(this);
        }
        outAMathParam(node);
    }

    public void inAExtendedExpr(AExtendedExpr node)
    {
        defaultIn(node);
    }

    public void outAExtendedExpr(AExtendedExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendedExpr(AExtendedExpr node)
    {
        inAExtendedExpr(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getGroup() != null)
        {
            node.getGroup().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAExtendedExpr(node);
    }

    public void inANumberTerm(ANumberTerm node)
    {
        defaultIn(node);
    }

    public void outANumberTerm(ANumberTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        inANumberTerm(node);
        if(node.getDecimal() != null)
        {
            node.getDecimal().apply(this);
        }
        outANumberTerm(node);
    }

    public void inAExprTerm(AExprTerm node)
    {
        defaultIn(node);
    }

    public void outAExprTerm(AExprTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprTerm(AExprTerm node)
    {
        inAExprTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAExprTerm(node);
    }

    public void inAVarTerm(AVarTerm node)
    {
        defaultIn(node);
    }

    public void outAVarTerm(AVarTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        inAVarTerm(node);
        if(node.getValprefix() != null)
        {
            node.getValprefix().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarTerm(node);
    }

    public void inAColTerm(AColTerm node)
    {
        defaultIn(node);
    }

    public void outAColTerm(AColTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColTerm(AColTerm node)
    {
        inAColTerm(node);
        if(node.getCol() != null)
        {
            node.getCol().apply(this);
        }
        outAColTerm(node);
    }

    public void inAApiTerm(AApiTerm node)
    {
        defaultIn(node);
    }

    public void outAApiTerm(AApiTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAApiTerm(AApiTerm node)
    {
        inAApiTerm(node);
        if(node.getApiBlock() != null)
        {
            node.getApiBlock().apply(this);
        }
        outAApiTerm(node);
    }

    public void inATabTerm(ATabTerm node)
    {
        defaultIn(node);
    }

    public void outATabTerm(ATabTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATabTerm(ATabTerm node)
    {
        inATabTerm(node);
        if(node.getTab() != null)
        {
            node.getTab().apply(this);
        }
        outATabTerm(node);
    }

    public void inAWcsvTerm(AWcsvTerm node)
    {
        defaultIn(node);
    }

    public void outAWcsvTerm(AWcsvTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWcsvTerm(AWcsvTerm node)
    {
        inAWcsvTerm(node);
        if(node.getCsvRow() != null)
        {
            node.getCsvRow().apply(this);
        }
        outAWcsvTerm(node);
    }

    public void inATerm(ATerm node)
    {
        defaultIn(node);
    }

    public void outATerm(ATerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATerm(ATerm node)
    {
        inATerm(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outATerm(node);
    }

    public void inAAlphaTerm(AAlphaTerm node)
    {
        defaultIn(node);
    }

    public void outAAlphaTerm(AAlphaTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAlphaTerm(AAlphaTerm node)
    {
        inAAlphaTerm(node);
        if(node.getWord() != null)
        {
            node.getWord().apply(this);
        }
        outAAlphaTerm(node);
    }

    public void inAMathFunTerm(AMathFunTerm node)
    {
        defaultIn(node);
    }

    public void outAMathFunTerm(AMathFunTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMathFunTerm(AMathFunTerm node)
    {
        inAMathFunTerm(node);
        if(node.getMathFun() != null)
        {
            node.getMathFun().apply(this);
        }
        outAMathFunTerm(node);
    }

    public void inACodeblockTerm(ACodeblockTerm node)
    {
        defaultIn(node);
    }

    public void outACodeblockTerm(ACodeblockTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACodeblockTerm(ACodeblockTerm node)
    {
        inACodeblockTerm(node);
        if(node.getCodeblock() != null)
        {
            node.getCodeblock().apply(this);
        }
        outACodeblockTerm(node);
    }
}
