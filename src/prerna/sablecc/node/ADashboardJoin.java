/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ADashboardJoin extends PDashboardJoin
{
    private TJoin _join_;
    private TLPar _lPar_;
    private PWordOrNum _insight1_;
    private TComma _com1_;
    private PWordOrNum _insight2_;
    private TComma _com2_;
    private PColDef _insight1Col_;
    private TComma _com3_;
    private PColDef _insight2Col_;
    private TComma _com4_;
    private TRelType _rel_;
    private TRPar _rPar_;

    public ADashboardJoin()
    {
        // Constructor
    }

    public ADashboardJoin(
        @SuppressWarnings("hiding") TJoin _join_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PWordOrNum _insight1_,
        @SuppressWarnings("hiding") TComma _com1_,
        @SuppressWarnings("hiding") PWordOrNum _insight2_,
        @SuppressWarnings("hiding") TComma _com2_,
        @SuppressWarnings("hiding") PColDef _insight1Col_,
        @SuppressWarnings("hiding") TComma _com3_,
        @SuppressWarnings("hiding") PColDef _insight2Col_,
        @SuppressWarnings("hiding") TComma _com4_,
        @SuppressWarnings("hiding") TRelType _rel_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setJoin(_join_);

        setLPar(_lPar_);

        setInsight1(_insight1_);

        setCom1(_com1_);

        setInsight2(_insight2_);

        setCom2(_com2_);

        setInsight1Col(_insight1Col_);

        setCom3(_com3_);

        setInsight2Col(_insight2Col_);

        setCom4(_com4_);

        setRel(_rel_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new ADashboardJoin(
            cloneNode(this._join_),
            cloneNode(this._lPar_),
            cloneNode(this._insight1_),
            cloneNode(this._com1_),
            cloneNode(this._insight2_),
            cloneNode(this._com2_),
            cloneNode(this._insight1Col_),
            cloneNode(this._com3_),
            cloneNode(this._insight2Col_),
            cloneNode(this._com4_),
            cloneNode(this._rel_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADashboardJoin(this);
    }

    public TJoin getJoin()
    {
        return this._join_;
    }

    public void setJoin(TJoin node)
    {
        if(this._join_ != null)
        {
            this._join_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._join_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PWordOrNum getInsight1()
    {
        return this._insight1_;
    }

    public void setInsight1(PWordOrNum node)
    {
        if(this._insight1_ != null)
        {
            this._insight1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._insight1_ = node;
    }

    public TComma getCom1()
    {
        return this._com1_;
    }

    public void setCom1(TComma node)
    {
        if(this._com1_ != null)
        {
            this._com1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._com1_ = node;
    }

    public PWordOrNum getInsight2()
    {
        return this._insight2_;
    }

    public void setInsight2(PWordOrNum node)
    {
        if(this._insight2_ != null)
        {
            this._insight2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._insight2_ = node;
    }

    public TComma getCom2()
    {
        return this._com2_;
    }

    public void setCom2(TComma node)
    {
        if(this._com2_ != null)
        {
            this._com2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._com2_ = node;
    }

    public PColDef getInsight1Col()
    {
        return this._insight1Col_;
    }

    public void setInsight1Col(PColDef node)
    {
        if(this._insight1Col_ != null)
        {
            this._insight1Col_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._insight1Col_ = node;
    }

    public TComma getCom3()
    {
        return this._com3_;
    }

    public void setCom3(TComma node)
    {
        if(this._com3_ != null)
        {
            this._com3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._com3_ = node;
    }

    public PColDef getInsight2Col()
    {
        return this._insight2Col_;
    }

    public void setInsight2Col(PColDef node)
    {
        if(this._insight2Col_ != null)
        {
            this._insight2Col_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._insight2Col_ = node;
    }

    public TComma getCom4()
    {
        return this._com4_;
    }

    public void setCom4(TComma node)
    {
        if(this._com4_ != null)
        {
            this._com4_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._com4_ = node;
    }

    public TRelType getRel()
    {
        return this._rel_;
    }

    public void setRel(TRelType node)
    {
        if(this._rel_ != null)
        {
            this._rel_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rel_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._join_)
            + toString(this._lPar_)
            + toString(this._insight1_)
            + toString(this._com1_)
            + toString(this._insight2_)
            + toString(this._com2_)
            + toString(this._insight1Col_)
            + toString(this._com3_)
            + toString(this._insight2Col_)
            + toString(this._com4_)
            + toString(this._rel_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._join_ == child)
        {
            this._join_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._insight1_ == child)
        {
            this._insight1_ = null;
            return;
        }

        if(this._com1_ == child)
        {
            this._com1_ = null;
            return;
        }

        if(this._insight2_ == child)
        {
            this._insight2_ = null;
            return;
        }

        if(this._com2_ == child)
        {
            this._com2_ = null;
            return;
        }

        if(this._insight1Col_ == child)
        {
            this._insight1Col_ = null;
            return;
        }

        if(this._com3_ == child)
        {
            this._com3_ = null;
            return;
        }

        if(this._insight2Col_ == child)
        {
            this._insight2Col_ = null;
            return;
        }

        if(this._com4_ == child)
        {
            this._com4_ = null;
            return;
        }

        if(this._rel_ == child)
        {
            this._rel_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._join_ == oldChild)
        {
            setJoin((TJoin) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._insight1_ == oldChild)
        {
            setInsight1((PWordOrNum) newChild);
            return;
        }

        if(this._com1_ == oldChild)
        {
            setCom1((TComma) newChild);
            return;
        }

        if(this._insight2_ == oldChild)
        {
            setInsight2((PWordOrNum) newChild);
            return;
        }

        if(this._com2_ == oldChild)
        {
            setCom2((TComma) newChild);
            return;
        }

        if(this._insight1Col_ == oldChild)
        {
            setInsight1Col((PColDef) newChild);
            return;
        }

        if(this._com3_ == oldChild)
        {
            setCom3((TComma) newChild);
            return;
        }

        if(this._insight2Col_ == oldChild)
        {
            setInsight2Col((PColDef) newChild);
            return;
        }

        if(this._com4_ == oldChild)
        {
            setCom4((TComma) newChild);
            return;
        }

        if(this._rel_ == oldChild)
        {
            setRel((TRelType) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
