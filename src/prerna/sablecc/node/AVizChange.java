/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AVizChange extends PVizChange
{
    private TVizchange _vizchange_;
    private TLPar _lPar_;
    private TId _layout_;
    private TComma _comma_;
    private PMapObj _datatablealign_;
    private TRPar _rPar_;

    public AVizChange()
    {
        // Constructor
    }

    public AVizChange(
        @SuppressWarnings("hiding") TVizchange _vizchange_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") TId _layout_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PMapObj _datatablealign_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setVizchange(_vizchange_);

        setLPar(_lPar_);

        setLayout(_layout_);

        setComma(_comma_);

        setDatatablealign(_datatablealign_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new AVizChange(
            cloneNode(this._vizchange_),
            cloneNode(this._lPar_),
            cloneNode(this._layout_),
            cloneNode(this._comma_),
            cloneNode(this._datatablealign_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVizChange(this);
    }

    public TVizchange getVizchange()
    {
        return this._vizchange_;
    }

    public void setVizchange(TVizchange node)
    {
        if(this._vizchange_ != null)
        {
            this._vizchange_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._vizchange_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public TId getLayout()
    {
        return this._layout_;
    }

    public void setLayout(TId node)
    {
        if(this._layout_ != null)
        {
            this._layout_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._layout_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PMapObj getDatatablealign()
    {
        return this._datatablealign_;
    }

    public void setDatatablealign(PMapObj node)
    {
        if(this._datatablealign_ != null)
        {
            this._datatablealign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._datatablealign_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._vizchange_)
            + toString(this._lPar_)
            + toString(this._layout_)
            + toString(this._comma_)
            + toString(this._datatablealign_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._vizchange_ == child)
        {
            this._vizchange_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._layout_ == child)
        {
            this._layout_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._datatablealign_ == child)
        {
            this._datatablealign_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._vizchange_ == oldChild)
        {
            setVizchange((TVizchange) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._layout_ == oldChild)
        {
            setLayout((TId) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._datatablealign_ == oldChild)
        {
            setDatatablealign((PMapObj) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
