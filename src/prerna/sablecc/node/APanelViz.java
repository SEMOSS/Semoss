/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class APanelViz extends PPanelViz
{
    private TPanelviz _panelviz_;
    private TLPar _lPar_;
    private TId _layout_;
    private TComma _c1_;
    private PFlexSelectorRow _datatablealign_;
    private TComma _c2_;
    private PMapObj _uioptions_;
    private TRPar _rPar_;

    public APanelViz()
    {
        // Constructor
    }

    public APanelViz(
        @SuppressWarnings("hiding") TPanelviz _panelviz_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") TId _layout_,
        @SuppressWarnings("hiding") TComma _c1_,
        @SuppressWarnings("hiding") PFlexSelectorRow _datatablealign_,
        @SuppressWarnings("hiding") TComma _c2_,
        @SuppressWarnings("hiding") PMapObj _uioptions_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setPanelviz(_panelviz_);

        setLPar(_lPar_);

        setLayout(_layout_);

        setC1(_c1_);

        setDatatablealign(_datatablealign_);

        setC2(_c2_);

        setUioptions(_uioptions_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new APanelViz(
            cloneNode(this._panelviz_),
            cloneNode(this._lPar_),
            cloneNode(this._layout_),
            cloneNode(this._c1_),
            cloneNode(this._datatablealign_),
            cloneNode(this._c2_),
            cloneNode(this._uioptions_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPanelViz(this);
    }

    public TPanelviz getPanelviz()
    {
        return this._panelviz_;
    }

    public void setPanelviz(TPanelviz node)
    {
        if(this._panelviz_ != null)
        {
            this._panelviz_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._panelviz_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public TId getLayout()
    {
        return this._layout_;
    }

    public void setLayout(TId node)
    {
        if(this._layout_ != null)
        {
            this._layout_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._layout_ = node;
    }

    public TComma getC1()
    {
        return this._c1_;
    }

    public void setC1(TComma node)
    {
        if(this._c1_ != null)
        {
            this._c1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c1_ = node;
    }

    public PFlexSelectorRow getDatatablealign()
    {
        return this._datatablealign_;
    }

    public void setDatatablealign(PFlexSelectorRow node)
    {
        if(this._datatablealign_ != null)
        {
            this._datatablealign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._datatablealign_ = node;
    }

    public TComma getC2()
    {
        return this._c2_;
    }

    public void setC2(TComma node)
    {
        if(this._c2_ != null)
        {
            this._c2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c2_ = node;
    }

    public PMapObj getUioptions()
    {
        return this._uioptions_;
    }

    public void setUioptions(PMapObj node)
    {
        if(this._uioptions_ != null)
        {
            this._uioptions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._uioptions_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._panelviz_)
            + toString(this._lPar_)
            + toString(this._layout_)
            + toString(this._c1_)
            + toString(this._datatablealign_)
            + toString(this._c2_)
            + toString(this._uioptions_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._panelviz_ == child)
        {
            this._panelviz_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._layout_ == child)
        {
            this._layout_ = null;
            return;
        }

        if(this._c1_ == child)
        {
            this._c1_ = null;
            return;
        }

        if(this._datatablealign_ == child)
        {
            this._datatablealign_ = null;
            return;
        }

        if(this._c2_ == child)
        {
            this._c2_ = null;
            return;
        }

        if(this._uioptions_ == child)
        {
            this._uioptions_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._panelviz_ == oldChild)
        {
            setPanelviz((TPanelviz) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._layout_ == oldChild)
        {
            setLayout((TId) newChild);
            return;
        }

        if(this._c1_ == oldChild)
        {
            setC1((TComma) newChild);
            return;
        }

        if(this._datatablealign_ == oldChild)
        {
            setDatatablealign((PFlexSelectorRow) newChild);
            return;
        }

        if(this._c2_ == oldChild)
        {
            setC2((TComma) newChild);
            return;
        }

        if(this._uioptions_ == oldChild)
        {
            setUioptions((PMapObj) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
