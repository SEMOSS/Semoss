/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.Analysis;

@SuppressWarnings("nls")
public final class AQueryData extends PQueryData
{
    private TDataquerytoken _dataquerytoken_;
    private TLPar _lp1_;
    private PImportBlock _import_;
    private PRelationClause _joins_;
    private TRPar _rp2_;

    public AQueryData()
    {
        // Constructor
    }

    public AQueryData(
        @SuppressWarnings("hiding") TDataquerytoken _dataquerytoken_,
        @SuppressWarnings("hiding") TLPar _lp1_,
        @SuppressWarnings("hiding") PImportBlock _import_,
        @SuppressWarnings("hiding") PRelationClause _joins_,
        @SuppressWarnings("hiding") TRPar _rp2_)
    {
        // Constructor
        setDataquerytoken(_dataquerytoken_);

        setLp1(_lp1_);

        setImport(_import_);

        setJoins(_joins_);

        setRp2(_rp2_);

    }

    @Override
    public Object clone()
    {
        return new AQueryData(
            cloneNode(this._dataquerytoken_),
            cloneNode(this._lp1_),
            cloneNode(this._import_),
            cloneNode(this._joins_),
            cloneNode(this._rp2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAQueryData(this);
    }

    public TDataquerytoken getDataquerytoken()
    {
        return this._dataquerytoken_;
    }

    public void setDataquerytoken(TDataquerytoken node)
    {
        if(this._dataquerytoken_ != null)
        {
            this._dataquerytoken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dataquerytoken_ = node;
    }

    public TLPar getLp1()
    {
        return this._lp1_;
    }

    public void setLp1(TLPar node)
    {
        if(this._lp1_ != null)
        {
            this._lp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lp1_ = node;
    }

    public PImportBlock getImport()
    {
        return this._import_;
    }

    public void setImport(PImportBlock node)
    {
        if(this._import_ != null)
        {
            this._import_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._import_ = node;
    }

    public PRelationClause getJoins()
    {
        return this._joins_;
    }

    public void setJoins(PRelationClause node)
    {
        if(this._joins_ != null)
        {
            this._joins_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._joins_ = node;
    }

    public TRPar getRp2()
    {
        return this._rp2_;
    }

    public void setRp2(TRPar node)
    {
        if(this._rp2_ != null)
        {
            this._rp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rp2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dataquerytoken_)
            + toString(this._lp1_)
            + toString(this._import_)
            + toString(this._joins_)
            + toString(this._rp2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dataquerytoken_ == child)
        {
            this._dataquerytoken_ = null;
            return;
        }

        if(this._lp1_ == child)
        {
            this._lp1_ = null;
            return;
        }

        if(this._import_ == child)
        {
            this._import_ = null;
            return;
        }

        if(this._joins_ == child)
        {
            this._joins_ = null;
            return;
        }

        if(this._rp2_ == child)
        {
            this._rp2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dataquerytoken_ == oldChild)
        {
            setDataquerytoken((TDataquerytoken) newChild);
            return;
        }

        if(this._lp1_ == oldChild)
        {
            setLp1((TLPar) newChild);
            return;
        }

        if(this._import_ == oldChild)
        {
            setImport((PImportBlock) newChild);
            return;
        }

        if(this._joins_ == oldChild)
        {
            setJoins((PRelationClause) newChild);
            return;
        }

        if(this._rp2_ == oldChild)
        {
            setRp2((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
