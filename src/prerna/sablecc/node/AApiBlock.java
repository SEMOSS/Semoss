/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import java.util.*;
import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AApiBlock extends PApiBlock
{
    private TApi _api_;
    private TId _engineName_;
    private TDot _dot_;
    private TId _insight_;
    private TLPar _lPar_;
    private PColDef _input_;
    private final LinkedList<PColGroup> _otherInput_ = new LinkedList<PColGroup>();
    private TRPar _rPar_;

    public AApiBlock()
    {
        // Constructor
    }

    public AApiBlock(
        @SuppressWarnings("hiding") TApi _api_,
        @SuppressWarnings("hiding") TId _engineName_,
        @SuppressWarnings("hiding") TDot _dot_,
        @SuppressWarnings("hiding") TId _insight_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PColDef _input_,
        @SuppressWarnings("hiding") List<?> _otherInput_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setApi(_api_);

        setEngineName(_engineName_);

        setDot(_dot_);

        setInsight(_insight_);

        setLPar(_lPar_);

        setInput(_input_);

        setOtherInput(_otherInput_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new AApiBlock(
            cloneNode(this._api_),
            cloneNode(this._engineName_),
            cloneNode(this._dot_),
            cloneNode(this._insight_),
            cloneNode(this._lPar_),
            cloneNode(this._input_),
            cloneList(this._otherInput_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAApiBlock(this);
    }

    public TApi getApi()
    {
        return this._api_;
    }

    public void setApi(TApi node)
    {
        if(this._api_ != null)
        {
            this._api_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._api_ = node;
    }

    public TId getEngineName()
    {
        return this._engineName_;
    }

    public void setEngineName(TId node)
    {
        if(this._engineName_ != null)
        {
            this._engineName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._engineName_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    public TId getInsight()
    {
        return this._insight_;
    }

    public void setInsight(TId node)
    {
        if(this._insight_ != null)
        {
            this._insight_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._insight_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PColDef getInput()
    {
        return this._input_;
    }

    public void setInput(PColDef node)
    {
        if(this._input_ != null)
        {
            this._input_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._input_ = node;
    }

    public LinkedList<PColGroup> getOtherInput()
    {
        return this._otherInput_;
    }

    public void setOtherInput(List<?> list)
    {
        for(PColGroup e : this._otherInput_)
        {
            e.parent(null);
        }
        this._otherInput_.clear();

        for(Object obj_e : list)
        {
            PColGroup e = (PColGroup) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._otherInput_.add(e);
        }
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._api_)
            + toString(this._engineName_)
            + toString(this._dot_)
            + toString(this._insight_)
            + toString(this._lPar_)
            + toString(this._input_)
            + toString(this._otherInput_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._api_ == child)
        {
            this._api_ = null;
            return;
        }

        if(this._engineName_ == child)
        {
            this._engineName_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        if(this._insight_ == child)
        {
            this._insight_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._input_ == child)
        {
            this._input_ = null;
            return;
        }

        if(this._otherInput_.remove(child))
        {
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._api_ == oldChild)
        {
            setApi((TApi) newChild);
            return;
        }

        if(this._engineName_ == oldChild)
        {
            setEngineName((TId) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(this._insight_ == oldChild)
        {
            setInsight((TId) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._input_ == oldChild)
        {
            setInput((PColDef) newChild);
            return;
        }

        for(ListIterator<PColGroup> i = this._otherInput_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PColGroup) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
