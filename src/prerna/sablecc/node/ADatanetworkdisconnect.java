/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.Analysis;

@SuppressWarnings("nls")
public final class ADatanetworkdisconnect extends PDatanetworkdisconnect
{
    private TDatanetworkdisconnectToken _datanetworkdisconnectToken_;
    private TLPar _lPar_;
    private TRPar _rPar_;

    public ADatanetworkdisconnect()
    {
        // Constructor
    }

    public ADatanetworkdisconnect(
        @SuppressWarnings("hiding") TDatanetworkdisconnectToken _datanetworkdisconnectToken_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setDatanetworkdisconnectToken(_datanetworkdisconnectToken_);

        setLPar(_lPar_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new ADatanetworkdisconnect(
            cloneNode(this._datanetworkdisconnectToken_),
            cloneNode(this._lPar_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADatanetworkdisconnect(this);
    }

    public TDatanetworkdisconnectToken getDatanetworkdisconnectToken()
    {
        return this._datanetworkdisconnectToken_;
    }

    public void setDatanetworkdisconnectToken(TDatanetworkdisconnectToken node)
    {
        if(this._datanetworkdisconnectToken_ != null)
        {
            this._datanetworkdisconnectToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._datanetworkdisconnectToken_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._datanetworkdisconnectToken_)
            + toString(this._lPar_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._datanetworkdisconnectToken_ == child)
        {
            this._datanetworkdisconnectToken_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._datanetworkdisconnectToken_ == oldChild)
        {
            setDatanetworkdisconnectToken((TDatanetworkdisconnectToken) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
