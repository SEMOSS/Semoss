/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class APastedData extends PPastedData
{
    private TFileText _fileText_;
    private TComma _comma_;
    private PWordOrNum _delimitier_;

    public APastedData()
    {
        // Constructor
    }

    public APastedData(
        @SuppressWarnings("hiding") TFileText _fileText_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PWordOrNum _delimitier_)
    {
        // Constructor
        setFileText(_fileText_);

        setComma(_comma_);

        setDelimitier(_delimitier_);

    }

    @Override
    public Object clone()
    {
        return new APastedData(
            cloneNode(this._fileText_),
            cloneNode(this._comma_),
            cloneNode(this._delimitier_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPastedData(this);
    }

    public TFileText getFileText()
    {
        return this._fileText_;
    }

    public void setFileText(TFileText node)
    {
        if(this._fileText_ != null)
        {
            this._fileText_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fileText_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PWordOrNum getDelimitier()
    {
        return this._delimitier_;
    }

    public void setDelimitier(PWordOrNum node)
    {
        if(this._delimitier_ != null)
        {
            this._delimitier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._delimitier_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fileText_)
            + toString(this._comma_)
            + toString(this._delimitier_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fileText_ == child)
        {
            this._fileText_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._delimitier_ == child)
        {
            this._delimitier_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fileText_ == oldChild)
        {
            setFileText((TFileText) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._delimitier_ == oldChild)
        {
            setDelimitier((PWordOrNum) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
