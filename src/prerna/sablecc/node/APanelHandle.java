/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.Analysis;

@SuppressWarnings("nls")
public final class APanelHandle extends PPanelHandle
{
    private TPanelhandle _panelhandle_;
    private TLPar _lPar_;
    private PCsvRow _handlekeys_;
    private TRPar _rPar_;

    public APanelHandle()
    {
        // Constructor
    }

    public APanelHandle(
        @SuppressWarnings("hiding") TPanelhandle _panelhandle_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PCsvRow _handlekeys_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setPanelhandle(_panelhandle_);

        setLPar(_lPar_);

        setHandlekeys(_handlekeys_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new APanelHandle(
            cloneNode(this._panelhandle_),
            cloneNode(this._lPar_),
            cloneNode(this._handlekeys_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPanelHandle(this);
    }

    public TPanelhandle getPanelhandle()
    {
        return this._panelhandle_;
    }

    public void setPanelhandle(TPanelhandle node)
    {
        if(this._panelhandle_ != null)
        {
            this._panelhandle_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._panelhandle_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PCsvRow getHandlekeys()
    {
        return this._handlekeys_;
    }

    public void setHandlekeys(PCsvRow node)
    {
        if(this._handlekeys_ != null)
        {
            this._handlekeys_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._handlekeys_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._panelhandle_)
            + toString(this._lPar_)
            + toString(this._handlekeys_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._panelhandle_ == child)
        {
            this._panelhandle_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._handlekeys_ == child)
        {
            this._handlekeys_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._panelhandle_ == oldChild)
        {
            setPanelhandle((TPanelhandle) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._handlekeys_ == oldChild)
        {
            setHandlekeys((PCsvRow) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
