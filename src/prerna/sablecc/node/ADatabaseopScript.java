/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ADatabaseopScript extends PScript
{
    private PDatabaseop _databaseop_;
    private TSemicolon _semicolon_;

    public ADatabaseopScript()
    {
        // Constructor
    }

    public ADatabaseopScript(
        @SuppressWarnings("hiding") PDatabaseop _databaseop_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setDatabaseop(_databaseop_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new ADatabaseopScript(
            cloneNode(this._databaseop_),
            cloneNode(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADatabaseopScript(this);
    }

    public PDatabaseop getDatabaseop()
    {
        return this._databaseop_;
    }

    public void setDatabaseop(PDatabaseop node)
    {
        if(this._databaseop_ != null)
        {
            this._databaseop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._databaseop_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._databaseop_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._databaseop_ == child)
        {
            this._databaseop_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._databaseop_ == oldChild)
        {
            setDatabaseop((PDatabaseop) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
