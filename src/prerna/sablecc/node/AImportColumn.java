/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AImportColumn extends PImportColumn
{
    private TColimport _colimport_;
    private TLPar _lp1_;
    private PColCsv _cols_;
    private PRelationClause _relations_;
    private TRPar _rp2_;
    private TDot _dot_;
    private PCsvTable _data_;

    public AImportColumn()
    {
        // Constructor
    }

    public AImportColumn(
        @SuppressWarnings("hiding") TColimport _colimport_,
        @SuppressWarnings("hiding") TLPar _lp1_,
        @SuppressWarnings("hiding") PColCsv _cols_,
        @SuppressWarnings("hiding") PRelationClause _relations_,
        @SuppressWarnings("hiding") TRPar _rp2_,
        @SuppressWarnings("hiding") TDot _dot_,
        @SuppressWarnings("hiding") PCsvTable _data_)
    {
        // Constructor
        setColimport(_colimport_);

        setLp1(_lp1_);

        setCols(_cols_);

        setRelations(_relations_);

        setRp2(_rp2_);

        setDot(_dot_);

        setData(_data_);

    }

    @Override
    public Object clone()
    {
        return new AImportColumn(
            cloneNode(this._colimport_),
            cloneNode(this._lp1_),
            cloneNode(this._cols_),
            cloneNode(this._relations_),
            cloneNode(this._rp2_),
            cloneNode(this._dot_),
            cloneNode(this._data_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAImportColumn(this);
    }

    public TColimport getColimport()
    {
        return this._colimport_;
    }

    public void setColimport(TColimport node)
    {
        if(this._colimport_ != null)
        {
            this._colimport_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colimport_ = node;
    }

    public TLPar getLp1()
    {
        return this._lp1_;
    }

    public void setLp1(TLPar node)
    {
        if(this._lp1_ != null)
        {
            this._lp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lp1_ = node;
    }

    public PColCsv getCols()
    {
        return this._cols_;
    }

    public void setCols(PColCsv node)
    {
        if(this._cols_ != null)
        {
            this._cols_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cols_ = node;
    }

    public PRelationClause getRelations()
    {
        return this._relations_;
    }

    public void setRelations(PRelationClause node)
    {
        if(this._relations_ != null)
        {
            this._relations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relations_ = node;
    }

    public TRPar getRp2()
    {
        return this._rp2_;
    }

    public void setRp2(TRPar node)
    {
        if(this._rp2_ != null)
        {
            this._rp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rp2_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    public PCsvTable getData()
    {
        return this._data_;
    }

    public void setData(PCsvTable node)
    {
        if(this._data_ != null)
        {
            this._data_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._data_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._colimport_)
            + toString(this._lp1_)
            + toString(this._cols_)
            + toString(this._relations_)
            + toString(this._rp2_)
            + toString(this._dot_)
            + toString(this._data_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._colimport_ == child)
        {
            this._colimport_ = null;
            return;
        }

        if(this._lp1_ == child)
        {
            this._lp1_ = null;
            return;
        }

        if(this._cols_ == child)
        {
            this._cols_ = null;
            return;
        }

        if(this._relations_ == child)
        {
            this._relations_ = null;
            return;
        }

        if(this._rp2_ == child)
        {
            this._rp2_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        if(this._data_ == child)
        {
            this._data_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._colimport_ == oldChild)
        {
            setColimport((TColimport) newChild);
            return;
        }

        if(this._lp1_ == oldChild)
        {
            setLp1((TLPar) newChild);
            return;
        }

        if(this._cols_ == oldChild)
        {
            setCols((PColCsv) newChild);
            return;
        }

        if(this._relations_ == oldChild)
        {
            setRelations((PRelationClause) newChild);
            return;
        }

        if(this._rp2_ == oldChild)
        {
            setRp2((TRPar) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(this._data_ == oldChild)
        {
            setData((PCsvTable) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
