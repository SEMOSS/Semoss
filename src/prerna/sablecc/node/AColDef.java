/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AColDef extends PColDef
{
    private TColprefix _colprefix_;
    private TId _colname_;

    public AColDef()
    {
        // Constructor
    }

    public AColDef(
        @SuppressWarnings("hiding") TColprefix _colprefix_,
        @SuppressWarnings("hiding") TId _colname_)
    {
        // Constructor
        setColprefix(_colprefix_);

        setColname(_colname_);

    }

    @Override
    public Object clone()
    {
        return new AColDef(
            cloneNode(this._colprefix_),
            cloneNode(this._colname_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAColDef(this);
    }

    public TColprefix getColprefix()
    {
        return this._colprefix_;
    }

    public void setColprefix(TColprefix node)
    {
        if(this._colprefix_ != null)
        {
            this._colprefix_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colprefix_ = node;
    }

    public TId getColname()
    {
        return this._colname_;
    }

    public void setColname(TId node)
    {
        if(this._colname_ != null)
        {
            this._colname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colname_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._colprefix_)
            + toString(this._colname_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._colprefix_ == child)
        {
            this._colprefix_ = null;
            return;
        }

        if(this._colname_ == child)
        {
            this._colname_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._colprefix_ == oldChild)
        {
            setColprefix((TColprefix) newChild);
            return;
        }

        if(this._colname_ == oldChild)
        {
            setColname((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
