/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import prerna.sablecc.analysis.Analysis;

@SuppressWarnings("nls")
public final class AEasyRow extends PEasyRow
{
    private PWordOrNum _wordOrNum_;
    private final LinkedList<PEasyGroup> _easyGroup_ = new LinkedList<PEasyGroup>();
    private TNewline _newline_;

    public AEasyRow()
    {
        // Constructor
    }

    public AEasyRow(
        @SuppressWarnings("hiding") PWordOrNum _wordOrNum_,
        @SuppressWarnings("hiding") List<?> _easyGroup_,
        @SuppressWarnings("hiding") TNewline _newline_)
    {
        // Constructor
        setWordOrNum(_wordOrNum_);

        setEasyGroup(_easyGroup_);

        setNewline(_newline_);

    }

    @Override
    public Object clone()
    {
        return new AEasyRow(
            cloneNode(this._wordOrNum_),
            cloneList(this._easyGroup_),
            cloneNode(this._newline_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEasyRow(this);
    }

    public PWordOrNum getWordOrNum()
    {
        return this._wordOrNum_;
    }

    public void setWordOrNum(PWordOrNum node)
    {
        if(this._wordOrNum_ != null)
        {
            this._wordOrNum_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._wordOrNum_ = node;
    }

    public LinkedList<PEasyGroup> getEasyGroup()
    {
        return this._easyGroup_;
    }

    public void setEasyGroup(List<?> list)
    {
        for(PEasyGroup e : this._easyGroup_)
        {
            e.parent(null);
        }
        this._easyGroup_.clear();

        for(Object obj_e : list)
        {
            PEasyGroup e = (PEasyGroup) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._easyGroup_.add(e);
        }
    }

    public TNewline getNewline()
    {
        return this._newline_;
    }

    public void setNewline(TNewline node)
    {
        if(this._newline_ != null)
        {
            this._newline_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newline_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._wordOrNum_)
            + toString(this._easyGroup_)
            + toString(this._newline_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._wordOrNum_ == child)
        {
            this._wordOrNum_ = null;
            return;
        }

        if(this._easyGroup_.remove(child))
        {
            return;
        }

        if(this._newline_ == child)
        {
            this._newline_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._wordOrNum_ == oldChild)
        {
            setWordOrNum((PWordOrNum) newChild);
            return;
        }

        for(ListIterator<PEasyGroup> i = this._easyGroup_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PEasyGroup) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._newline_ == oldChild)
        {
            setNewline((TNewline) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
