/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AColWhere extends PColWhere
{
    private PColDef _colDef_;
    private TComparator _comparator_;
    private PColDefOrCsvRow _colDefOrCsvRow_;

    public AColWhere()
    {
        // Constructor
    }

    public AColWhere(
        @SuppressWarnings("hiding") PColDef _colDef_,
        @SuppressWarnings("hiding") TComparator _comparator_,
        @SuppressWarnings("hiding") PColDefOrCsvRow _colDefOrCsvRow_)
    {
        // Constructor
        setColDef(_colDef_);

        setComparator(_comparator_);

        setColDefOrCsvRow(_colDefOrCsvRow_);

    }

    @Override
    public Object clone()
    {
        return new AColWhere(
            cloneNode(this._colDef_),
            cloneNode(this._comparator_),
            cloneNode(this._colDefOrCsvRow_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAColWhere(this);
    }

    public PColDef getColDef()
    {
        return this._colDef_;
    }

    public void setColDef(PColDef node)
    {
        if(this._colDef_ != null)
        {
            this._colDef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colDef_ = node;
    }

    public TComparator getComparator()
    {
        return this._comparator_;
    }

    public void setComparator(TComparator node)
    {
        if(this._comparator_ != null)
        {
            this._comparator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comparator_ = node;
    }

    public PColDefOrCsvRow getColDefOrCsvRow()
    {
        return this._colDefOrCsvRow_;
    }

    public void setColDefOrCsvRow(PColDefOrCsvRow node)
    {
        if(this._colDefOrCsvRow_ != null)
        {
            this._colDefOrCsvRow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colDefOrCsvRow_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._colDef_)
            + toString(this._comparator_)
            + toString(this._colDefOrCsvRow_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._colDef_ == child)
        {
            this._colDef_ = null;
            return;
        }

        if(this._comparator_ == child)
        {
            this._comparator_ = null;
            return;
        }

        if(this._colDefOrCsvRow_ == child)
        {
            this._colDefOrCsvRow_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._colDef_ == oldChild)
        {
            setColDef((PColDef) newChild);
            return;
        }

        if(this._comparator_ == oldChild)
        {
            setComparator((TComparator) newChild);
            return;
        }

        if(this._colDefOrCsvRow_ == oldChild)
        {
            setColDefOrCsvRow((PColDefOrCsvRow) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
