/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ADatabaseMetamodelDatabaseop extends PDatabaseop
{
    private PDatabaseMetamodel _databaseMetamodel_;

    public ADatabaseMetamodelDatabaseop()
    {
        // Constructor
    }

    public ADatabaseMetamodelDatabaseop(
        @SuppressWarnings("hiding") PDatabaseMetamodel _databaseMetamodel_)
    {
        // Constructor
        setDatabaseMetamodel(_databaseMetamodel_);

    }

    @Override
    public Object clone()
    {
        return new ADatabaseMetamodelDatabaseop(
            cloneNode(this._databaseMetamodel_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADatabaseMetamodelDatabaseop(this);
    }

    public PDatabaseMetamodel getDatabaseMetamodel()
    {
        return this._databaseMetamodel_;
    }

    public void setDatabaseMetamodel(PDatabaseMetamodel node)
    {
        if(this._databaseMetamodel_ != null)
        {
            this._databaseMetamodel_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._databaseMetamodel_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._databaseMetamodel_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._databaseMetamodel_ == child)
        {
            this._databaseMetamodel_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._databaseMetamodel_ == oldChild)
        {
            setDatabaseMetamodel((PDatabaseMetamodel) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
