/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.Analysis;

@SuppressWarnings("nls")
public final class ASplitColumn extends PSplitColumn
{
    private TColsplit _colsplit_;
    private TLPar _lp1_;
    private PColDef _col_;
    private TComma _comma_;
    private PWordOrNum _delimiter_;
    private TRPar _rp1_;

    public ASplitColumn()
    {
        // Constructor
    }

    public ASplitColumn(
        @SuppressWarnings("hiding") TColsplit _colsplit_,
        @SuppressWarnings("hiding") TLPar _lp1_,
        @SuppressWarnings("hiding") PColDef _col_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PWordOrNum _delimiter_,
        @SuppressWarnings("hiding") TRPar _rp1_)
    {
        // Constructor
        setColsplit(_colsplit_);

        setLp1(_lp1_);

        setCol(_col_);

        setComma(_comma_);

        setDelimiter(_delimiter_);

        setRp1(_rp1_);

    }

    @Override
    public Object clone()
    {
        return new ASplitColumn(
            cloneNode(this._colsplit_),
            cloneNode(this._lp1_),
            cloneNode(this._col_),
            cloneNode(this._comma_),
            cloneNode(this._delimiter_),
            cloneNode(this._rp1_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASplitColumn(this);
    }

    public TColsplit getColsplit()
    {
        return this._colsplit_;
    }

    public void setColsplit(TColsplit node)
    {
        if(this._colsplit_ != null)
        {
            this._colsplit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colsplit_ = node;
    }

    public TLPar getLp1()
    {
        return this._lp1_;
    }

    public void setLp1(TLPar node)
    {
        if(this._lp1_ != null)
        {
            this._lp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lp1_ = node;
    }

    public PColDef getCol()
    {
        return this._col_;
    }

    public void setCol(PColDef node)
    {
        if(this._col_ != null)
        {
            this._col_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._col_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PWordOrNum getDelimiter()
    {
        return this._delimiter_;
    }

    public void setDelimiter(PWordOrNum node)
    {
        if(this._delimiter_ != null)
        {
            this._delimiter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._delimiter_ = node;
    }

    public TRPar getRp1()
    {
        return this._rp1_;
    }

    public void setRp1(TRPar node)
    {
        if(this._rp1_ != null)
        {
            this._rp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rp1_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._colsplit_)
            + toString(this._lp1_)
            + toString(this._col_)
            + toString(this._comma_)
            + toString(this._delimiter_)
            + toString(this._rp1_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._colsplit_ == child)
        {
            this._colsplit_ = null;
            return;
        }

        if(this._lp1_ == child)
        {
            this._lp1_ = null;
            return;
        }

        if(this._col_ == child)
        {
            this._col_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._delimiter_ == child)
        {
            this._delimiter_ = null;
            return;
        }

        if(this._rp1_ == child)
        {
            this._rp1_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._colsplit_ == oldChild)
        {
            setColsplit((TColsplit) newChild);
            return;
        }

        if(this._lp1_ == oldChild)
        {
            setLp1((TLPar) newChild);
            return;
        }

        if(this._col_ == oldChild)
        {
            setCol((PColDef) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._delimiter_ == oldChild)
        {
            setDelimiter((PWordOrNum) newChild);
            return;
        }

        if(this._rp1_ == oldChild)
        {
            setRp1((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
