/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.Analysis;

@SuppressWarnings("nls")
public final class AOpenData extends POpenData
{
    private TDataopentoken _dataopentoken_;
    private TLPar _lp_;
    private PWordOrNum _engine_;
    private TComma _comma_;
    private PWordOrNum _engineId_;
    private TRPar _rp_;

    public AOpenData()
    {
        // Constructor
    }

    public AOpenData(
        @SuppressWarnings("hiding") TDataopentoken _dataopentoken_,
        @SuppressWarnings("hiding") TLPar _lp_,
        @SuppressWarnings("hiding") PWordOrNum _engine_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PWordOrNum _engineId_,
        @SuppressWarnings("hiding") TRPar _rp_)
    {
        // Constructor
        setDataopentoken(_dataopentoken_);

        setLp(_lp_);

        setEngine(_engine_);

        setComma(_comma_);

        setEngineId(_engineId_);

        setRp(_rp_);

    }

    @Override
    public Object clone()
    {
        return new AOpenData(
            cloneNode(this._dataopentoken_),
            cloneNode(this._lp_),
            cloneNode(this._engine_),
            cloneNode(this._comma_),
            cloneNode(this._engineId_),
            cloneNode(this._rp_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOpenData(this);
    }

    public TDataopentoken getDataopentoken()
    {
        return this._dataopentoken_;
    }

    public void setDataopentoken(TDataopentoken node)
    {
        if(this._dataopentoken_ != null)
        {
            this._dataopentoken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dataopentoken_ = node;
    }

    public TLPar getLp()
    {
        return this._lp_;
    }

    public void setLp(TLPar node)
    {
        if(this._lp_ != null)
        {
            this._lp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lp_ = node;
    }

    public PWordOrNum getEngine()
    {
        return this._engine_;
    }

    public void setEngine(PWordOrNum node)
    {
        if(this._engine_ != null)
        {
            this._engine_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._engine_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PWordOrNum getEngineId()
    {
        return this._engineId_;
    }

    public void setEngineId(PWordOrNum node)
    {
        if(this._engineId_ != null)
        {
            this._engineId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._engineId_ = node;
    }

    public TRPar getRp()
    {
        return this._rp_;
    }

    public void setRp(TRPar node)
    {
        if(this._rp_ != null)
        {
            this._rp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dataopentoken_)
            + toString(this._lp_)
            + toString(this._engine_)
            + toString(this._comma_)
            + toString(this._engineId_)
            + toString(this._rp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dataopentoken_ == child)
        {
            this._dataopentoken_ = null;
            return;
        }

        if(this._lp_ == child)
        {
            this._lp_ = null;
            return;
        }

        if(this._engine_ == child)
        {
            this._engine_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._engineId_ == child)
        {
            this._engineId_ = null;
            return;
        }

        if(this._rp_ == child)
        {
            this._rp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dataopentoken_ == oldChild)
        {
            setDataopentoken((TDataopentoken) newChild);
            return;
        }

        if(this._lp_ == oldChild)
        {
            setLp((TLPar) newChild);
            return;
        }

        if(this._engine_ == oldChild)
        {
            setEngine((PWordOrNum) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._engineId_ == oldChild)
        {
            setEngineId((PWordOrNum) newChild);
            return;
        }

        if(this._rp_ == oldChild)
        {
            setRp((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
