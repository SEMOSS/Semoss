/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import java.util.*;
import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AWord extends PWord
{
    private TQuote _l_;
    private final LinkedList<PWordOrBlank> _wordOrBlank_ = new LinkedList<PWordOrBlank>();
    private TQuote _r_;

    public AWord()
    {
        // Constructor
    }

    public AWord(
        @SuppressWarnings("hiding") TQuote _l_,
        @SuppressWarnings("hiding") List<?> _wordOrBlank_,
        @SuppressWarnings("hiding") TQuote _r_)
    {
        // Constructor
        setL(_l_);

        setWordOrBlank(_wordOrBlank_);

        setR(_r_);

    }

    @Override
    public Object clone()
    {
        return new AWord(
            cloneNode(this._l_),
            cloneList(this._wordOrBlank_),
            cloneNode(this._r_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWord(this);
    }

    public TQuote getL()
    {
        return this._l_;
    }

    public void setL(TQuote node)
    {
        if(this._l_ != null)
        {
            this._l_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l_ = node;
    }

    public LinkedList<PWordOrBlank> getWordOrBlank()
    {
        return this._wordOrBlank_;
    }

    public void setWordOrBlank(List<?> list)
    {
        for(PWordOrBlank e : this._wordOrBlank_)
        {
            e.parent(null);
        }
        this._wordOrBlank_.clear();

        for(Object obj_e : list)
        {
            PWordOrBlank e = (PWordOrBlank) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._wordOrBlank_.add(e);
        }
    }

    public TQuote getR()
    {
        return this._r_;
    }

    public void setR(TQuote node)
    {
        if(this._r_ != null)
        {
            this._r_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._r_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._l_)
            + toString(this._wordOrBlank_)
            + toString(this._r_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._l_ == child)
        {
            this._l_ = null;
            return;
        }

        if(this._wordOrBlank_.remove(child))
        {
            return;
        }

        if(this._r_ == child)
        {
            this._r_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._l_ == oldChild)
        {
            setL((TQuote) newChild);
            return;
        }

        for(ListIterator<PWordOrBlank> i = this._wordOrBlank_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PWordOrBlank) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._r_ == oldChild)
        {
            setR((TQuote) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
