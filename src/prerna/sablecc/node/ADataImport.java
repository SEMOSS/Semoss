/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ADataImport extends PDataImport
{
    private TDataimporttoken _dataimporttoken_;
    private TLPar _lPar_;
    private PApiBlock _apiBlock_;
    private TComma _comma_;
    private PRelationClause _joins_;
    private TRPar _rPar_;

    public ADataImport()
    {
        // Constructor
    }

    public ADataImport(
        @SuppressWarnings("hiding") TDataimporttoken _dataimporttoken_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PApiBlock _apiBlock_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PRelationClause _joins_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setDataimporttoken(_dataimporttoken_);

        setLPar(_lPar_);

        setApiBlock(_apiBlock_);

        setComma(_comma_);

        setJoins(_joins_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new ADataImport(
            cloneNode(this._dataimporttoken_),
            cloneNode(this._lPar_),
            cloneNode(this._apiBlock_),
            cloneNode(this._comma_),
            cloneNode(this._joins_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADataImport(this);
    }

    public TDataimporttoken getDataimporttoken()
    {
        return this._dataimporttoken_;
    }

    public void setDataimporttoken(TDataimporttoken node)
    {
        if(this._dataimporttoken_ != null)
        {
            this._dataimporttoken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dataimporttoken_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PApiBlock getApiBlock()
    {
        return this._apiBlock_;
    }

    public void setApiBlock(PApiBlock node)
    {
        if(this._apiBlock_ != null)
        {
            this._apiBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._apiBlock_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PRelationClause getJoins()
    {
        return this._joins_;
    }

    public void setJoins(PRelationClause node)
    {
        if(this._joins_ != null)
        {
            this._joins_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._joins_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dataimporttoken_)
            + toString(this._lPar_)
            + toString(this._apiBlock_)
            + toString(this._comma_)
            + toString(this._joins_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dataimporttoken_ == child)
        {
            this._dataimporttoken_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._apiBlock_ == child)
        {
            this._apiBlock_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._joins_ == child)
        {
            this._joins_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dataimporttoken_ == oldChild)
        {
            setDataimporttoken((TDataimporttoken) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._apiBlock_ == oldChild)
        {
            setApiBlock((PApiBlock) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._joins_ == oldChild)
        {
            setJoins((PRelationClause) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
