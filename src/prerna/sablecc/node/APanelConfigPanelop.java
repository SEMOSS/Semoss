/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.Analysis;

@SuppressWarnings("nls")
public final class APanelConfigPanelop extends PPanelop
{
    private PPanelConfig _panelConfig_;

    public APanelConfigPanelop()
    {
        // Constructor
    }

    public APanelConfigPanelop(
        @SuppressWarnings("hiding") PPanelConfig _panelConfig_)
    {
        // Constructor
        setPanelConfig(_panelConfig_);

    }

    @Override
    public Object clone()
    {
        return new APanelConfigPanelop(
            cloneNode(this._panelConfig_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPanelConfigPanelop(this);
    }

    public PPanelConfig getPanelConfig()
    {
        return this._panelConfig_;
    }

    public void setPanelConfig(PPanelConfig node)
    {
        if(this._panelConfig_ != null)
        {
            this._panelConfig_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._panelConfig_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._panelConfig_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._panelConfig_ == child)
        {
            this._panelConfig_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._panelConfig_ == oldChild)
        {
            setPanelConfig((PPanelConfig) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
