/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class APanelTools extends PPanelTools
{
    private TPaneltools _paneltools_;
    private TLPar _lPar_;
    private PMapObj _map_;
    private TComma _comma_;
    private PWordOrNum _state_;
    private TRPar _rPar_;

    public APanelTools()
    {
        // Constructor
    }

    public APanelTools(
        @SuppressWarnings("hiding") TPaneltools _paneltools_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PMapObj _map_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PWordOrNum _state_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setPaneltools(_paneltools_);

        setLPar(_lPar_);

        setMap(_map_);

        setComma(_comma_);

        setState(_state_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new APanelTools(
            cloneNode(this._paneltools_),
            cloneNode(this._lPar_),
            cloneNode(this._map_),
            cloneNode(this._comma_),
            cloneNode(this._state_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPanelTools(this);
    }

    public TPaneltools getPaneltools()
    {
        return this._paneltools_;
    }

    public void setPaneltools(TPaneltools node)
    {
        if(this._paneltools_ != null)
        {
            this._paneltools_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paneltools_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PMapObj getMap()
    {
        return this._map_;
    }

    public void setMap(PMapObj node)
    {
        if(this._map_ != null)
        {
            this._map_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._map_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PWordOrNum getState()
    {
        return this._state_;
    }

    public void setState(PWordOrNum node)
    {
        if(this._state_ != null)
        {
            this._state_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._state_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._paneltools_)
            + toString(this._lPar_)
            + toString(this._map_)
            + toString(this._comma_)
            + toString(this._state_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._paneltools_ == child)
        {
            this._paneltools_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._map_ == child)
        {
            this._map_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._state_ == child)
        {
            this._state_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._paneltools_ == oldChild)
        {
            setPaneltools((TPaneltools) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._map_ == oldChild)
        {
            setMap((PMapObj) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._state_ == oldChild)
        {
            setState((PWordOrNum) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
