/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import java.util.*;
import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AMapObj extends PMapObj
{
    private TLCurlBracket _lCurlBracket_;
    private PKeyvalue _keyvalue_;
    private final LinkedList<PKeyvalueGroup> _keyvalueGroup_ = new LinkedList<PKeyvalueGroup>();
    private TRCurlBracket _rCurlBracket_;

    public AMapObj()
    {
        // Constructor
    }

    public AMapObj(
        @SuppressWarnings("hiding") TLCurlBracket _lCurlBracket_,
        @SuppressWarnings("hiding") PKeyvalue _keyvalue_,
        @SuppressWarnings("hiding") List<PKeyvalueGroup> _keyvalueGroup_,
        @SuppressWarnings("hiding") TRCurlBracket _rCurlBracket_)
    {
        // Constructor
        setLCurlBracket(_lCurlBracket_);

        setKeyvalue(_keyvalue_);

        setKeyvalueGroup(_keyvalueGroup_);

        setRCurlBracket(_rCurlBracket_);

    }

    @Override
    public Object clone()
    {
        return new AMapObj(
            cloneNode(this._lCurlBracket_),
            cloneNode(this._keyvalue_),
            cloneList(this._keyvalueGroup_),
            cloneNode(this._rCurlBracket_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMapObj(this);
    }

    public TLCurlBracket getLCurlBracket()
    {
        return this._lCurlBracket_;
    }

    public void setLCurlBracket(TLCurlBracket node)
    {
        if(this._lCurlBracket_ != null)
        {
            this._lCurlBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lCurlBracket_ = node;
    }

    public PKeyvalue getKeyvalue()
    {
        return this._keyvalue_;
    }

    public void setKeyvalue(PKeyvalue node)
    {
        if(this._keyvalue_ != null)
        {
            this._keyvalue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keyvalue_ = node;
    }

    public LinkedList<PKeyvalueGroup> getKeyvalueGroup()
    {
        return this._keyvalueGroup_;
    }

    public void setKeyvalueGroup(List<PKeyvalueGroup> list)
    {
        this._keyvalueGroup_.clear();
        this._keyvalueGroup_.addAll(list);
        for(PKeyvalueGroup e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRCurlBracket getRCurlBracket()
    {
        return this._rCurlBracket_;
    }

    public void setRCurlBracket(TRCurlBracket node)
    {
        if(this._rCurlBracket_ != null)
        {
            this._rCurlBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rCurlBracket_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lCurlBracket_)
            + toString(this._keyvalue_)
            + toString(this._keyvalueGroup_)
            + toString(this._rCurlBracket_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lCurlBracket_ == child)
        {
            this._lCurlBracket_ = null;
            return;
        }

        if(this._keyvalue_ == child)
        {
            this._keyvalue_ = null;
            return;
        }

        if(this._keyvalueGroup_.remove(child))
        {
            return;
        }

        if(this._rCurlBracket_ == child)
        {
            this._rCurlBracket_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lCurlBracket_ == oldChild)
        {
            setLCurlBracket((TLCurlBracket) newChild);
            return;
        }

        if(this._keyvalue_ == oldChild)
        {
            setKeyvalue((PKeyvalue) newChild);
            return;
        }

        for(ListIterator<PKeyvalueGroup> i = this._keyvalueGroup_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PKeyvalueGroup) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rCurlBracket_ == oldChild)
        {
            setRCurlBracket((TRCurlBracket) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
