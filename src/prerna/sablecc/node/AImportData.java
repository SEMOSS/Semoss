/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AImportData extends PImportData
{
    private TDataimporttoken _dataimporttoken_;
    private TLPar _lp1_;
    private PImportBlock _import_;
    private PRelationClause _joins_;
    private TComma _comma1_;
    private PMapObj _properties_;
    private TRPar _rp2_;

    public AImportData()
    {
        // Constructor
    }

    public AImportData(
        @SuppressWarnings("hiding") TDataimporttoken _dataimporttoken_,
        @SuppressWarnings("hiding") TLPar _lp1_,
        @SuppressWarnings("hiding") PImportBlock _import_,
        @SuppressWarnings("hiding") PRelationClause _joins_,
        @SuppressWarnings("hiding") TComma _comma1_,
        @SuppressWarnings("hiding") PMapObj _properties_,
        @SuppressWarnings("hiding") TRPar _rp2_)
    {
        // Constructor
        setDataimporttoken(_dataimporttoken_);

        setLp1(_lp1_);

        setImport(_import_);

        setJoins(_joins_);

        setComma1(_comma1_);

        setProperties(_properties_);

        setRp2(_rp2_);

    }

    @Override
    public Object clone()
    {
        return new AImportData(
            cloneNode(this._dataimporttoken_),
            cloneNode(this._lp1_),
            cloneNode(this._import_),
            cloneNode(this._joins_),
            cloneNode(this._comma1_),
            cloneNode(this._properties_),
            cloneNode(this._rp2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAImportData(this);
    }

    public TDataimporttoken getDataimporttoken()
    {
        return this._dataimporttoken_;
    }

    public void setDataimporttoken(TDataimporttoken node)
    {
        if(this._dataimporttoken_ != null)
        {
            this._dataimporttoken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dataimporttoken_ = node;
    }

    public TLPar getLp1()
    {
        return this._lp1_;
    }

    public void setLp1(TLPar node)
    {
        if(this._lp1_ != null)
        {
            this._lp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lp1_ = node;
    }

    public PImportBlock getImport()
    {
        return this._import_;
    }

    public void setImport(PImportBlock node)
    {
        if(this._import_ != null)
        {
            this._import_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._import_ = node;
    }

    public PRelationClause getJoins()
    {
        return this._joins_;
    }

    public void setJoins(PRelationClause node)
    {
        if(this._joins_ != null)
        {
            this._joins_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._joins_ = node;
    }

    public TComma getComma1()
    {
        return this._comma1_;
    }

    public void setComma1(TComma node)
    {
        if(this._comma1_ != null)
        {
            this._comma1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma1_ = node;
    }

    public PMapObj getProperties()
    {
        return this._properties_;
    }

    public void setProperties(PMapObj node)
    {
        if(this._properties_ != null)
        {
            this._properties_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._properties_ = node;
    }

    public TRPar getRp2()
    {
        return this._rp2_;
    }

    public void setRp2(TRPar node)
    {
        if(this._rp2_ != null)
        {
            this._rp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rp2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dataimporttoken_)
            + toString(this._lp1_)
            + toString(this._import_)
            + toString(this._joins_)
            + toString(this._comma1_)
            + toString(this._properties_)
            + toString(this._rp2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dataimporttoken_ == child)
        {
            this._dataimporttoken_ = null;
            return;
        }

        if(this._lp1_ == child)
        {
            this._lp1_ = null;
            return;
        }

        if(this._import_ == child)
        {
            this._import_ = null;
            return;
        }

        if(this._joins_ == child)
        {
            this._joins_ = null;
            return;
        }

        if(this._comma1_ == child)
        {
            this._comma1_ = null;
            return;
        }

        if(this._properties_ == child)
        {
            this._properties_ = null;
            return;
        }

        if(this._rp2_ == child)
        {
            this._rp2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dataimporttoken_ == oldChild)
        {
            setDataimporttoken((TDataimporttoken) newChild);
            return;
        }

        if(this._lp1_ == oldChild)
        {
            setLp1((TLPar) newChild);
            return;
        }

        if(this._import_ == oldChild)
        {
            setImport((PImportBlock) newChild);
            return;
        }

        if(this._joins_ == oldChild)
        {
            setJoins((PRelationClause) newChild);
            return;
        }

        if(this._comma1_ == oldChild)
        {
            setComma1((TComma) newChild);
            return;
        }

        if(this._properties_ == oldChild)
        {
            setProperties((PMapObj) newChild);
            return;
        }

        if(this._rp2_ == oldChild)
        {
            setRp2((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
