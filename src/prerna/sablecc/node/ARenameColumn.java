/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ARenameColumn extends PRenameColumn
{
    private TColrename _colrename_;
    private TLPar _lp1_;
    private PColDef _oldcol_;
    private TComma _comma_;
    private PColDef _newcol_;
    private TRPar _rp1_;

    public ARenameColumn()
    {
        // Constructor
    }

    public ARenameColumn(
        @SuppressWarnings("hiding") TColrename _colrename_,
        @SuppressWarnings("hiding") TLPar _lp1_,
        @SuppressWarnings("hiding") PColDef _oldcol_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PColDef _newcol_,
        @SuppressWarnings("hiding") TRPar _rp1_)
    {
        // Constructor
        setColrename(_colrename_);

        setLp1(_lp1_);

        setOldcol(_oldcol_);

        setComma(_comma_);

        setNewcol(_newcol_);

        setRp1(_rp1_);

    }

    @Override
    public Object clone()
    {
        return new ARenameColumn(
            cloneNode(this._colrename_),
            cloneNode(this._lp1_),
            cloneNode(this._oldcol_),
            cloneNode(this._comma_),
            cloneNode(this._newcol_),
            cloneNode(this._rp1_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARenameColumn(this);
    }

    public TColrename getColrename()
    {
        return this._colrename_;
    }

    public void setColrename(TColrename node)
    {
        if(this._colrename_ != null)
        {
            this._colrename_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colrename_ = node;
    }

    public TLPar getLp1()
    {
        return this._lp1_;
    }

    public void setLp1(TLPar node)
    {
        if(this._lp1_ != null)
        {
            this._lp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lp1_ = node;
    }

    public PColDef getOldcol()
    {
        return this._oldcol_;
    }

    public void setOldcol(PColDef node)
    {
        if(this._oldcol_ != null)
        {
            this._oldcol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._oldcol_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PColDef getNewcol()
    {
        return this._newcol_;
    }

    public void setNewcol(PColDef node)
    {
        if(this._newcol_ != null)
        {
            this._newcol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newcol_ = node;
    }

    public TRPar getRp1()
    {
        return this._rp1_;
    }

    public void setRp1(TRPar node)
    {
        if(this._rp1_ != null)
        {
            this._rp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rp1_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._colrename_)
            + toString(this._lp1_)
            + toString(this._oldcol_)
            + toString(this._comma_)
            + toString(this._newcol_)
            + toString(this._rp1_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._colrename_ == child)
        {
            this._colrename_ = null;
            return;
        }

        if(this._lp1_ == child)
        {
            this._lp1_ = null;
            return;
        }

        if(this._oldcol_ == child)
        {
            this._oldcol_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._newcol_ == child)
        {
            this._newcol_ = null;
            return;
        }

        if(this._rp1_ == child)
        {
            this._rp1_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._colrename_ == oldChild)
        {
            setColrename((TColrename) newChild);
            return;
        }

        if(this._lp1_ == oldChild)
        {
            setLp1((TLPar) newChild);
            return;
        }

        if(this._oldcol_ == oldChild)
        {
            setOldcol((PColDef) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._newcol_ == oldChild)
        {
            setNewcol((PColDef) newChild);
            return;
        }

        if(this._rp1_ == oldChild)
        {
            setRp1((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
