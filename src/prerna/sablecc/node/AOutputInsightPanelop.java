/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.Analysis;

@SuppressWarnings("nls")
public final class AOutputInsightPanelop extends PPanelop
{
    private POutputInsight _outputInsight_;

    public AOutputInsightPanelop()
    {
        // Constructor
    }

    public AOutputInsightPanelop(
        @SuppressWarnings("hiding") POutputInsight _outputInsight_)
    {
        // Constructor
        setOutputInsight(_outputInsight_);

    }

    @Override
    public Object clone()
    {
        return new AOutputInsightPanelop(
            cloneNode(this._outputInsight_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOutputInsightPanelop(this);
    }

    public POutputInsight getOutputInsight()
    {
        return this._outputInsight_;
    }

    public void setOutputInsight(POutputInsight node)
    {
        if(this._outputInsight_ != null)
        {
            this._outputInsight_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._outputInsight_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._outputInsight_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._outputInsight_ == child)
        {
            this._outputInsight_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._outputInsight_ == oldChild)
        {
            setOutputInsight((POutputInsight) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
