/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import java.util.*;
import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AJoinColumn extends PJoinColumn
{
    private TColjoin _coljoin_;
    private TLPar _lPar_;
    private PColDef _newcol_;
    private final LinkedList<PColGroup> _joincol_ = new LinkedList<PColGroup>();
    private TRPar _rPar_;

    public AJoinColumn()
    {
        // Constructor
    }

    public AJoinColumn(
        @SuppressWarnings("hiding") TColjoin _coljoin_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PColDef _newcol_,
        @SuppressWarnings("hiding") List<?> _joincol_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setColjoin(_coljoin_);

        setLPar(_lPar_);

        setNewcol(_newcol_);

        setJoincol(_joincol_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new AJoinColumn(
            cloneNode(this._coljoin_),
            cloneNode(this._lPar_),
            cloneNode(this._newcol_),
            cloneList(this._joincol_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAJoinColumn(this);
    }

    public TColjoin getColjoin()
    {
        return this._coljoin_;
    }

    public void setColjoin(TColjoin node)
    {
        if(this._coljoin_ != null)
        {
            this._coljoin_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._coljoin_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PColDef getNewcol()
    {
        return this._newcol_;
    }

    public void setNewcol(PColDef node)
    {
        if(this._newcol_ != null)
        {
            this._newcol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newcol_ = node;
    }

    public LinkedList<PColGroup> getJoincol()
    {
        return this._joincol_;
    }

    public void setJoincol(List<?> list)
    {
        for(PColGroup e : this._joincol_)
        {
            e.parent(null);
        }
        this._joincol_.clear();

        for(Object obj_e : list)
        {
            PColGroup e = (PColGroup) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._joincol_.add(e);
        }
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._coljoin_)
            + toString(this._lPar_)
            + toString(this._newcol_)
            + toString(this._joincol_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._coljoin_ == child)
        {
            this._coljoin_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._newcol_ == child)
        {
            this._newcol_ = null;
            return;
        }

        if(this._joincol_.remove(child))
        {
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._coljoin_ == oldChild)
        {
            setColjoin((TColjoin) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._newcol_ == oldChild)
        {
            setNewcol((PColDef) newChild);
            return;
        }

        for(ListIterator<PColGroup> i = this._joincol_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PColGroup) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
