/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AHelp extends PHelp
{
    private THelpToken _helpToken_;

    public AHelp()
    {
        // Constructor
    }

    public AHelp(
        @SuppressWarnings("hiding") THelpToken _helpToken_)
    {
        // Constructor
        setHelpToken(_helpToken_);

    }

    @Override
    public Object clone()
    {
        return new AHelp(
            cloneNode(this._helpToken_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHelp(this);
    }

    public THelpToken getHelpToken()
    {
        return this._helpToken_;
    }

    public void setHelpToken(THelpToken node)
    {
        if(this._helpToken_ != null)
        {
            this._helpToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._helpToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._helpToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._helpToken_ == child)
        {
            this._helpToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._helpToken_ == oldChild)
        {
            setHelpToken((THelpToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
