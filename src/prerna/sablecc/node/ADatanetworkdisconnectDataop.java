/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.Analysis;

@SuppressWarnings("nls")
public final class ADatanetworkdisconnectDataop extends PDataop
{
    private PDatanetworkdisconnect _datanetworkdisconnect_;

    public ADatanetworkdisconnectDataop()
    {
        // Constructor
    }

    public ADatanetworkdisconnectDataop(
        @SuppressWarnings("hiding") PDatanetworkdisconnect _datanetworkdisconnect_)
    {
        // Constructor
        setDatanetworkdisconnect(_datanetworkdisconnect_);

    }

    @Override
    public Object clone()
    {
        return new ADatanetworkdisconnectDataop(
            cloneNode(this._datanetworkdisconnect_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADatanetworkdisconnectDataop(this);
    }

    public PDatanetworkdisconnect getDatanetworkdisconnect()
    {
        return this._datanetworkdisconnect_;
    }

    public void setDatanetworkdisconnect(PDatanetworkdisconnect node)
    {
        if(this._datanetworkdisconnect_ != null)
        {
            this._datanetworkdisconnect_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._datanetworkdisconnect_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._datanetworkdisconnect_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._datanetworkdisconnect_ == child)
        {
            this._datanetworkdisconnect_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._datanetworkdisconnect_ == oldChild)
        {
            setDatanetworkdisconnect((PDatanetworkdisconnect) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
