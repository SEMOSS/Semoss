/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc.node;

import prerna.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ATableDef extends PTableDef
{
    private TTablePrefix _tablePrefix_;
    private TNumber _cardinality_;

    public ATableDef()
    {
        // Constructor
    }

    public ATableDef(
        @SuppressWarnings("hiding") TTablePrefix _tablePrefix_,
        @SuppressWarnings("hiding") TNumber _cardinality_)
    {
        // Constructor
        setTablePrefix(_tablePrefix_);

        setCardinality(_cardinality_);

    }

    @Override
    public Object clone()
    {
        return new ATableDef(
            cloneNode(this._tablePrefix_),
            cloneNode(this._cardinality_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATableDef(this);
    }

    public TTablePrefix getTablePrefix()
    {
        return this._tablePrefix_;
    }

    public void setTablePrefix(TTablePrefix node)
    {
        if(this._tablePrefix_ != null)
        {
            this._tablePrefix_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tablePrefix_ = node;
    }

    public TNumber getCardinality()
    {
        return this._cardinality_;
    }

    public void setCardinality(TNumber node)
    {
        if(this._cardinality_ != null)
        {
            this._cardinality_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cardinality_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tablePrefix_)
            + toString(this._cardinality_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tablePrefix_ == child)
        {
            this._tablePrefix_ = null;
            return;
        }

        if(this._cardinality_ == child)
        {
            this._cardinality_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tablePrefix_ == oldChild)
        {
            setTablePrefix((TTablePrefix) newChild);
            return;
        }

        if(this._cardinality_ == oldChild)
        {
            setCardinality((TNumber) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
