package prerna.poi.main.insights;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import prerna.poi.main.TextExtractor;
import prerna.util.DIHelper;

public class InsightTemplateProcessor implements InsightRuleConstants{
	
	public InsightTemplateProcessor() {

	}

	public static void main(String[] args) {
		String filePath = "C:\\Users\\mahkhalil\\workspace\\Semoss_Dev\\db\\Default\\Default_AutoGenerated_Insights.prop";
		InsightTemplateProcessor processor = new InsightTemplateProcessor();
		try {
			List<String> questionRules = processor.splitRules(filePath);
			List<InsightRule> rules = processor.processRules(questionRules);
			int i = 0;
			int size = rules.size();
			for(; i < size; i++) {
				InsightRule rule = rules.get(i);
				System.out.println("Question: " + rule.getQuestion());
				System.out.println("Output: " + rule.getOutput());
				System.out.println("Has aggregation: " + rule.isHasAggregation());
				System.out.println("Constraints: " + rule.getConstraints());
				System.out.println("\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	/**
	 * Gets the path for the default insights and generates a list of rules
	 * @return
	 */
	public List<InsightRule> runGenerateInsights() {
		String filePath = DIHelper.getInstance().getProperty("BaseFolder") + "\\db\\Default\\Default_AutoGenerated_Insights.prop";
		List<InsightRule> rules = new ArrayList<InsightRule>();
		try {
			List<String> questionRules = splitRules(filePath);
			rules = processRules(questionRules);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return rules;
	}
	
	/**
	 * Processes through the list of questions as strings to generate a list of insight rule objects
	 * @param questionRules 	The list of questions as strings
	 * @return					The list of rules
	 */
	public List<InsightRule> processRules(List<String> questionRules) {
		List<InsightRule> rules = new ArrayList<InsightRule>();
		NEXT_QUESTION: for(String question : questionRules) {
			String[] questionSplit = question.split("\n+|\r+");
			InsightRule rule = new InsightRule();
			int i = 1;
			int size = questionSplit.length - 2;
			for(; i < size; i++) {
				String rulePart = questionSplit[i];
				if(!rulePart.isEmpty()) {
					if(rulePart.toUpperCase().startsWith(QUESTION_KEY)) {
						String[] questionRuleSplit = rulePart.split("=");
						rule.setQuestion(questionRuleSplit[1].replace("@", "").trim());
					} else if(rulePart.toUpperCase().startsWith(OUTPUT_KEY)) {
						String[] outputRuleSplit = rulePart.split("=");
						if(outputRuleSplit[1].equalsIgnoreCase(PIE_CHART) || 
								outputRuleSplit[1].equalsIgnoreCase(BAR_CHART) || 
								outputRuleSplit[1].equalsIgnoreCase(SCATTER_PLOT) || 
								outputRuleSplit[1].equalsIgnoreCase(HEAT_MAP) || 
								outputRuleSplit[1].equalsIgnoreCase(PARALLEL_COORDINATES) ||
								outputRuleSplit[1].equalsIgnoreCase(BUBBLE_CHART)) 
						{
							rule.setOutput(outputRuleSplit[1].toUpperCase().replace("@", "").trim());
						} else {
							// if output not found above, then go to next question
							continue NEXT_QUESTION;
						}
					} else {
						String[] paramSplit = rulePart.split("-");
						String[] constraintValueSplit = paramSplit[1].split("=");
						// change boolean value if aggregation is used
						if(constraintValueSplit[1].equalsIgnoreCase(COUNT) || 
								constraintValueSplit[1].equalsIgnoreCase(SUM) || 
								constraintValueSplit[1].equalsIgnoreCase(AVERAGE) || 
								constraintValueSplit[1].equalsIgnoreCase(MIN) || 
								constraintValueSplit[1].equalsIgnoreCase(MAX)) 
						{
							rule.setHasAggregation(true);
							constraintValueSplit[0] = AGGREGATION;
							rule.addConstraint(paramSplit[0].replace("@", "").trim(), constraintValueSplit[0].trim(), constraintValueSplit[1].trim());
						} else {
							Double val = null;
							try {
								val = Double.parseDouble(constraintValueSplit[1].trim());
							} catch(NumberFormatException ex) {
								continue NEXT_QUESTION;
							}
							rule.addConstraint(paramSplit[0].replace("@", "").trim(), constraintValueSplit[0].trim(), val);
						}
					}
				}
			}
			// only use questions if question string and output is defined and at least one constraint
			if(!rule.getQuestion().isEmpty() && !rule.getOutput().isEmpty() && !rule.getConstraints().isEmpty()) {
				rules.add(rule);
			}
		}
		return rules;
	}

	/**
	 * Returns a list of strings where each string represents an insight question
	 * @param filePath			The path to the insight default template
	 * @return					The list of questions as strings
	 * @throws IOException
	 */
	public List<String> splitRules(String filePath) throws IOException {
		final String regex = "<Question>(.+?)</Question>";

		String fileContent = TextExtractor.readFile(filePath, StandardCharsets.UTF_8);
		final Pattern pattern = Pattern.compile(regex, Pattern.DOTALL);
		final Matcher matcher = pattern.matcher(fileContent);
		
		List<String> questionRules = new ArrayList<String>();
		while(matcher.find()) {
			questionRules.add(matcher.group());
		}
		
		return questionRules;
	}
}
