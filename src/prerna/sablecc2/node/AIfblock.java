/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc2.node;

import prerna.sablecc2.analysis.*;

@SuppressWarnings("nls")
public final class AIfblock extends PIfblock
{
    private TIf _if_;
    private TLPar _lPar_;
    private POperationOrVar _operationOrVar_;
    private TComma _comma1_;
    private POperationOrIfblock _op1_;
    private TComma _comma2_;
    private POperationOrIfblock _op2_;
    private TRPar _rPar_;

    public AIfblock()
    {
        // Constructor
    }

    public AIfblock(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") POperationOrVar _operationOrVar_,
        @SuppressWarnings("hiding") TComma _comma1_,
        @SuppressWarnings("hiding") POperationOrIfblock _op1_,
        @SuppressWarnings("hiding") TComma _comma2_,
        @SuppressWarnings("hiding") POperationOrIfblock _op2_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setIf(_if_);

        setLPar(_lPar_);

        setOperationOrVar(_operationOrVar_);

        setComma1(_comma1_);

        setOp1(_op1_);

        setComma2(_comma2_);

        setOp2(_op2_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new AIfblock(
            cloneNode(this._if_),
            cloneNode(this._lPar_),
            cloneNode(this._operationOrVar_),
            cloneNode(this._comma1_),
            cloneNode(this._op1_),
            cloneNode(this._comma2_),
            cloneNode(this._op2_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfblock(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public POperationOrVar getOperationOrVar()
    {
        return this._operationOrVar_;
    }

    public void setOperationOrVar(POperationOrVar node)
    {
        if(this._operationOrVar_ != null)
        {
            this._operationOrVar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._operationOrVar_ = node;
    }

    public TComma getComma1()
    {
        return this._comma1_;
    }

    public void setComma1(TComma node)
    {
        if(this._comma1_ != null)
        {
            this._comma1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma1_ = node;
    }

    public POperationOrIfblock getOp1()
    {
        return this._op1_;
    }

    public void setOp1(POperationOrIfblock node)
    {
        if(this._op1_ != null)
        {
            this._op1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._op1_ = node;
    }

    public TComma getComma2()
    {
        return this._comma2_;
    }

    public void setComma2(TComma node)
    {
        if(this._comma2_ != null)
        {
            this._comma2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma2_ = node;
    }

    public POperationOrIfblock getOp2()
    {
        return this._op2_;
    }

    public void setOp2(POperationOrIfblock node)
    {
        if(this._op2_ != null)
        {
            this._op2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._op2_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._lPar_)
            + toString(this._operationOrVar_)
            + toString(this._comma1_)
            + toString(this._op1_)
            + toString(this._comma2_)
            + toString(this._op2_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._operationOrVar_ == child)
        {
            this._operationOrVar_ = null;
            return;
        }

        if(this._comma1_ == child)
        {
            this._comma1_ = null;
            return;
        }

        if(this._op1_ == child)
        {
            this._op1_ = null;
            return;
        }

        if(this._comma2_ == child)
        {
            this._comma2_ = null;
            return;
        }

        if(this._op2_ == child)
        {
            this._op2_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._operationOrVar_ == oldChild)
        {
            setOperationOrVar((POperationOrVar) newChild);
            return;
        }

        if(this._comma1_ == oldChild)
        {
            setComma1((TComma) newChild);
            return;
        }

        if(this._op1_ == oldChild)
        {
            setOp1((POperationOrIfblock) newChild);
            return;
        }

        if(this._comma2_ == oldChild)
        {
            setComma2((TComma) newChild);
            return;
        }

        if(this._op2_ == oldChild)
        {
            setOp2((POperationOrIfblock) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
