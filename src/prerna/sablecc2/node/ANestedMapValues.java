/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc2.node;

import prerna.sablecc2.analysis.*;

@SuppressWarnings("nls")
public final class ANestedMapValues extends PValues
{
    private PMap _map_;

    public ANestedMapValues()
    {
        // Constructor
    }

    public ANestedMapValues(
        @SuppressWarnings("hiding") PMap _map_)
    {
        // Constructor
        setMap(_map_);

    }

    @Override
    public Object clone()
    {
        return new ANestedMapValues(
            cloneNode(this._map_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANestedMapValues(this);
    }

    public PMap getMap()
    {
        return this._map_;
    }

    public void setMap(PMap node)
    {
        if(this._map_ != null)
        {
            this._map_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._map_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._map_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._map_ == child)
        {
            this._map_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._map_ == oldChild)
        {
            setMap((PMap) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
