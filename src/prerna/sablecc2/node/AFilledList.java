/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc2.node;

import prerna.sablecc2.analysis.*;

@SuppressWarnings("nls")
public final class AFilledList extends PList
{
    private PValuesList _valuesList_;

    public AFilledList()
    {
        // Constructor
    }

    public AFilledList(
        @SuppressWarnings("hiding") PValuesList _valuesList_)
    {
        // Constructor
        setValuesList(_valuesList_);

    }

    @Override
    public Object clone()
    {
        return new AFilledList(
            cloneNode(this._valuesList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFilledList(this);
    }

    public PValuesList getValuesList()
    {
        return this._valuesList_;
    }

    public void setValuesList(PValuesList node)
    {
        if(this._valuesList_ != null)
        {
            this._valuesList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._valuesList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._valuesList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._valuesList_ == child)
        {
            this._valuesList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._valuesList_ == oldChild)
        {
            setValuesList((PValuesList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
