/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc2.node;

import prerna.sablecc2.analysis.*;

@SuppressWarnings("nls")
public final class ALabels extends PLabels
{
    private TLabelid _labelid_;
    private PGenRow _genRow_;

    public ALabels()
    {
        // Constructor
    }

    public ALabels(
        @SuppressWarnings("hiding") TLabelid _labelid_,
        @SuppressWarnings("hiding") PGenRow _genRow_)
    {
        // Constructor
        setLabelid(_labelid_);

        setGenRow(_genRow_);

    }

    @Override
    public Object clone()
    {
        return new ALabels(
            cloneNode(this._labelid_),
            cloneNode(this._genRow_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALabels(this);
    }

    public TLabelid getLabelid()
    {
        return this._labelid_;
    }

    public void setLabelid(TLabelid node)
    {
        if(this._labelid_ != null)
        {
            this._labelid_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._labelid_ = node;
    }

    public PGenRow getGenRow()
    {
        return this._genRow_;
    }

    public void setGenRow(PGenRow node)
    {
        if(this._genRow_ != null)
        {
            this._genRow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._genRow_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._labelid_)
            + toString(this._genRow_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._labelid_ == child)
        {
            this._labelid_ = null;
            return;
        }

        if(this._genRow_ == child)
        {
            this._genRow_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._labelid_ == oldChild)
        {
            setLabelid((TLabelid) newChild);
            return;
        }

        if(this._genRow_ == oldChild)
        {
            setGenRow((PGenRow) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
