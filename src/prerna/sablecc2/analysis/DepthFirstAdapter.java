/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc2.analysis;

import java.util.*;
import prerna.sablecc2.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPConfiguration().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAConfiguration(AConfiguration node)
    {
        defaultIn(node);
    }

    public void outAConfiguration(AConfiguration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConfiguration(AConfiguration node)
    {
        inAConfiguration(node);
        {
            List<PScriptchain> copy = new ArrayList<PScriptchain>(node.getScriptchain());
            for(PScriptchain e : copy)
            {
                e.apply(this);
            }
        }
        outAConfiguration(node);
    }

    public void inAScriptchain(AScriptchain node)
    {
        defaultIn(node);
    }

    public void outAScriptchain(AScriptchain node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScriptchain(AScriptchain node)
    {
        inAScriptchain(node);
        if(node.getScript() != null)
        {
            node.getScript().apply(this);
        }
        {
            List<POtherscript> copy = new ArrayList<POtherscript>(node.getOtherscript());
            for(POtherscript e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAScriptchain(node);
    }

    public void inAFrameopScript(AFrameopScript node)
    {
        defaultIn(node);
    }

    public void outAFrameopScript(AFrameopScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFrameopScript(AFrameopScript node)
    {
        inAFrameopScript(node);
        if(node.getFrameop() != null)
        {
            node.getFrameop().apply(this);
        }
        outAFrameopScript(node);
    }

    public void inAOpScript(AOpScript node)
    {
        defaultIn(node);
    }

    public void outAOpScript(AOpScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpScript(AOpScript node)
    {
        inAOpScript(node);
        if(node.getOperationFormula() != null)
        {
            node.getOperationFormula().apply(this);
        }
        outAOpScript(node);
    }

    public void inAAssignScript(AAssignScript node)
    {
        defaultIn(node);
    }

    public void outAAssignScript(AAssignScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignScript(AAssignScript node)
    {
        inAAssignScript(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignScript(node);
    }

    public void inAJavaOpScript(AJavaOpScript node)
    {
        defaultIn(node);
    }

    public void outAJavaOpScript(AJavaOpScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJavaOpScript(AJavaOpScript node)
    {
        inAJavaOpScript(node);
        if(node.getJavaOp() != null)
        {
            node.getJavaOp().apply(this);
        }
        outAJavaOpScript(node);
    }

    public void inAROpScript(AROpScript node)
    {
        defaultIn(node);
    }

    public void outAROpScript(AROpScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAROpScript(AROpScript node)
    {
        inAROpScript(node);
        if(node.getROp() != null)
        {
            node.getROp().apply(this);
        }
        outAROpScript(node);
    }

    public void inAOtherscript(AOtherscript node)
    {
        defaultIn(node);
    }

    public void outAOtherscript(AOtherscript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherscript(AOtherscript node)
    {
        inAOtherscript(node);
        if(node.getCustom() != null)
        {
            node.getCustom().apply(this);
        }
        if(node.getScript() != null)
        {
            node.getScript().apply(this);
        }
        outAOtherscript(node);
    }

    public void inAAssignment(AAssignment node)
    {
        defaultIn(node);
    }

    public void outAAssignment(AAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignment(AAssignment node)
    {
        inAAssignment(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getPossibleVariables() != null)
        {
            node.getPossibleVariables().apply(this);
        }
        outAAssignment(node);
    }

    public void inAScriptPossibleVariables(AScriptPossibleVariables node)
    {
        defaultIn(node);
    }

    public void outAScriptPossibleVariables(AScriptPossibleVariables node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScriptPossibleVariables(AScriptPossibleVariables node)
    {
        inAScriptPossibleVariables(node);
        if(node.getScriptchain() != null)
        {
            node.getScriptchain().apply(this);
        }
        outAScriptPossibleVariables(node);
    }

    public void inAConstantPossibleVariables(AConstantPossibleVariables node)
    {
        defaultIn(node);
    }

    public void outAConstantPossibleVariables(AConstantPossibleVariables node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantPossibleVariables(AConstantPossibleVariables node)
    {
        inAConstantPossibleVariables(node);
        if(node.getNumberOrLiteral() != null)
        {
            node.getNumberOrLiteral().apply(this);
        }
        outAConstantPossibleVariables(node);
    }

    public void inAGenRow(AGenRow node)
    {
        defaultIn(node);
    }

    public void outAGenRow(AGenRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGenRow(AGenRow node)
    {
        inAGenRow(node);
        if(node.getLBrac() != null)
        {
            node.getLBrac().apply(this);
        }
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        {
            List<POthercol> copy = new ArrayList<POthercol>(node.getOthercol());
            for(POthercol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrac() != null)
        {
            node.getRBrac().apply(this);
        }
        outAGenRow(node);
    }

    public void inAPlainRow(APlainRow node)
    {
        defaultIn(node);
    }

    public void outAPlainRow(APlainRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlainRow(APlainRow node)
    {
        inAPlainRow(node);
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        {
            List<POthercol> copy = new ArrayList<POthercol>(node.getOthercol());
            for(POthercol e : copy)
            {
                e.apply(this);
            }
        }
        outAPlainRow(node);
    }

    public void inAOperationFormula(AOperationFormula node)
    {
        defaultIn(node);
    }

    public void outAOperationFormula(AOperationFormula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperationFormula(AOperationFormula node)
    {
        inAOperationFormula(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPlainRow() != null)
        {
            node.getPlainRow().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getAsop() != null)
        {
            node.getAsop().apply(this);
        }
        outAOperationFormula(node);
    }

    public void inARefColDef(ARefColDef node)
    {
        defaultIn(node);
    }

    public void outARefColDef(ARefColDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARefColDef(ARefColDef node)
    {
        inARefColDef(node);
        if(node.getRcol() != null)
        {
            node.getRcol().apply(this);
        }
        outARefColDef(node);
    }

    public void inALiteralColDef(ALiteralColDef node)
    {
        defaultIn(node);
    }

    public void outALiteralColDef(ALiteralColDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralColDef(ALiteralColDef node)
    {
        inALiteralColDef(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralColDef(node);
    }

    public void inAExprColDef(AExprColDef node)
    {
        defaultIn(node);
    }

    public void outAExprColDef(AExprColDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprColDef(AExprColDef node)
    {
        inAExprColDef(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprColDef(node);
    }

    public void inADotcolColDef(ADotcolColDef node)
    {
        defaultIn(node);
    }

    public void outADotcolColDef(ADotcolColDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADotcolColDef(ADotcolColDef node)
    {
        inADotcolColDef(node);
        if(node.getDotcol() != null)
        {
            node.getDotcol().apply(this);
        }
        outADotcolColDef(node);
    }

    public void inAFrameopColDef(AFrameopColDef node)
    {
        defaultIn(node);
    }

    public void outAFrameopColDef(AFrameopColDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFrameopColDef(AFrameopColDef node)
    {
        inAFrameopColDef(node);
        if(node.getFrameop() != null)
        {
            node.getFrameop().apply(this);
        }
        outAFrameopColDef(node);
    }

    public void inAFilterColDef(AFilterColDef node)
    {
        defaultIn(node);
    }

    public void outAFilterColDef(AFilterColDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilterColDef(AFilterColDef node)
    {
        inAFilterColDef(node);
        if(node.getFilter() != null)
        {
            node.getFilter().apply(this);
        }
        outAFilterColDef(node);
    }

    public void inAPropColDef(APropColDef node)
    {
        defaultIn(node);
    }

    public void outAPropColDef(APropColDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPropColDef(APropColDef node)
    {
        inAPropColDef(node);
        if(node.getProp() != null)
        {
            node.getProp().apply(this);
        }
        outAPropColDef(node);
    }

    public void inARelationColDef(ARelationColDef node)
    {
        defaultIn(node);
    }

    public void outARelationColDef(ARelationColDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationColDef(ARelationColDef node)
    {
        inARelationColDef(node);
        if(node.getRelationship() != null)
        {
            node.getRelationship().apply(this);
        }
        outARelationColDef(node);
    }

    public void inAOthercol(AOthercol node)
    {
        defaultIn(node);
    }

    public void outAOthercol(AOthercol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOthercol(AOthercol node)
    {
        inAOthercol(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        outAOthercol(node);
    }

    public void inARcol(ARcol node)
    {
        defaultIn(node);
    }

    public void outARcol(ARcol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARcol(ARcol node)
    {
        inARcol(node);
        if(node.getFrameprefix() != null)
        {
            node.getFrameprefix().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outARcol(node);
    }

    public void inADotcol(ADotcol node)
    {
        defaultIn(node);
    }

    public void outADotcol(ADotcol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADotcol(ADotcol node)
    {
        inADotcol(node);
        if(node.getFrameid() != null)
        {
            node.getFrameid().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getColumnName() != null)
        {
            node.getColumnName().apply(this);
        }
        outADotcol(node);
    }

    public void inALiteral(ALiteral node)
    {
        defaultIn(node);
    }

    public void outALiteral(ALiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteral(ALiteral node)
    {
        inALiteral(node);
        if(node.getWord() != null)
        {
            node.getWord().apply(this);
        }
        outALiteral(node);
    }

    public void inADecimal(ADecimal node)
    {
        defaultIn(node);
    }

    public void outADecimal(ADecimal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecimal(ADecimal node)
    {
        inADecimal(node);
        if(node.getWhole() != null)
        {
            node.getWhole().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getFraction() != null)
        {
            node.getFraction().apply(this);
        }
        outADecimal(node);
    }

    public void inANumNumberOrLiteral(ANumNumberOrLiteral node)
    {
        defaultIn(node);
    }

    public void outANumNumberOrLiteral(ANumNumberOrLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumNumberOrLiteral(ANumNumberOrLiteral node)
    {
        inANumNumberOrLiteral(node);
        if(node.getDecimal() != null)
        {
            node.getDecimal().apply(this);
        }
        outANumNumberOrLiteral(node);
    }

    public void inAStrNumberOrLiteral(AStrNumberOrLiteral node)
    {
        defaultIn(node);
    }

    public void outAStrNumberOrLiteral(AStrNumberOrLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrNumberOrLiteral(AStrNumberOrLiteral node)
    {
        inAStrNumberOrLiteral(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outAStrNumberOrLiteral(node);
    }

    public void inAFormulaNumberOrLiteral(AFormulaNumberOrLiteral node)
    {
        defaultIn(node);
    }

    public void outAFormulaNumberOrLiteral(AFormulaNumberOrLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormulaNumberOrLiteral(AFormulaNumberOrLiteral node)
    {
        inAFormulaNumberOrLiteral(node);
        if(node.getFormula() != null)
        {
            node.getFormula().apply(this);
        }
        outAFormulaNumberOrLiteral(node);
    }

    public void inAProp(AProp node)
    {
        defaultIn(node);
    }

    public void outAProp(AProp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProp(AProp node)
    {
        inAProp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getNumberOrLiteral() != null)
        {
            node.getNumberOrLiteral().apply(this);
        }
        outAProp(node);
    }

    public void inANumberTerm(ANumberTerm node)
    {
        defaultIn(node);
    }

    public void outANumberTerm(ANumberTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        inANumberTerm(node);
        if(node.getDecimal() != null)
        {
            node.getDecimal().apply(this);
        }
        outANumberTerm(node);
    }

    public void inAFormulaTerm(AFormulaTerm node)
    {
        defaultIn(node);
    }

    public void outAFormulaTerm(AFormulaTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormulaTerm(AFormulaTerm node)
    {
        inAFormulaTerm(node);
        if(node.getFormula() != null)
        {
            node.getFormula().apply(this);
        }
        outAFormulaTerm(node);
    }

    public void inAOpformulaTerm(AOpformulaTerm node)
    {
        defaultIn(node);
    }

    public void outAOpformulaTerm(AOpformulaTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpformulaTerm(AOpformulaTerm node)
    {
        inAOpformulaTerm(node);
        if(node.getOperationFormula() != null)
        {
            node.getOperationFormula().apply(this);
        }
        outAOpformulaTerm(node);
    }

    public void inABooleanTerm(ABooleanTerm node)
    {
        defaultIn(node);
    }

    public void outABooleanTerm(ABooleanTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanTerm(ABooleanTerm node)
    {
        inABooleanTerm(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanTerm(node);
    }

    public void inAColTerm(AColTerm node)
    {
        defaultIn(node);
    }

    public void outAColTerm(AColTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColTerm(AColTerm node)
    {
        inAColTerm(node);
        if(node.getCol() != null)
        {
            node.getCol().apply(this);
        }
        outAColTerm(node);
    }

    public void inACsvTerm(ACsvTerm node)
    {
        defaultIn(node);
    }

    public void outACsvTerm(ACsvTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACsvTerm(ACsvTerm node)
    {
        inACsvTerm(node);
        if(node.getGenRow() != null)
        {
            node.getGenRow().apply(this);
        }
        outACsvTerm(node);
    }

    public void inATermExpr(ATermExpr node)
    {
        defaultIn(node);
    }

    public void outATermExpr(ATermExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpr(ATermExpr node)
    {
        inATermExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpr(node);
    }

    public void inAPlusExpr(APlusExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusExpr(APlusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpr(APlusExpr node)
    {
        inAPlusExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAPlusExpr(node);
    }

    public void inAMinusExpr(AMinusExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusExpr(AMinusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpr(AMinusExpr node)
    {
        inAMinusExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMinusExpr(node);
    }

    public void inAMultExpr(AMultExpr node)
    {
        defaultIn(node);
    }

    public void outAMultExpr(AMultExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpr(AMultExpr node)
    {
        inAMultExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMultExpr(node);
    }

    public void inADivExpr(ADivExpr node)
    {
        defaultIn(node);
    }

    public void outADivExpr(ADivExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpr(ADivExpr node)
    {
        inADivExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivExpr(node);
    }

    public void inAModExpr(AModExpr node)
    {
        defaultIn(node);
    }

    public void outAModExpr(AModExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExpr(AModExpr node)
    {
        inAModExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAModExpr(node);
    }

    public void inAEExprExpr(AEExprExpr node)
    {
        defaultIn(node);
    }

    public void outAEExprExpr(AEExprExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExprExpr(AEExprExpr node)
    {
        inAEExprExpr(node);
        if(node.getExtendedExpr() != null)
        {
            node.getExtendedExpr().apply(this);
        }
        outAEExprExpr(node);
    }

    public void inAFormula(AFormula node)
    {
        defaultIn(node);
    }

    public void outAFormula(AFormula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormula(AFormula node)
    {
        inAFormula(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFormula(node);
    }

    public void inAExtendedExpr(AExtendedExpr node)
    {
        defaultIn(node);
    }

    public void outAExtendedExpr(AExtendedExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendedExpr(AExtendedExpr node)
    {
        inAExtendedExpr(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getGroup() != null)
        {
            node.getGroup().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAExtendedExpr(node);
    }

    public void inASelectors(ASelectors node)
    {
        defaultIn(node);
    }

    public void outASelectors(ASelectors node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectors(ASelectors node)
    {
        inASelectors(node);
        if(node.getSelectorid() != null)
        {
            node.getSelectorid().apply(this);
        }
        if(node.getGenRow() != null)
        {
            node.getGenRow().apply(this);
        }
        outASelectors(node);
    }

    public void inAProjectors(AProjectors node)
    {
        defaultIn(node);
    }

    public void outAProjectors(AProjectors node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProjectors(AProjectors node)
    {
        inAProjectors(node);
        if(node.getProjectid() != null)
        {
            node.getProjectid().apply(this);
        }
        if(node.getGenRow() != null)
        {
            node.getGenRow().apply(this);
        }
        outAProjectors(node);
    }

    public void inALabels(ALabels node)
    {
        defaultIn(node);
    }

    public void outALabels(ALabels node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabels(ALabels node)
    {
        inALabels(node);
        if(node.getLabelid() != null)
        {
            node.getLabelid().apply(this);
        }
        if(node.getGenRow() != null)
        {
            node.getGenRow().apply(this);
        }
        outALabels(node);
    }

    public void inAProps(AProps node)
    {
        defaultIn(node);
    }

    public void outAProps(AProps node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProps(AProps node)
    {
        inAProps(node);
        if(node.getPropid() != null)
        {
            node.getPropid().apply(this);
        }
        if(node.getGenRow() != null)
        {
            node.getGenRow().apply(this);
        }
        outAProps(node);
    }

    public void inATooltips(ATooltips node)
    {
        defaultIn(node);
    }

    public void outATooltips(ATooltips node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATooltips(ATooltips node)
    {
        inATooltips(node);
        if(node.getTooltipid() != null)
        {
            node.getTooltipid().apply(this);
        }
        if(node.getGenRow() != null)
        {
            node.getGenRow().apply(this);
        }
        outATooltips(node);
    }

    public void inAJoins(AJoins node)
    {
        defaultIn(node);
    }

    public void outAJoins(AJoins node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJoins(AJoins node)
    {
        inAJoins(node);
        if(node.getJoinid() != null)
        {
            node.getJoinid().apply(this);
        }
        if(node.getGenRow() != null)
        {
            node.getGenRow().apply(this);
        }
        outAJoins(node);
    }

    public void inAGeneric(AGeneric node)
    {
        defaultIn(node);
    }

    public void outAGeneric(AGeneric node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeneric(AGeneric node)
    {
        inAGeneric(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getGenRow() != null)
        {
            node.getGenRow().apply(this);
        }
        outAGeneric(node);
    }

    public void inASelectNoun(ASelectNoun node)
    {
        defaultIn(node);
    }

    public void outASelectNoun(ASelectNoun node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectNoun(ASelectNoun node)
    {
        inASelectNoun(node);
        if(node.getSelectors() != null)
        {
            node.getSelectors().apply(this);
        }
        outASelectNoun(node);
    }

    public void inAProjectNoun(AProjectNoun node)
    {
        defaultIn(node);
    }

    public void outAProjectNoun(AProjectNoun node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProjectNoun(AProjectNoun node)
    {
        inAProjectNoun(node);
        if(node.getProjectors() != null)
        {
            node.getProjectors().apply(this);
        }
        outAProjectNoun(node);
    }

    public void inALabelsNoun(ALabelsNoun node)
    {
        defaultIn(node);
    }

    public void outALabelsNoun(ALabelsNoun node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelsNoun(ALabelsNoun node)
    {
        inALabelsNoun(node);
        if(node.getLabels() != null)
        {
            node.getLabels().apply(this);
        }
        outALabelsNoun(node);
    }

    public void inATooltipsNoun(ATooltipsNoun node)
    {
        defaultIn(node);
    }

    public void outATooltipsNoun(ATooltipsNoun node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATooltipsNoun(ATooltipsNoun node)
    {
        inATooltipsNoun(node);
        if(node.getTooltips() != null)
        {
            node.getTooltips().apply(this);
        }
        outATooltipsNoun(node);
    }

    public void inAOthersNoun(AOthersNoun node)
    {
        defaultIn(node);
    }

    public void outAOthersNoun(AOthersNoun node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOthersNoun(AOthersNoun node)
    {
        inAOthersNoun(node);
        if(node.getGeneric() != null)
        {
            node.getGeneric().apply(this);
        }
        outAOthersNoun(node);
    }

    public void inAPropsNoun(APropsNoun node)
    {
        defaultIn(node);
    }

    public void outAPropsNoun(APropsNoun node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPropsNoun(APropsNoun node)
    {
        inAPropsNoun(node);
        if(node.getProps() != null)
        {
            node.getProps().apply(this);
        }
        outAPropsNoun(node);
    }

    public void inACodeNoun(ACodeNoun node)
    {
        defaultIn(node);
    }

    public void outACodeNoun(ACodeNoun node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACodeNoun(ACodeNoun node)
    {
        inACodeNoun(node);
        if(node.getCodeAlpha() != null)
        {
            node.getCodeAlpha().apply(this);
        }
        outACodeNoun(node);
    }

    public void inAOthernoun(AOthernoun node)
    {
        defaultIn(node);
    }

    public void outAOthernoun(AOthernoun node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOthernoun(AOthernoun node)
    {
        inAOthernoun(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getNoun() != null)
        {
            node.getNoun().apply(this);
        }
        outAOthernoun(node);
    }

    public void inAFrameop(AFrameop node)
    {
        defaultIn(node);
    }

    public void outAFrameop(AFrameop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFrameop(AFrameop node)
    {
        inAFrameop(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getNoun() != null)
        {
            node.getNoun().apply(this);
        }
        {
            List<POthernoun> copy = new ArrayList<POthernoun>(node.getOthernoun());
            for(POthernoun e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getAsop() != null)
        {
            node.getAsop().apply(this);
        }
        outAFrameop(node);
    }

    public void inAAsop(AAsop node)
    {
        defaultIn(node);
    }

    public void outAAsop(AAsop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsop(AAsop node)
    {
        inAAsop(node);
        if(node.getAsOp() != null)
        {
            node.getAsOp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getGenRow() != null)
        {
            node.getGenRow().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAAsop(node);
    }

    public void inAFilter(AFilter node)
    {
        defaultIn(node);
    }

    public void outAFilter(AFilter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilter(AFilter node)
    {
        inAFilter(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getLcol() != null)
        {
            node.getLcol().apply(this);
        }
        if(node.getComparator() != null)
        {
            node.getComparator().apply(this);
        }
        if(node.getRcol() != null)
        {
            node.getRcol().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFilter(node);
    }

    public void inARelationship(ARelationship node)
    {
        defaultIn(node);
    }

    public void outARelationship(ARelationship node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationship(ARelationship node)
    {
        inARelationship(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getLcol() != null)
        {
            node.getLcol().apply(this);
        }
        if(node.getRelType() != null)
        {
            node.getRelType().apply(this);
        }
        if(node.getRcol() != null)
        {
            node.getRcol().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outARelationship(node);
    }

    public void inAJavaOp(AJavaOp node)
    {
        defaultIn(node);
    }

    public void outAJavaOp(AJavaOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJavaOp(AJavaOp node)
    {
        inAJavaOp(node);
        if(node.getJava() != null)
        {
            node.getJava().apply(this);
        }
        outAJavaOp(node);
    }

    public void inAROp(AROp node)
    {
        defaultIn(node);
    }

    public void outAROp(AROp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAROp(AROp node)
    {
        inAROp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAROp(node);
    }

    public void inAScriptOperationOrVar(AScriptOperationOrVar node)
    {
        defaultIn(node);
    }

    public void outAScriptOperationOrVar(AScriptOperationOrVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScriptOperationOrVar(AScriptOperationOrVar node)
    {
        inAScriptOperationOrVar(node);
        if(node.getScript() != null)
        {
            node.getScript().apply(this);
        }
        outAScriptOperationOrVar(node);
    }

    public void inAVarOperationOrVar(AVarOperationOrVar node)
    {
        defaultIn(node);
    }

    public void outAVarOperationOrVar(AVarOperationOrVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarOperationOrVar(AVarOperationOrVar node)
    {
        inAVarOperationOrVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarOperationOrVar(node);
    }

    public void inAScriptOperationOrIfblock(AScriptOperationOrIfblock node)
    {
        defaultIn(node);
    }

    public void outAScriptOperationOrIfblock(AScriptOperationOrIfblock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScriptOperationOrIfblock(AScriptOperationOrIfblock node)
    {
        inAScriptOperationOrIfblock(node);
        if(node.getScript() != null)
        {
            node.getScript().apply(this);
        }
        outAScriptOperationOrIfblock(node);
    }

    public void inAIfblock(AIfblock node)
    {
        defaultIn(node);
    }

    public void outAIfblock(AIfblock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfblock(AIfblock node)
    {
        inAIfblock(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getOperationOrVar() != null)
        {
            node.getOperationOrVar().apply(this);
        }
        if(node.getComma1() != null)
        {
            node.getComma1().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getComma2() != null)
        {
            node.getComma2().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAIfblock(node);
    }
}
