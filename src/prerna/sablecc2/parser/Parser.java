/* This file was generated by SableCC (http://www.sablecc.org/). */

package prerna.sablecc2.parser;

import prerna.sablecc2.lexer.*;
import prerna.sablecc2.node.*;
import prerna.sablecc2.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PConfiguration node1 = (PConfiguration) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAconfiguration1Configuration */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAconfiguration2Configuration */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AOutputRoutine */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAssignRoutine */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAscriptchain1Scriptchain */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAscriptchain2Scriptchain */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AOtherscript */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AAssignment */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce AExpressionScript */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list, false);
            }
            break;
            case 9: /* reduce AEmbeddedAssignmentScript */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce AEmbeddedAssignment */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce ATermExpr */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list, false);
            }
            break;
            case 12: /* reduce APlusExpr */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce AMinusExpr */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce AMultExpr */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce ADivExpr */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce AModExpr */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce APowExpr */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce AScalarTerm */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce AFormulaTerm */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list, false);
            }
            break;
            case 20: /* reduce AOpformulaTerm */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce AFrameopTerm */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce AJavaOpTerm */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce AROpTerm */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce AListTerm */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list, false);
            }
            break;
            case 25: /* reduce ACsvTerm */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list, false);
            }
            break;
            case 26: /* reduce AFormula */
            {
                ArrayList<Object> list = new26();
                push(goTo(9), list, false);
            }
            break;
            case 27: /* reduce AList */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list, false);
            }
            break;
            case 28: /* reduce AOtherExpr */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list, false);
            }
            break;
            case 29: /* reduce AExprColDef */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list, false);
            }
            break;
            case 30: /* reduce ARefColDef */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list, false);
            }
            break;
            case 31: /* reduce ADotcolColDef */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list, false);
            }
            break;
            case 32: /* reduce AFilterColDef */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list, false);
            }
            break;
            case 33: /* reduce APropColDef */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list, false);
            }
            break;
            case 34: /* reduce ARelationColDef */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list, false);
            }
            break;
            case 35: /* reduce AOthercol */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list, false);
            }
            break;
            case 36: /* reduce AAgenrow1GenRow */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list, false);
            }
            break;
            case 37: /* reduce AAgenrow2GenRow */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list, false);
            }
            break;
            case 38: /* reduce AAplainrow1PlainRow */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list, false);
            }
            break;
            case 39: /* reduce AAplainrow2PlainRow */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list, false);
            }
            break;
            case 40: /* reduce AAplainrow3PlainRow */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list, false);
            }
            break;
            case 41: /* reduce AAplainrow4PlainRow */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list, false);
            }
            break;
            case 42: /* reduce AAoperationformula1OperationFormula */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list, false);
            }
            break;
            case 43: /* reduce AAoperationformula2OperationFormula */
            {
                ArrayList<Object> list = new43();
                push(goTo(16), list, false);
            }
            break;
            case 44: /* reduce ARcol */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list, false);
            }
            break;
            case 45: /* reduce ADotcol */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list, false);
            }
            break;
            case 46: /* reduce AMinusPosOrNeg */
            {
                ArrayList<Object> list = new46();
                push(goTo(19), list, false);
            }
            break;
            case 47: /* reduce APlusPosOrNeg */
            {
                ArrayList<Object> list = new47();
                push(goTo(19), list, false);
            }
            break;
            case 48: /* reduce AAdecimal1Decimal */
            {
                ArrayList<Object> list = new48();
                push(goTo(20), list, false);
            }
            break;
            case 49: /* reduce AAdecimal2Decimal */
            {
                ArrayList<Object> list = new49();
                push(goTo(20), list, false);
            }
            break;
            case 50: /* reduce AAdecimal3Decimal */
            {
                ArrayList<Object> list = new50();
                push(goTo(20), list, false);
            }
            break;
            case 51: /* reduce AAdecimal4Decimal */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list, false);
            }
            break;
            case 52: /* reduce AAdecimal5Decimal */
            {
                ArrayList<Object> list = new52();
                push(goTo(20), list, false);
            }
            break;
            case 53: /* reduce AAdecimal6Decimal */
            {
                ArrayList<Object> list = new53();
                push(goTo(20), list, false);
            }
            break;
            case 54: /* reduce AAdecimal7Decimal */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list, false);
            }
            break;
            case 55: /* reduce AAdecimal8Decimal */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list, false);
            }
            break;
            case 56: /* reduce AWordWordOrId */
            {
                ArrayList<Object> list = new56();
                push(goTo(21), list, false);
            }
            break;
            case 57: /* reduce AIdWordOrId */
            {
                ArrayList<Object> list = new57();
                push(goTo(21), list, false);
            }
            break;
            case 58: /* reduce ANumScalar */
            {
                ArrayList<Object> list = new58();
                push(goTo(22), list, false);
            }
            break;
            case 59: /* reduce AWordOrIdScalar */
            {
                ArrayList<Object> list = new59();
                push(goTo(22), list, false);
            }
            break;
            case 60: /* reduce ABooleanScalar */
            {
                ArrayList<Object> list = new60();
                push(goTo(22), list, false);
            }
            break;
            case 61: /* reduce AProp */
            {
                ArrayList<Object> list = new61();
                push(goTo(23), list, false);
            }
            break;
            case 62: /* reduce ASelectors */
            {
                ArrayList<Object> list = new62();
                push(goTo(24), list, false);
            }
            break;
            case 63: /* reduce AProjectors */
            {
                ArrayList<Object> list = new63();
                push(goTo(25), list, false);
            }
            break;
            case 64: /* reduce ALabels */
            {
                ArrayList<Object> list = new64();
                push(goTo(26), list, false);
            }
            break;
            case 65: /* reduce AProps */
            {
                ArrayList<Object> list = new65();
                push(goTo(27), list, false);
            }
            break;
            case 66: /* reduce ATooltips */
            {
                ArrayList<Object> list = new66();
                push(goTo(28), list, false);
            }
            break;
            case 67: /* reduce AJoins */
            {
                ArrayList<Object> list = new67();
                push(goTo(29), list, false);
            }
            break;
            case 68: /* reduce AGeneric */
            {
                ArrayList<Object> list = new68();
                push(goTo(30), list, false);
            }
            break;
            case 69: /* reduce ASelectNoun */
            {
                ArrayList<Object> list = new69();
                push(goTo(31), list, false);
            }
            break;
            case 70: /* reduce AProjectNoun */
            {
                ArrayList<Object> list = new70();
                push(goTo(31), list, false);
            }
            break;
            case 71: /* reduce ALabelsNoun */
            {
                ArrayList<Object> list = new71();
                push(goTo(31), list, false);
            }
            break;
            case 72: /* reduce ATooltipsNoun */
            {
                ArrayList<Object> list = new72();
                push(goTo(31), list, false);
            }
            break;
            case 73: /* reduce AOthersNoun */
            {
                ArrayList<Object> list = new73();
                push(goTo(31), list, false);
            }
            break;
            case 74: /* reduce APropsNoun */
            {
                ArrayList<Object> list = new74();
                push(goTo(31), list, false);
            }
            break;
            case 75: /* reduce ACodeNoun */
            {
                ArrayList<Object> list = new75();
                push(goTo(31), list, false);
            }
            break;
            case 76: /* reduce AOthernoun */
            {
                ArrayList<Object> list = new76();
                push(goTo(32), list, false);
            }
            break;
            case 77: /* reduce AAframeop1Frameop */
            {
                ArrayList<Object> list = new77();
                push(goTo(33), list, false);
            }
            break;
            case 78: /* reduce AAframeop2Frameop */
            {
                ArrayList<Object> list = new78();
                push(goTo(33), list, false);
            }
            break;
            case 79: /* reduce AAframeop3Frameop */
            {
                ArrayList<Object> list = new79();
                push(goTo(33), list, false);
            }
            break;
            case 80: /* reduce AAframeop4Frameop */
            {
                ArrayList<Object> list = new80();
                push(goTo(33), list, false);
            }
            break;
            case 81: /* reduce AAsop */
            {
                ArrayList<Object> list = new81();
                push(goTo(34), list, false);
            }
            break;
            case 82: /* reduce AFilter */
            {
                ArrayList<Object> list = new82();
                push(goTo(35), list, false);
            }
            break;
            case 83: /* reduce ARelationship */
            {
                ArrayList<Object> list = new83();
                push(goTo(36), list, false);
            }
            break;
            case 84: /* reduce AJavaOp */
            {
                ArrayList<Object> list = new84();
                push(goTo(37), list, false);
            }
            break;
            case 85: /* reduce AROp */
            {
                ArrayList<Object> list = new85();
                push(goTo(38), list, false);
            }
            break;
            case 86: /* reduce ATerminal$Routine */
            {
                ArrayList<Object> list = new86();
                push(goTo(39), list, true);
            }
            break;
            case 87: /* reduce ANonTerminal$Routine */
            {
                ArrayList<Object> list = new87();
                push(goTo(39), list, true);
            }
            break;
            case 88: /* reduce ATerminal$Otherscript */
            {
                ArrayList<Object> list = new88();
                push(goTo(40), list, true);
            }
            break;
            case 89: /* reduce ANonTerminal$Otherscript */
            {
                ArrayList<Object> list = new89();
                push(goTo(40), list, true);
            }
            break;
            case 90: /* reduce ATerminal$OtherExpr */
            {
                ArrayList<Object> list = new90();
                push(goTo(41), list, true);
            }
            break;
            case 91: /* reduce ANonTerminal$OtherExpr */
            {
                ArrayList<Object> list = new91();
                push(goTo(41), list, true);
            }
            break;
            case 92: /* reduce ATerminal$Othercol */
            {
                ArrayList<Object> list = new92();
                push(goTo(42), list, true);
            }
            break;
            case 93: /* reduce ANonTerminal$Othercol */
            {
                ArrayList<Object> list = new93();
                push(goTo(42), list, true);
            }
            break;
            case 94: /* reduce ATerminal$Othernoun */
            {
                ArrayList<Object> list = new94();
                push(goTo(43), list, true);
            }
            break;
            case 95: /* reduce ANonTerminal$Othernoun */
            {
                ArrayList<Object> list = new95();
                push(goTo(43), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAconfiguration1Configuration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PConfiguration pconfigurationNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pconfigurationNode1 = new AConfiguration(listNode2);
        }
	nodeList.add(pconfigurationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAconfiguration2Configuration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConfiguration pconfigurationNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pconfigurationNode1 = new AConfiguration(listNode3);
        }
	nodeList.add(pconfigurationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AOutputRoutine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRoutine proutineNode1;
        {
            // Block
        PScriptchain pscriptchainNode2;
        TSemicolon tsemicolonNode3;
        pscriptchainNode2 = (PScriptchain)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        proutineNode1 = new AOutputRoutine(pscriptchainNode2, tsemicolonNode3);
        }
	nodeList.add(proutineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAssignRoutine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRoutine proutineNode1;
        {
            // Block
        PAssignment passignmentNode2;
        TSemicolon tsemicolonNode3;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        proutineNode1 = new AAssignRoutine(passignmentNode2, tsemicolonNode3);
        }
	nodeList.add(proutineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAscriptchain1Scriptchain */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PScriptchain pscriptchainNode1;
        {
            // Block
        PScript pscriptNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pscriptNode2 = (PScript)nodeArrayList1.get(0);
        {
            // Block
        }

        pscriptchainNode1 = new AScriptchain(pscriptNode2, listNode3);
        }
	nodeList.add(pscriptchainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAscriptchain2Scriptchain */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PScriptchain pscriptchainNode1;
        {
            // Block
        PScript pscriptNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pscriptNode2 = (PScript)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pscriptchainNode1 = new AScriptchain(pscriptNode2, listNode4);
        }
	nodeList.add(pscriptchainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AOtherscript */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtherscript potherscriptNode1;
        {
            // Block
        TCustom tcustomNode2;
        PScript pscriptNode3;
        tcustomNode2 = (TCustom)nodeArrayList1.get(0);
        pscriptNode3 = (PScript)nodeArrayList2.get(0);

        potherscriptNode1 = new AOtherscript(tcustomNode2, pscriptNode3);
        }
	nodeList.add(potherscriptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        PWordOrId pwordoridNode2;
        TEqual tequalNode3;
        PScriptchain pscriptchainNode4;
        pwordoridNode2 = (PWordOrId)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pscriptchainNode4 = (PScriptchain)nodeArrayList3.get(0);

        passignmentNode1 = new AAssignment(pwordoridNode2, tequalNode3, pscriptchainNode4);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AExpressionScript */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PScript pscriptNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pscriptNode1 = new AExpressionScript(pexprNode2);
        }
	nodeList.add(pscriptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AEmbeddedAssignmentScript */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PScript pscriptNode1;
        {
            // Block
        PEmbeddedAssignment pembeddedassignmentNode2;
        pembeddedassignmentNode2 = (PEmbeddedAssignment)nodeArrayList1.get(0);

        pscriptNode1 = new AEmbeddedAssignmentScript(pembeddedassignmentNode2);
        }
	nodeList.add(pscriptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AEmbeddedAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEmbeddedAssignment pembeddedassignmentNode1;
        {
            // Block
        TLPar tlparNode2;
        TId tidNode3;
        TEqual tequalNode4;
        PScript pscriptNode5;
        TRPar trparNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tequalNode4 = (TEqual)nodeArrayList3.get(0);
        pscriptNode5 = (PScript)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        pembeddedassignmentNode1 = new AEmbeddedAssignment(tlparNode2, tidNode3, tequalNode4, pscriptNode5, trparNode6);
        }
	nodeList.add(pembeddedassignmentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ATermExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexprNode1 = new ATermExpr(ptermNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce APlusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        TPlus tplusNode3;
        PExpr pexprNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new APlusExpr(ptermNode2, tplusNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AMinusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        TMinus tminusNode3;
        PExpr pexprNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMinusExpr(ptermNode2, tminusNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AMultExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        TMult tmultNode3;
        PExpr pexprNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultExpr(ptermNode2, tmultNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ADivExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        TDiv tdivNode3;
        PExpr pexprNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivExpr(ptermNode2, tdivNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AModExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        TMod tmodNode3;
        PExpr pexprNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AModExpr(ptermNode2, tmodNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce APowExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        TPow tpowNode3;
        PExpr pexprNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tpowNode3 = (TPow)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new APowExpr(ptermNode2, tpowNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AScalarTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PScalar pscalarNode2;
        pscalarNode2 = (PScalar)nodeArrayList1.get(0);

        ptermNode1 = new AScalarTerm(pscalarNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AFormulaTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFormula pformulaNode2;
        pformulaNode2 = (PFormula)nodeArrayList1.get(0);

        ptermNode1 = new AFormulaTerm(pformulaNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AOpformulaTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        POperationFormula poperationformulaNode2;
        poperationformulaNode2 = (POperationFormula)nodeArrayList1.get(0);

        ptermNode1 = new AOpformulaTerm(poperationformulaNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AFrameopTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFrameop pframeopNode2;
        pframeopNode2 = (PFrameop)nodeArrayList1.get(0);

        ptermNode1 = new AFrameopTerm(pframeopNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AJavaOpTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PJavaOp pjavaopNode2;
        pjavaopNode2 = (PJavaOp)nodeArrayList1.get(0);

        ptermNode1 = new AJavaOpTerm(pjavaopNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AROpTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PROp propNode2;
        propNode2 = (PROp)nodeArrayList1.get(0);

        ptermNode1 = new AROpTerm(propNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AListTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PList plistNode2;
        plistNode2 = (PList)nodeArrayList1.get(0);

        ptermNode1 = new AListTerm(plistNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ACsvTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PGenRow pgenrowNode2;
        pgenrowNode2 = (PGenRow)nodeArrayList1.get(0);

        ptermNode1 = new ACsvTerm(pgenrowNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AFormula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormula pformulaNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pformulaNode1 = new AFormula(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pformulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PList plistNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRPar trparNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trparNode6 = (TRPar)nodeArrayList4.get(0);

        plistNode1 = new AList(tlparNode2, pexprNode3, listNode5, trparNode6);
        }
	nodeList.add(plistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AOtherExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtherExpr potherexprNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpr pexprNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        potherexprNode1 = new AOtherExpr(tcommaNode2, pexprNode3);
        }
	nodeList.add(potherexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AExprColDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PColDef pcoldefNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pcoldefNode1 = new AExprColDef(pexprNode2);
        }
	nodeList.add(pcoldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ARefColDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PColDef pcoldefNode1;
        {
            // Block
        PRcol prcolNode2;
        prcolNode2 = (PRcol)nodeArrayList1.get(0);

        pcoldefNode1 = new ARefColDef(prcolNode2);
        }
	nodeList.add(pcoldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ADotcolColDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PColDef pcoldefNode1;
        {
            // Block
        PDotcol pdotcolNode2;
        pdotcolNode2 = (PDotcol)nodeArrayList1.get(0);

        pcoldefNode1 = new ADotcolColDef(pdotcolNode2);
        }
	nodeList.add(pcoldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AFilterColDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PColDef pcoldefNode1;
        {
            // Block
        PFilter pfilterNode2;
        pfilterNode2 = (PFilter)nodeArrayList1.get(0);

        pcoldefNode1 = new AFilterColDef(pfilterNode2);
        }
	nodeList.add(pcoldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce APropColDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PColDef pcoldefNode1;
        {
            // Block
        PProp ppropNode2;
        ppropNode2 = (PProp)nodeArrayList1.get(0);

        pcoldefNode1 = new APropColDef(ppropNode2);
        }
	nodeList.add(pcoldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ARelationColDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PColDef pcoldefNode1;
        {
            // Block
        PRelationship prelationshipNode2;
        prelationshipNode2 = (PRelationship)nodeArrayList1.get(0);

        pcoldefNode1 = new ARelationColDef(prelationshipNode2);
        }
	nodeList.add(pcoldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AOthercol */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POthercol pothercolNode1;
        {
            // Block
        TComma tcommaNode2;
        PColDef pcoldefNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pcoldefNode3 = (PColDef)nodeArrayList2.get(0);

        pothercolNode1 = new AOthercol(tcommaNode2, pcoldefNode3);
        }
	nodeList.add(pothercolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAgenrow1GenRow */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGenRow pgenrowNode1;
        {
            // Block
        TLBrac tlbracNode2;
        PColDef pcoldefNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRBrac trbracNode5;
        tlbracNode2 = (TLBrac)nodeArrayList1.get(0);
        pcoldefNode3 = (PColDef)nodeArrayList2.get(0);
        {
            // Block
        }
        trbracNode5 = (TRBrac)nodeArrayList3.get(0);

        pgenrowNode1 = new AGenRow(tlbracNode2, pcoldefNode3, listNode4, trbracNode5);
        }
	nodeList.add(pgenrowNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAgenrow2GenRow */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGenRow pgenrowNode1;
        {
            // Block
        TLBrac tlbracNode2;
        PColDef pcoldefNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRBrac trbracNode6;
        tlbracNode2 = (TLBrac)nodeArrayList1.get(0);
        pcoldefNode3 = (PColDef)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbracNode6 = (TRBrac)nodeArrayList4.get(0);

        pgenrowNode1 = new AGenRow(tlbracNode2, pcoldefNode3, listNode5, trbracNode6);
        }
	nodeList.add(pgenrowNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAplainrow1PlainRow */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPlainRow pplainrowNode1;
        {
            // Block
        TLPar tlparNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRPar trparNode5;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        {
            // Block
        }
        trparNode5 = (TRPar)nodeArrayList2.get(0);

        pplainrowNode1 = new APlainRow(tlparNode2, null, listNode4, trparNode5);
        }
	nodeList.add(pplainrowNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAplainrow2PlainRow */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPlainRow pplainrowNode1;
        {
            // Block
        TLPar tlparNode2;
        PColDef pcoldefNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRPar trparNode5;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcoldefNode3 = (PColDef)nodeArrayList2.get(0);
        {
            // Block
        }
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pplainrowNode1 = new APlainRow(tlparNode2, pcoldefNode3, listNode4, trparNode5);
        }
	nodeList.add(pplainrowNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAplainrow3PlainRow */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPlainRow pplainrowNode1;
        {
            // Block
        TLPar tlparNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRPar trparNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trparNode6 = (TRPar)nodeArrayList3.get(0);

        pplainrowNode1 = new APlainRow(tlparNode2, null, listNode5, trparNode6);
        }
	nodeList.add(pplainrowNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAplainrow4PlainRow */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPlainRow pplainrowNode1;
        {
            // Block
        TLPar tlparNode2;
        PColDef pcoldefNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRPar trparNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcoldefNode3 = (PColDef)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trparNode6 = (TRPar)nodeArrayList4.get(0);

        pplainrowNode1 = new APlainRow(tlparNode2, pcoldefNode3, listNode5, trparNode6);
        }
	nodeList.add(pplainrowNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAoperationformula1OperationFormula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperationFormula poperationformulaNode1;
        {
            // Block
        TId tidNode2;
        PPlainRow pplainrowNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pplainrowNode3 = (PPlainRow)nodeArrayList2.get(0);

        poperationformulaNode1 = new AOperationFormula(tidNode2, pplainrowNode3, null);
        }
	nodeList.add(poperationformulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAoperationformula2OperationFormula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperationFormula poperationformulaNode1;
        {
            // Block
        TId tidNode2;
        PPlainRow pplainrowNode3;
        PAsop pasopNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pplainrowNode3 = (PPlainRow)nodeArrayList2.get(0);
        pasopNode4 = (PAsop)nodeArrayList3.get(0);

        poperationformulaNode1 = new AOperationFormula(tidNode2, pplainrowNode3, pasopNode4);
        }
	nodeList.add(poperationformulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ARcol */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRcol prcolNode1;
        {
            // Block
        TFrameprefix tframeprefixNode2;
        TNumber tnumberNode3;
        tframeprefixNode2 = (TFrameprefix)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);

        prcolNode1 = new ARcol(tframeprefixNode2, tnumberNode3);
        }
	nodeList.add(prcolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ADotcol */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDotcol pdotcolNode1;
        {
            // Block
        TFrameid tframeidNode2;
        TDot tdotNode3;
        TId tidNode4;
        tframeidNode2 = (TFrameid)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);

        pdotcolNode1 = new ADotcol(tframeidNode2, tdotNode3, tidNode4);
        }
	nodeList.add(pdotcolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AMinusPosOrNeg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPosOrNeg pposornegNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pposornegNode1 = new AMinusPosOrNeg(tminusNode2);
        }
	nodeList.add(pposornegNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce APlusPosOrNeg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPosOrNeg pposornegNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pposornegNode1 = new APlusPosOrNeg(tplusNode2);
        }
	nodeList.add(pposornegNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAdecimal1Decimal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecimal pdecimalNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TNumber tnumberNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        @SuppressWarnings("unused") Object nullNode5 = null;
        tnumberNode3 = (TNumber)nodeArrayList1.get(0);

        pdecimalNode1 = new ADecimal(null, tnumberNode3, null, null);
        }
	nodeList.add(pdecimalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAdecimal2Decimal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecimal pdecimalNode1;
        {
            // Block
        PPosOrNeg pposornegNode2;
        TNumber tnumberNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        @SuppressWarnings("unused") Object nullNode5 = null;
        pposornegNode2 = (PPosOrNeg)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);

        pdecimalNode1 = new ADecimal(pposornegNode2, tnumberNode3, null, null);
        }
	nodeList.add(pdecimalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAdecimal3Decimal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecimal pdecimalNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TNumber tnumberNode3;
        TDot tdotNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        tnumberNode3 = (TNumber)nodeArrayList1.get(0);
        tdotNode4 = (TDot)nodeArrayList2.get(0);

        pdecimalNode1 = new ADecimal(null, tnumberNode3, tdotNode4, null);
        }
	nodeList.add(pdecimalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAdecimal4Decimal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecimal pdecimalNode1;
        {
            // Block
        PPosOrNeg pposornegNode2;
        TNumber tnumberNode3;
        TDot tdotNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        pposornegNode2 = (PPosOrNeg)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);
        tdotNode4 = (TDot)nodeArrayList3.get(0);

        pdecimalNode1 = new ADecimal(pposornegNode2, tnumberNode3, tdotNode4, null);
        }
	nodeList.add(pdecimalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAdecimal5Decimal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecimal pdecimalNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TNumber tnumberNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TNumber tnumberNode5;
        tnumberNode3 = (TNumber)nodeArrayList1.get(0);
        tnumberNode5 = (TNumber)nodeArrayList2.get(0);

        pdecimalNode1 = new ADecimal(null, tnumberNode3, null, tnumberNode5);
        }
	nodeList.add(pdecimalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAdecimal6Decimal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecimal pdecimalNode1;
        {
            // Block
        PPosOrNeg pposornegNode2;
        TNumber tnumberNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TNumber tnumberNode5;
        pposornegNode2 = (PPosOrNeg)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);
        tnumberNode5 = (TNumber)nodeArrayList3.get(0);

        pdecimalNode1 = new ADecimal(pposornegNode2, tnumberNode3, null, tnumberNode5);
        }
	nodeList.add(pdecimalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAdecimal7Decimal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecimal pdecimalNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TNumber tnumberNode3;
        TDot tdotNode4;
        TNumber tnumberNode5;
        tnumberNode3 = (TNumber)nodeArrayList1.get(0);
        tdotNode4 = (TDot)nodeArrayList2.get(0);
        tnumberNode5 = (TNumber)nodeArrayList3.get(0);

        pdecimalNode1 = new ADecimal(null, tnumberNode3, tdotNode4, tnumberNode5);
        }
	nodeList.add(pdecimalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAdecimal8Decimal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecimal pdecimalNode1;
        {
            // Block
        PPosOrNeg pposornegNode2;
        TNumber tnumberNode3;
        TDot tdotNode4;
        TNumber tnumberNode5;
        pposornegNode2 = (PPosOrNeg)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);
        tdotNode4 = (TDot)nodeArrayList3.get(0);
        tnumberNode5 = (TNumber)nodeArrayList4.get(0);

        pdecimalNode1 = new ADecimal(pposornegNode2, tnumberNode3, tdotNode4, tnumberNode5);
        }
	nodeList.add(pdecimalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AWordWordOrId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWordOrId pwordoridNode1;
        {
            // Block
        TWord twordNode2;
        twordNode2 = (TWord)nodeArrayList1.get(0);

        pwordoridNode1 = new AWordWordOrId(twordNode2);
        }
	nodeList.add(pwordoridNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AIdWordOrId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWordOrId pwordoridNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pwordoridNode1 = new AIdWordOrId(tidNode2);
        }
	nodeList.add(pwordoridNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ANumScalar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PScalar pscalarNode1;
        {
            // Block
        PDecimal pdecimalNode2;
        pdecimalNode2 = (PDecimal)nodeArrayList1.get(0);

        pscalarNode1 = new ANumScalar(pdecimalNode2);
        }
	nodeList.add(pscalarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AWordOrIdScalar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PScalar pscalarNode1;
        {
            // Block
        PWordOrId pwordoridNode2;
        pwordoridNode2 = (PWordOrId)nodeArrayList1.get(0);

        pscalarNode1 = new AWordOrIdScalar(pwordoridNode2);
        }
	nodeList.add(pscalarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ABooleanScalar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PScalar pscalarNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        pscalarNode1 = new ABooleanScalar(tbooleanNode2);
        }
	nodeList.add(pscalarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AProp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProp ppropNode1;
        {
            // Block
        TId tidNode2;
        TEqual tequalNode3;
        PScalar pscalarNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pscalarNode4 = (PScalar)nodeArrayList3.get(0);

        ppropNode1 = new AProp(tidNode2, tequalNode3, pscalarNode4);
        }
	nodeList.add(ppropNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ASelectors */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSelectors pselectorsNode1;
        {
            // Block
        TSelectorid tselectoridNode2;
        PGenRow pgenrowNode3;
        tselectoridNode2 = (TSelectorid)nodeArrayList1.get(0);
        pgenrowNode3 = (PGenRow)nodeArrayList2.get(0);

        pselectorsNode1 = new ASelectors(tselectoridNode2, pgenrowNode3);
        }
	nodeList.add(pselectorsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AProjectors */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProjectors pprojectorsNode1;
        {
            // Block
        TProjectid tprojectidNode2;
        PGenRow pgenrowNode3;
        tprojectidNode2 = (TProjectid)nodeArrayList1.get(0);
        pgenrowNode3 = (PGenRow)nodeArrayList2.get(0);

        pprojectorsNode1 = new AProjectors(tprojectidNode2, pgenrowNode3);
        }
	nodeList.add(pprojectorsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ALabels */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLabels plabelsNode1;
        {
            // Block
        TLabelid tlabelidNode2;
        PGenRow pgenrowNode3;
        tlabelidNode2 = (TLabelid)nodeArrayList1.get(0);
        pgenrowNode3 = (PGenRow)nodeArrayList2.get(0);

        plabelsNode1 = new ALabels(tlabelidNode2, pgenrowNode3);
        }
	nodeList.add(plabelsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AProps */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProps ppropsNode1;
        {
            // Block
        TPropid tpropidNode2;
        PGenRow pgenrowNode3;
        tpropidNode2 = (TPropid)nodeArrayList1.get(0);
        pgenrowNode3 = (PGenRow)nodeArrayList2.get(0);

        ppropsNode1 = new AProps(tpropidNode2, pgenrowNode3);
        }
	nodeList.add(ppropsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ATooltips */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTooltips ptooltipsNode1;
        {
            // Block
        TTooltipid ttooltipidNode2;
        PGenRow pgenrowNode3;
        ttooltipidNode2 = (TTooltipid)nodeArrayList1.get(0);
        pgenrowNode3 = (PGenRow)nodeArrayList2.get(0);

        ptooltipsNode1 = new ATooltips(ttooltipidNode2, pgenrowNode3);
        }
	nodeList.add(ptooltipsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AJoins */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PJoins pjoinsNode1;
        {
            // Block
        TJoinid tjoinidNode2;
        PGenRow pgenrowNode3;
        tjoinidNode2 = (TJoinid)nodeArrayList1.get(0);
        pgenrowNode3 = (PGenRow)nodeArrayList2.get(0);

        pjoinsNode1 = new AJoins(tjoinidNode2, pgenrowNode3);
        }
	nodeList.add(pjoinsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AGeneric */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGeneric pgenericNode1;
        {
            // Block
        TId tidNode2;
        TEqual tequalNode3;
        PGenRow pgenrowNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pgenrowNode4 = (PGenRow)nodeArrayList3.get(0);

        pgenericNode1 = new AGeneric(tidNode2, tequalNode3, pgenrowNode4);
        }
	nodeList.add(pgenericNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ASelectNoun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNoun pnounNode1;
        {
            // Block
        PSelectors pselectorsNode2;
        pselectorsNode2 = (PSelectors)nodeArrayList1.get(0);

        pnounNode1 = new ASelectNoun(pselectorsNode2);
        }
	nodeList.add(pnounNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AProjectNoun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNoun pnounNode1;
        {
            // Block
        PProjectors pprojectorsNode2;
        pprojectorsNode2 = (PProjectors)nodeArrayList1.get(0);

        pnounNode1 = new AProjectNoun(pprojectorsNode2);
        }
	nodeList.add(pnounNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ALabelsNoun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNoun pnounNode1;
        {
            // Block
        PLabels plabelsNode2;
        plabelsNode2 = (PLabels)nodeArrayList1.get(0);

        pnounNode1 = new ALabelsNoun(plabelsNode2);
        }
	nodeList.add(pnounNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ATooltipsNoun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNoun pnounNode1;
        {
            // Block
        PTooltips ptooltipsNode2;
        ptooltipsNode2 = (PTooltips)nodeArrayList1.get(0);

        pnounNode1 = new ATooltipsNoun(ptooltipsNode2);
        }
	nodeList.add(pnounNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AOthersNoun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNoun pnounNode1;
        {
            // Block
        PGeneric pgenericNode2;
        pgenericNode2 = (PGeneric)nodeArrayList1.get(0);

        pnounNode1 = new AOthersNoun(pgenericNode2);
        }
	nodeList.add(pnounNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce APropsNoun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNoun pnounNode1;
        {
            // Block
        PProps ppropsNode2;
        ppropsNode2 = (PProps)nodeArrayList1.get(0);

        pnounNode1 = new APropsNoun(ppropsNode2);
        }
	nodeList.add(pnounNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ACodeNoun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNoun pnounNode1;
        {
            // Block
        TCodeAlpha tcodealphaNode2;
        tcodealphaNode2 = (TCodeAlpha)nodeArrayList1.get(0);

        pnounNode1 = new ACodeNoun(tcodealphaNode2);
        }
	nodeList.add(pnounNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AOthernoun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POthernoun pothernounNode1;
        {
            // Block
        TComma tcommaNode2;
        PNoun pnounNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pnounNode3 = (PNoun)nodeArrayList2.get(0);

        pothernounNode1 = new AOthernoun(tcommaNode2, pnounNode3);
        }
	nodeList.add(pothernounNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AAframeop1Frameop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFrameop pframeopNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PNoun pnounNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRPar trparNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pnounNode4 = (PNoun)nodeArrayList3.get(0);
        {
            // Block
        }
        trparNode6 = (TRPar)nodeArrayList4.get(0);

        pframeopNode1 = new AFrameop(tidNode2, tlparNode3, pnounNode4, listNode5, trparNode6, null);
        }
	nodeList.add(pframeopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAframeop2Frameop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFrameop pframeopNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PNoun pnounNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TRPar trparNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pnounNode4 = (PNoun)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trparNode7 = (TRPar)nodeArrayList5.get(0);

        pframeopNode1 = new AFrameop(tidNode2, tlparNode3, pnounNode4, listNode6, trparNode7, null);
        }
	nodeList.add(pframeopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAframeop3Frameop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFrameop pframeopNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PNoun pnounNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRPar trparNode6;
        PAsop pasopNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pnounNode4 = (PNoun)nodeArrayList3.get(0);
        {
            // Block
        }
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        pasopNode7 = (PAsop)nodeArrayList5.get(0);

        pframeopNode1 = new AFrameop(tidNode2, tlparNode3, pnounNode4, listNode5, trparNode6, pasopNode7);
        }
	nodeList.add(pframeopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AAframeop4Frameop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFrameop pframeopNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PNoun pnounNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TRPar trparNode7;
        PAsop pasopNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pnounNode4 = (PNoun)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trparNode7 = (TRPar)nodeArrayList5.get(0);
        pasopNode8 = (PAsop)nodeArrayList6.get(0);

        pframeopNode1 = new AFrameop(tidNode2, tlparNode3, pnounNode4, listNode6, trparNode7, pasopNode8);
        }
	nodeList.add(pframeopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AAsop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAsop pasopNode1;
        {
            // Block
        TAsOp tasopNode2;
        TLPar tlparNode3;
        PGenRow pgenrowNode4;
        TRPar trparNode5;
        tasopNode2 = (TAsOp)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pgenrowNode4 = (PGenRow)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pasopNode1 = new AAsop(tasopNode2, tlparNode3, pgenrowNode4, trparNode5);
        }
	nodeList.add(pasopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AFilter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFilter pfilterNode1;
        {
            // Block
        TLPar tlparNode2;
        PColDef pcoldefNode3;
        TComparator tcomparatorNode4;
        PColDef pcoldefNode5;
        TRPar trparNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcoldefNode3 = (PColDef)nodeArrayList2.get(0);
        tcomparatorNode4 = (TComparator)nodeArrayList3.get(0);
        pcoldefNode5 = (PColDef)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        pfilterNode1 = new AFilter(tlparNode2, pcoldefNode3, tcomparatorNode4, pcoldefNode5, trparNode6);
        }
	nodeList.add(pfilterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ARelationship */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationship prelationshipNode1;
        {
            // Block
        TLPar tlparNode2;
        PColDef pcoldefNode3;
        TRelType treltypeNode4;
        PColDef pcoldefNode5;
        TRPar trparNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcoldefNode3 = (PColDef)nodeArrayList2.get(0);
        treltypeNode4 = (TRelType)nodeArrayList3.get(0);
        pcoldefNode5 = (PColDef)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        prelationshipNode1 = new ARelationship(tlparNode2, pcoldefNode3, treltypeNode4, pcoldefNode5, trparNode6);
        }
	nodeList.add(prelationshipNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AJavaOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PJavaOp pjavaopNode1;
        {
            // Block
        TJava tjavaNode2;
        tjavaNode2 = (TJava)nodeArrayList1.get(0);

        pjavaopNode1 = new AJavaOp(tjavaNode2);
        }
	nodeList.add(pjavaopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AROp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PROp propNode1;
        {
            // Block
        TR trNode2;
        trNode2 = (TR)nodeArrayList1.get(0);

        propNode1 = new AROp(trNode2);
        }
	nodeList.add(propNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ATerminal$Routine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PRoutine proutineNode1;
        proutineNode1 = (PRoutine)nodeArrayList1.get(0);
	if(proutineNode1 != null)
	{
	  listNode2.add(proutineNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANonTerminal$Routine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PRoutine proutineNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        proutineNode2 = (PRoutine)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(proutineNode2 != null)
	{
	  listNode3.add(proutineNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ATerminal$Otherscript */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POtherscript potherscriptNode1;
        potherscriptNode1 = (POtherscript)nodeArrayList1.get(0);
	if(potherscriptNode1 != null)
	{
	  listNode2.add(potherscriptNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ANonTerminal$Otherscript */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        POtherscript potherscriptNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        potherscriptNode2 = (POtherscript)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(potherscriptNode2 != null)
	{
	  listNode3.add(potherscriptNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ATerminal$OtherExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POtherExpr potherexprNode1;
        potherexprNode1 = (POtherExpr)nodeArrayList1.get(0);
	if(potherexprNode1 != null)
	{
	  listNode2.add(potherexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ANonTerminal$OtherExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        POtherExpr potherexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        potherexprNode2 = (POtherExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(potherexprNode2 != null)
	{
	  listNode3.add(potherexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ATerminal$Othercol */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POthercol pothercolNode1;
        pothercolNode1 = (POthercol)nodeArrayList1.get(0);
	if(pothercolNode1 != null)
	{
	  listNode2.add(pothercolNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ANonTerminal$Othercol */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        POthercol pothercolNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pothercolNode2 = (POthercol)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pothercolNode2 != null)
	{
	  listNode3.add(pothercolNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ATerminal$Othernoun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POthernoun pothernounNode1;
        pothernounNode1 = (POthernoun)nodeArrayList1.get(0);
	if(pothernounNode1 != null)
	{
	  listNode2.add(pothernounNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ANonTerminal$Othernoun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        POthernoun pothernounNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pothernounNode2 = (POthernoun)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pothernounNode2 != null)
	{
	  listNode3.add(pothernounNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 7}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, REDUCE, 48}, {0, SHIFT, 31}, {4, SHIFT, 32}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 57}, {27, SHIFT, 33}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 7}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 35}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 36}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, ERROR, 8}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 39}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {26, SHIFT, 40}, {27, SHIFT, 41}, {29, SHIFT, 8}, {31, SHIFT, 42}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 11}, {39, ACCEPT, -1}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 13}, {6, SHIFT, 50}, },
			{{-1, ERROR, 14}, {6, SHIFT, 51}, },
			{{-1, REDUCE, 4}, {37, SHIFT, 52}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 11}, {8, SHIFT, 55}, {9, SHIFT, 56}, {10, SHIFT, 57}, {11, SHIFT, 58}, {14, SHIFT, 59}, {16, SHIFT, 60}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 23}, {0, SHIFT, 61}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, {18, SHIFT, 62}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 7}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 50}, {0, SHIFT, 64}, },
			{{-1, ERROR, 33}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 65}, {5, SHIFT, 66}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {15, SHIFT, 67}, {19, SHIFT, 68}, {21, SHIFT, 69}, {22, SHIFT, 70}, {23, SHIFT, 71}, {25, SHIFT, 72}, {26, SHIFT, 40}, {27, SHIFT, 41}, {28, SHIFT, 73}, {29, SHIFT, 8}, {31, SHIFT, 42}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, REDUCE, 42}, {36, SHIFT, 84}, },
			{{-1, REDUCE, 57}, {18, SHIFT, 86}, {27, SHIFT, 33}, },
			{{-1, ERROR, 36}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 36}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, ERROR, 37}, {15, SHIFT, 87}, {28, SHIFT, 88}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 57}, {18, SHIFT, 91}, {27, SHIFT, 33}, },
			{{-1, ERROR, 40}, {4, SHIFT, 92}, },
			{{-1, ERROR, 41}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 39}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {26, SHIFT, 40}, {27, SHIFT, 41}, {29, SHIFT, 8}, {31, SHIFT, 42}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, ERROR, 42}, {0, SHIFT, 95}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 44}, {15, SHIFT, 67}, {30, SHIFT, 96}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 52}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 7}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 5}, {37, SHIFT, 52}, },
			{{-1, ERROR, 55}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 36}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, ERROR, 56}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 36}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, ERROR, 57}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 36}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, ERROR, 58}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 36}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, ERROR, 59}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 36}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, ERROR, 60}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 36}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 106}, {4, SHIFT, 107}, },
			{{-1, ERROR, 62}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 7}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 57}, {18, SHIFT, 109}, {27, SHIFT, 33}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 67}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 39}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {26, SHIFT, 40}, {27, SHIFT, 41}, {29, SHIFT, 8}, {31, SHIFT, 42}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, ERROR, 68}, {29, SHIFT, 8}, },
			{{-1, ERROR, 69}, {29, SHIFT, 8}, },
			{{-1, ERROR, 70}, {29, SHIFT, 8}, },
			{{-1, ERROR, 71}, {29, SHIFT, 8}, },
			{{-1, ERROR, 72}, {29, SHIFT, 8}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 74}, {15, SHIFT, 67}, {28, SHIFT, 116}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 82}, {15, SHIFT, 118}, {28, SHIFT, 119}, },
			{{-1, ERROR, 83}, {15, SHIFT, 67}, {28, SHIFT, 122}, },
			{{-1, ERROR, 84}, {27, SHIFT, 124}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 86}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 7}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, ERROR, 87}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {27, SHIFT, 36}, {29, SHIFT, 8}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 90}, {15, SHIFT, 87}, {28, SHIFT, 127}, },
			{{-1, ERROR, 91}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 129}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, },
			{{-1, ERROR, 92}, {3, SHIFT, 131}, },
			{{-1, REDUCE, 29}, {15, SHIFT, 87}, {28, SHIFT, 88}, },
			{{-1, ERROR, 94}, {17, SHIFT, 132}, {38, SHIFT, 133}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 97}, {15, SHIFT, 67}, {30, SHIFT, 134}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 135}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 109}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 129}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {29, SHIFT, 8}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 117}, {15, SHIFT, 67}, {28, SHIFT, 137}, },
			{{-1, ERROR, 118}, {3, SHIFT, 138}, {5, SHIFT, 66}, {19, SHIFT, 68}, {21, SHIFT, 69}, {22, SHIFT, 70}, {23, SHIFT, 71}, {25, SHIFT, 72}, },
			{{-1, REDUCE, 77}, {36, SHIFT, 84}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 121}, {15, SHIFT, 118}, {28, SHIFT, 141}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 124}, {29, SHIFT, 8}, },
			{{-1, ERROR, 125}, {28, SHIFT, 144}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 132}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 39}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {26, SHIFT, 40}, {27, SHIFT, 41}, {29, SHIFT, 8}, {31, SHIFT, 42}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, ERROR, 133}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 39}, {8, SHIFT, 4}, {9, SHIFT, 5}, {13, SHIFT, 6}, {26, SHIFT, 40}, {27, SHIFT, 41}, {29, SHIFT, 8}, {31, SHIFT, 42}, {33, SHIFT, 9}, {34, SHIFT, 10}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 138}, {18, SHIFT, 147}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 78}, {36, SHIFT, 84}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 143}, {28, SHIFT, 149}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 145}, {28, SHIFT, 150}, },
			{{-1, ERROR, 146}, {28, SHIFT, 151}, },
			{{-1, ERROR, 147}, {29, SHIFT, 8}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 11}, },
			{{-1, 12}, {30, 63}, },
			{{-1, 13}, {62, 108}, },
			{{-1, 53}, {54, 99}, },
			{{-1, 14}, },
			{{-1, 15}, {52, 98}, {86, 125}, },
			{{-1, 16}, },
			{{-1, 17}, {7, 37}, {8, 43}, {33, 43}, {36, 37}, {41, 93}, {55, 100}, {56, 101}, {57, 102}, {58, 103}, {59, 104}, {60, 105}, {67, 43}, {87, 126}, {132, 43}, {133, 43}, },
			{{-1, 18}, },
			{{-1, 19}, },
			{{-1, 20}, },
			{{-1, 89}, {90, 128}, },
			{{-1, 44}, {33, 74}, {41, 94}, {67, 110}, {132, 145}, {133, 146}, },
			{{-1, 75}, {83, 123}, {97, 123}, {117, 123}, },
			{{-1, 21}, {68, 111}, {69, 112}, {70, 113}, {71, 114}, {72, 115}, {109, 136}, {124, 143}, {147, 136}, },
			{{-1, 34}, },
			{{-1, 22}, },
			{{-1, 45}, },
			{{-1, 46}, },
			{{-1, 23}, },
			{{-1, 24}, },
			{{-1, 38}, {0, 25}, {30, 25}, },
			{{-1, 26}, {91, 130}, {109, 130}, },
			{{-1, 47}, },
			{{-1, 76}, },
			{{-1, 77}, },
			{{-1, 78}, },
			{{-1, 79}, },
			{{-1, 80}, },
			{{-1, -1}, },
			{{-1, 81}, },
			{{-1, 82}, {118, 139}, },
			{{-1, 120}, {121, 142}, },
			{{-1, 27}, },
			{{-1, 85}, {119, 140}, {141, 148}, },
			{{-1, 48}, },
			{{-1, 49}, },
			{{-1, 28}, },
			{{-1, 29}, },
			{{-1, 30}, },
			{{-1, 54}, },
			{{-1, 90}, },
			{{-1, 83}, {44, 97}, {74, 117}, },
			{{-1, 121}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: number, boolean, id, '+', '-', word, '(', '[', java, r, EOF",
			"expecting: number, '.', ';', '+', '-', '%', '^', '*', ',', '/', comparator, ')', ']', '|', rel type",
			"expecting: ';', '+', '-', '%', '^', '*', ',', '/', comparator, ')', ']', '|', rel type",
			"expecting: ';', '+', '-', '%', '^', '*', ',', '/', comparator, '=', '(', ')', ']', '|', rel type",
			"expecting: number",
			"expecting: ';', '+', '-', '%', '^', '*', ',', '/', comparator, '=', ')', ']', '|', rel type",
			"expecting: number, boolean, id, '+', '-', word, '(', '[', java, r",
			"expecting: number, boolean, id, '+', '-', word, 'f', '(', '[', 'f$', java, r",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: ';', '|'",
			"expecting: ';', ')', '|'",
			"expecting: ';', '+', '-', '%', '^', '*', '/', '=', '|'",
			"expecting: number, ';', '+', '-', '%', '^', '*', ',', '/', comparator, ')', ']', '|', rel type",
			"expecting: number, boolean, id, code alpha, '+', '-', word, ',', selectorid, 'p=', 'props=', 'l=', 't=', 'f', '(', ')', '[', 'f$', java, r",
			"expecting: ';', '+', '-', '%', '^', '*', ',', '/', comparator, ')', ']', as op, '|', rel type",
			"expecting: '+', '-', '%', '^', '*', ',', '/', '=', '(', ')'",
			"expecting: ',', ')'",
			"expecting: '+', '-', '%', '^', '*', ',', '/', comparator, '=', '(', ')', ']', rel type",
			"expecting: '.'",
			"expecting: ',', ')', ']'",
			"expecting: ',', ']'",
			"expecting: ',', comparator, ')', ']', rel type",
			"expecting: '['",
			"expecting: '('",
			"expecting: number, boolean, id, '+', '-', word",
			"expecting: id",
			"expecting: ',', comparator, ')', rel type",
			"expecting: comparator, rel type",
			"expecting: ';', ',', comparator, ')', ']', '|', rel type",
			"expecting: number, boolean, id, '+', '-', word, '['",
			"expecting: id, code alpha, selectorid, 'p=', 'props=', 'l=', 't='",
			"expecting: ')'",
			"expecting: '='",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 5, 6, 7, 2, 2, 8, 0, 9, 9, 10, 11, 11, 2, 2, 2, 2, 2, 4, 2, 12, 2, 2, 2, 2, 0, 2, 13, 14, 15, 16, 6, 17, 2, 18, 19, 7, 4, 20, 21, 22, 22, 22, 22, 22, 0, 0, 6, 10, 10, 6, 6, 6, 6, 6, 6, 1, 6, 0, 2, 16, 17, 7, 23, 23, 23, 23, 23, 15, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 24, 2, 6, 6, 2, 17, 17, 25, 26, 27, 28, 22, 2, 21, 10, 10, 29, 29, 29, 29, 29, 29, 2, 13, 9, 30, 20, 17, 17, 17, 17, 17, 15, 17, 31, 15, 17, 17, 15, 20, 23, 32, 17, 2, 17, 22, 22, 22, 7, 7, 2, 2, 17, 15, 33, 17, 2, 15, 17, 32, 11, 32, 32, 23, 2, 2, 22, 22, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
