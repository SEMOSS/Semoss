name,pixel,expected_json,compare_all,exclude_paths,ignore_order,ignore_added_dictionary,ignore_added_iterable,clean_test_databases,ignore_failure,insight_state,skip_test
clean-add-column-string-1,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics ) .as ( [ Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics ] ) | Import ( frame = [ FRAMEUNITTEST ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
<j><encode>synchronizeGridToRDataTable(""FRAMEUNITTEST"")</encode></j> ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
AddColumn ( newCol = [ ""test"" ] , dataType = [ ""STRING"" ] ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;",<<<text>>>clean_add_column_string.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
clean-add-column-string-2,"Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;",<<<text>>>clean_add_column_string.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
clean-add-column-number,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics ) .as ( [ Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics ] ) | Import ( frame = [ FRAMEUNITTEST ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
<j><encode>synchronizeGridToRDataTable(""FRAMEUNITTEST"")</encode></j> ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
AddColumn ( newCol = [ ""test"" ] , dataType = [ ""NUMBER"" ] ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;",<<<text>>>clean_add_column_number.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
filter,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Studio == [ ""Buena_Vista"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
filter-mixed,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Studio == [ ""Buena_Vista"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
ReplaceFrameFilter ( ( Genre == [ ""Comedy-Musical"" , ""Drama"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
ReplaceFrameFilter ( ( Director == [ ""Alex_Kurtzman"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
DeleteFrameFilter ( index = [ 2 ] ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_mixed.json<<</text>>>,TRUE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
filter-mixed-rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Studio == [ ""Buena_Vista"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
ReplaceFrameFilter ( ( Genre == [ ""Comedy-Musical"" , ""Drama"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
ReplaceFrameFilter ( ( Director == [ ""Alex_Kurtzman"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
DeleteFrameFilter ( index = [ 2 ] ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_mixed_rdf.json<<</text>>>,TRUE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
filter-multiple,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Genre == [ ""Comedy-Musical"" , ""Drama"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_multiple.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
filter-multiple-rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Genre == [ ""Comedy-Musical"" , ""Drama"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_multiple_rdf.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
filter-rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Studio == [ ""Buena_Vista"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_rdf.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
import-inner-join,"CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ; 
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Frame ( ) | QueryAll ( ) | Collect ( -1 ) ;",<<<text>>>import_inner_join.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
import-inner-join-rdf,"CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ; 
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Frame ( ) | QueryAll ( ) | Collect ( -1 ) ;",<<<text>>>import_inner_join_rdf.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
predict-metamodel,"PredictMetamodel(filePath=[""<<<testDir>>>/data/unit_test_movie.csv""], delimiter=["",""], rowCount=[false]);",<<<text>>>predict_metamodel.json<<</text>>>,FALSE,"root['fileName'],root['fileLocation']",TRUE,FALSE,FALSE,,FALSE,START END,FALSE
r-health,"R ( ""<encode>1+1</encode>"" ) ;",<<<text>>>r_health.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
sort-ascending,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;
Panel ( 0 ) | SetPanelSort ( columns = [ ""Title"" ] , sort = [ ""asc"" ] ) ;
Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>sort_ascending.json<<</text>>>,FALSE,,FALSE,TRUE,FALSE,,FALSE,START END,FALSE
sort-ascending-rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;
Panel ( 0 ) | SetPanelSort ( columns = [ ""Title"" ] , sort = [ ""asc"" ] ) ;
Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>sort_ascending_rdf.json<<</text>>>,FALSE,,FALSE,TRUE,FALSE,,FALSE,START END,FALSE
sort-descending,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;
Panel ( 0 ) | SetPanelSort ( columns = [ ""Title"" ] , sort = [ ""desc"" ] ) ;
Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>sort_descending.json<<</text>>>,FALSE,,FALSE,TRUE,FALSE,,FALSE,START END,FALSE
sort-descending-rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;
Panel ( 0 ) | SetPanelSort ( columns = [ ""Title"" ] , sort = [ ""desc"" ] ) ;
Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>sort_descending_rdf.json<<</text>>>,FALSE,,FALSE,TRUE,FALSE,,FALSE,START END,FALSE
version,Version();,"{
  ""pixelExpression"": ""Version ( ) ;"",
  ""output"": {
    ""datetime"": ""1000-01-01 01:01:01"",
    ""version"": ""1.0.0-SNAPSHOT""
  }
}",FALSE,"root['datetime'],root['version']",TRUE,FALSE,FALSE,,FALSE,START END,FALSE
Diabetes-1,"AddPanel ( 0 ) ; Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ; Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>(<Frame> | UnfilterFrame(<SelectedColumn>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if((IsEmpty(<SelectedValues>)),(<Frame> | UnfilterFrame(<SelectedColumn>)), (<Frame> | SetFrameFilter(<SelectedColumn>==<SelectedValues>)));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ; Panel ( 0 ) | RetrievePanelEvents ( ) ; Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ; Panel ( 0 ) | SetPanelView ( ""pipeline"" , ""<encode>{""app_id"":""NEWSEMOSSAPP""}</encode>"" ) ; FileRead(filePath=[""<<<testDir>>>/data/unit_test_diabetes.csv""],dataTypeMap=[{""id"":""STRING"",""chol"":""INT"",""stab_glu"":""INT"",""hdl"":""INT"",""ratio"":""DOUBLE"",""glyhb"":""DOUBLE"",""location"":""STRING"",""age"":""INT"",""gender"":""STRING"",""height"":""INT"",""weight"":""INT"",""frame"":""STRING"",""bp_1s"":""INT"",""bp_1d"":""INT"",""bp_2s"":""INT"",""bp_2d"":""INT"",""waist"":""INT"",""hip"":""INT"",""time_ppn"":""INT"",""Drug"":""STRING""}],delimiter=["",""],newHeaders=[{}],fileName=[""unit_test_diabetes.csv""], additionalDataTypes=[{""id"":""INT""}])|Select(DND__id, DND__chol, DND__stab_glu, DND__hdl, DND__ratio, DND__glyhb, DND__location, DND__age, DND__gender, DND__height, DND__weight, DND__frame, DND__bp_1s, DND__bp_1d, DND__bp_2s, DND__bp_2d, DND__waist, DND__hip, DND__time_ppn, DND__Drug).as([id, chol, stab_glu, hdl, ratio, glyhb, location, age, gender, height, weight, frame, bp_1s, bp_1d, bp_2s, bp_2d, waist, hip, time_ppn, Drug]) | Import(frame=[CreateFrame(frameType=[GRID], override=[true]).as([""FRAMEUNITTEST""])]); ",<<<text>>>diabetes-1.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
Diabetes-2,"Panel(0)|SetPanelView(""visualization"");Frame( frame=[FRAMEUNITTEST] )|QueryAll()|AutoTaskOptions(panel=[""0""], layout=[""Grid""] )|Collect(2000); if(  (FRAMEUNITTEST|HasDuplicates(age)) , (Frame( frame=[FRAMEUNITTEST] )|Select(age, Count(id)).as([age, Count_of_id])|Group(age)|With(Panel(0))|Format(type=['table'])|TaskOptions({""0"":{""layout"":""Column"",""alignment"":{""label"":[""age""],""value"":[""Count_of_id""],""tooltip"":[],""facet"":[]}}})|Collect(2000)) , (Frame( frame=[FRAMEUNITTEST] )|Select(age, Count(id)).as([age, Count_of_id])|Group(age)|With(Panel(0))|Format(type=['table'])|TaskOptions({""0"":{""layout"":""Column"",""alignment"":{""label"":[""age""],""value"":[""Count_of_id""],""tooltip"":[],""facet"":[]}}})|Collect(2000)) ); ",<<<text>>>diabetes-2.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
Diabetes-3,"if((IsEmpty([33,34,36,37,38,40,41,42,43,44,45,47,48,50,51,52,53,54,55,58,59,60,61,63,65,66])),(FRAMEUNITTEST | UnfilterFrame(age)), (FRAMEUNITTEST | SetFrameFilter(age==[33,34,36,37,38,40,41,42,43,44,45,47,48,50,51,52,53,54,55,58,59,60,61,63,65,66]))); ifError(  (Frame( frame=[FRAMEUNITTEST] )|Select(age, Count(id)).as([age, Count_of_id])|Group(age)|With(Panel(0))|Format(type=['table'])|TaskOptions({""0"":{""layout"":""Column"",""alignment"":{""label"":[""age""],""value"":[""Count_of_id""]}}})|Collect(2000)) , (true) ); ",<<<text>>>diabetes-3.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
Diabetes-4,"if((IsEmpty([])),(FRAMEUNITTEST | UnfilterFrame(age)), (FRAMEUNITTEST | SetFrameFilter(age==[]))); Panel(0)|Clone(""1""); if(  (FRAMEUNITTEST|HasDuplicates(id)) , (Frame( frame=[FRAMEUNITTEST] )|Select(id, Average(height), Average(weight)).as([id, Average_of_height, Average_of_weight])|Group(id)|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Scatter"",""alignment"":{""label"":[""id""],""x"":[""Average_of_height""],""y"":[""Average_of_weight""],""z"":[],""series"":[],""tooltip"":[],""facet"":[]}}})|Collect(2000)) , (Frame( frame=[FRAMEUNITTEST] )|Select(id, height, weight).as([id, height, weight])|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Scatter"",""alignment"":{""label"":[""id""],""x"":[""height""],""y"":[""weight""],""z"":[],""series"":[],""tooltip"":[],""facet"":[]}}})|Collect(2000)) ); ",<<<text>>>diabetes-4.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
Diabetes-5,"if((IsEmpty([33,34,35,36,37,38,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63])),(FRAMEUNITTEST | UnfilterFrame(age)), (FRAMEUNITTEST | SetFrameFilter(age==[33,34,35,36,37,38,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63]))); ifError(  (Frame( frame=[FRAMEUNITTEST] )|Select(height, weight, id).as([height, weight, id])|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Scatter"",""alignment"":{""x"":[""height""],""y"":[""weight""],""label"":[""id""]}}})|Collect(2000)) , (true) ); ",<<<text>>>diabetes-5.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
Diabetes-6,"if((IsEmpty([])),(FRAMEUNITTEST | UnfilterFrame(age)), (FRAMEUNITTEST | SetFrameFilter(age==[]))); if(  (FRAMEUNITTEST|HasDuplicates(Drug)) , (Frame( frame=[FRAMEUNITTEST] )|Select(Drug, Count(id)).as([Drug, Count_of_id])|Group(Drug)|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Pie"",""alignment"":{""label"":[""Drug""],""value"":[""Count_of_id""],""heat"":[],""tooltip"":[],""facet"":[]}}})|Collect(2000)) , (Frame( frame=[FRAMEUNITTEST] )|Select(Drug, Count(id)).as([Drug, Count_of_id])|Group(Drug)|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Pie"",""alignment"":{""label"":[""Drug""],""value"":[""Count_of_id""],""heat"":[],""tooltip"":[],""facet"":[]}}})|Collect(2000)) ); FRAMEUNITTEST|Convert( frameType=[R]).as(['FRAMEUNITTEST']);Frame( frame=[FRAMEUNITTEST] )|Select(age, bp_1d, bp_1s, bp_2d, bp_2s, chol, Drug, frame, gender, glyhb, hdl, height, hip, id, location, ratio, stab_glu, time_ppn, waist, weight).as([age, bp_1d, bp_1s, bp_2d, bp_2s, chol, Drug, frame, gender, glyhb, hdl, height, hip, id, location, ratio, stab_glu, time_ppn, waist, weight])|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Grid"",""alignment"":{""label"":[""age"",""bp_1d"",""bp_1s"",""bp_2d"",""bp_2s"",""chol"",""Drug"",""frame"",""gender"",""glyhb"",""hdl"",""height"",""hip"",""id"",""location"",""ratio"",""stab_glu"",""time_ppn"",""waist"",""weight""]}}})|Collect(2000); ",<<<text>>>diabetes-6.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
Diabetes-7,"x=FRAMEUNITTEST|MatchColumnValues(column=[""frame""]); Frame(frame=[x])|Select(col1, col2, distance).as([col1, col2, distance])|Sort(columns=[""distance""], sort=[""asc""])|Filter(distance<=0.30000000000000004)|Collect(10); ",<<<text>>>diabetes-7.json<<</text>>>,FALSE,"root['taskId'],root['sources']",TRUE,TRUE,FALSE,,FALSE,,TRUE
Diabetes-8,"FRAMEUNITTEST | SplitUnpivot(columns = [""Drug""], delimiter = ["",_""]);ifError(  (Frame( frame=[FRAMEUNITTEST] )|QueryAll()|AutoTaskOptions(panel=[""1""], layout=[""Grid""] )|Collect(2000)) , (true) );
FRAMEUNITTEST | SplitUnpivot(columns = [""Drug""], delimiter = ["",""]);ifError(  (Frame( frame=[FRAMEUNITTEST] )|QueryAll()|AutoTaskOptions(panel=[""1""], layout=[""Grid""] )|Collect(2000)) , (true) );",<<<text>>>diabetes-8.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,TRUE
Diabetes-9,"FRAMEUNITTEST|UpdateMatchColumnValues(column=[""frame""], matches=[""med == medium"", ""S == small"", ""L == large""], matchesTable=[""x""]); ",<<<text>>>diabetes-9.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,TRUE
Diabetes-10,"if(  (FRAMEUNITTEST|HasDuplicates(Drug)) , (Frame( frame=[FRAMEUNITTEST] )|Select(Drug, Count(id)).as([Drug, Count_of_id])|Group(Drug)|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Pie"",""alignment"":{""label"":[""Drug""],""value"":[""Count_of_id""],""heat"":[],""tooltip"":[],""facet"":[]}}})|Collect(2000)) , (Frame( frame=[FRAMEUNITTEST] )|Select(Drug, Count(id)).as([Drug, Count_of_id])|Group(Drug)|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Pie"",""alignment"":{""label"":[""Drug""],""value"":[""Count_of_id""],""heat"":[],""tooltip"":[],""facet"":[]}}})|Collect(2000)) ); ",<<<text>>>diabetes-10.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,TRUE
Diabetes-11,"Panel(1)|SetPanelView(""visualization"", ""<encode>{""type"":""echarts""}</encode>"");FRAMEUNITTEST | RunNumericalCorrelation(attributes=[""age"",""bp_1d"",""bp_1s"",""bp_2d"",""bp_2s"",""chol"",""glyhb"",""hdl"",""height"",""hip"",""ratio"",""stab_glu"",""time_ppn"",""waist"",""weight""], panel=[1]); ",<<<text>>>diabetes-11.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,TRUE
workflow-1a->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director  , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ Director  , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Director ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( Director , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ Director , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director""  , ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow1a.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-1b->DropColumn-Director-(ASCII->UTF-8-issue),"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | DropColumn ( columns = [ ""Director"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ; ",<<<text>>>workflow1b.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-1c->DropRows-(Genre==Action-Adventure),"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | DropRows ( qs = [ Filter ( Genre == ""Action-Adventure"" ) ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow1c.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-1d->RegexReplaceColumnValue-(MovieBudget===8000000=9999999),"FRAMEUNITTEST | RegexReplaceColumnValue ( column = [ ""MovieBudget"" ] , value = [ ""50000000"" ] , newValue = [ ""9999999"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow1d.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-2a->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow2a.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-2b->Collapse(),"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Collapse ( groupByColumn = [ ""Genre"" , ""Nominated"" ] , value = [ ""MovieBudget"" ] , delimiter = [ "":"" ] , maintainCols = [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow2b.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-2c->JoinColumns(),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , MovieBudget_Collapse , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , MovieBudget_Collapse , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""MovieBudget_Collapse"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | JoinColumns ( newCol = [ ""Genre_and_MovieBudget"" ] , delimiter = [ "","" ] , columns = [ ""Genre"" , ""MovieBudget"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow2c.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-2d->2nd-Collapse(),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_and_MovieBudget , MovieBudget , MovieBudget_Collapse , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_and_MovieBudget , MovieBudget , MovieBudget_Collapse , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_and_MovieBudget"" , ""MovieBudget"" , ""MovieBudget_Collapse"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Collapse ( groupByColumn = [ ""Nominated"" , ""Revenue_Domestic"" ] , value = [ ""Genre"" ] , delimiter = [ ""&"" ] , maintainCols = [ ""Genre"" , ""Genre_and_MovieBudget"" , ""MovieBudget"" , ""MovieBudget_Collapse"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow2d.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-2e->2nd-JoinColumns(),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_and_MovieBudget , Genre_Collapse , MovieBudget , MovieBudget_Collapse , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_and_MovieBudget , Genre_Collapse , MovieBudget , MovieBudget_Collapse , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_and_MovieBudget"" , ""Genre_Collapse"" , ""MovieBudget"" , ""MovieBudget_Collapse"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | JoinColumns ( newCol = [ ""Both_RottenTomatoes"" ] , delimiter = [ ""+"" ] , columns = [ ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow2e.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-3a->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow3a.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-3b->JoinColumns(),"Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated"" , ""Studio"" , ""Genre"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | JoinColumns ( newCol = [ ""Nominated_Genres"" ] , delimiter = [ "","" ] , columns = [ ""Genre"" , ""Nominated"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;
        ",<<<text>>>workflow3b.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-3c->AddColumn(),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Nominated_Genres"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | AddColumn ( newCol = [ ""test_column"" ] , dataType = [ ""STRING"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow3c.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-3d->ChangeColumnType()->Number-to-String,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ) .as ( [ Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Nominated_Genres"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""test_column"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ChangeColumnType ( column = [ MovieBudget ] , dataType = [ ""STRING"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow3d.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-3e->UpdateRowValues-(string==string),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ) .as ( [ Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Nominated_Genres"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""test_column"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( Nominated , ""Y"" , Filter ( Genre == ""Action-Adventure"" ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow3e.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-3f->ChangeColumnType-(String-to-Number),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ) .as ( [ Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Nominated_Genres"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""test_column"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( Nominated , ""Y"" , Filter ( Genre == ""Action-Adventure"" ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow3f.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,TRUE
workflow-4a->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow4a.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-4b->DuplicateColumn,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 );
FRAMEUNITTEST | DuplicateColumn ( column = [ ""Genre"" ] , newCol = [ ""Genre_2_test"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow4b.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-4c->RenameColumn," Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_2_test , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_2_test , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_2_test"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
 FRAMEUNITTEST | RenameColumn ( column = [ Nominated ] , newCol = [ ""Nominated-test"" ] ) ;
 Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;",<<<text>>>workflow4c.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-4d->DropColumn,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_2_test , MovieBudget , Nominated_test , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_2_test , MovieBudget , Nominated_test , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_2_test"" , ""MovieBudget"" , ""Nominated_test"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | DropColumn ( columns = [ ""Genre_2_test"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow4d.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-4e->ExtractNumbersAndLetters,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated_test , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated_test , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated_test"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ExtractLetters ( columns = [ ""Title"" ] , override = [ false ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow4e.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-5a->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow5a.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-5b->ToUpper,"Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated"" , ""Studio"" , ""Genre"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ToUpperCase ( columns = [ ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;
                 ",<<<text>>>workflow5b.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-5c->AddColumn-(date),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | AddColumn ( newCol = [ ""date_test"" ] , dataType = [ ""DATE"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow5c.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-5d->ChangeColumnType-(Date-to-String),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""date_test"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ChangeColumnType ( column = [ date_test ] , dataType = [ ""STRING"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow5d.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-5e->ToProper-(Failing--bug),,<<<text>>>workflow5e.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,TRUE
workflow-5f->OutliersAlgorithm,,<<<text>>>workflow5f.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,TRUE
workflow-6a->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow6a.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-6b->ToLower,"Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated"" , ""Studio"" , ""Genre"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ToLowerCase ( columns = [ ""Genre"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow6b.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-6c->Trim,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | TrimColumns ( columns = [ ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow6c.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-6d->Classification-(incomplete),,<<<text>>>workflow6d.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-7a->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow7a.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-7b->UpdateRowValues-(MovieBudget-<-10000000->MovieBudget=100),"Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated"" , ""Studio"" , ""Genre"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( MovieBudget , ""100"" , Filter ( MovieBudget < 10000000 ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 )  ) , ( true ) ) ;",<<<text>>>workflow7b.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7c->UpdateRowValues-(Genre!=Action-Adventure->Genre=Drama),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( Genre , ""Drama"" , Filter ( Genre != ""Action-Adventure"" ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 )  ) , ( true ) ) ;",<<<text>>>workflow7c.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7d->UpdateRowValues-(Revenue_Domestic<=10000000>Revenue_Domestic=5),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( Revenue_Domestic , ""5"" , Filter ( Revenue_Domestic <= 10000000 ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 )  ) , ( true ) ) ;",<<<text>>>workflow7d.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7e->SplitColumn,,<<<text>>>workflow7e.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,TRUE
workflow-7f->ReplaceColumnValue,,<<<text>>>workflow7f.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,TRUE
workflow-7g->RenameColumn,,<<<text>>>workflow7g.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,TRUE
workflow-7h->RegexReplaceColumnValue,,<<<text>>>workflow7h.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,TRUE
workflow-8a,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow8a.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-8b-AddColumn-(Number),"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | AddColumn ( newCol = [ ""NewNumberColumn"" ] , dataType = [ ""NUMBER"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow8b.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-8c-UpdateRowValues,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , NewNumberColumn , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , NewNumberColumn , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""NewNumberColumn"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( MovieBudget , ""123456789"" , Filter ( MovieBudget >= 100000000 ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow8c.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-8d-CountIf,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , NewNumberColumn , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , NewNumberColumn , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""NewNumberColumn"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | CountIf ( column = [ Genre ] , regex = [ ""A"" ] , newCol = [ ""CountOfAInGenre"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow8d.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-9a,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow9a.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-9b-Discritize,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Discretize ( { ""column"" : ""Revenue_Domestic"" , ""breaks"" : ""(4109095,100000000,500000000,749766139)"" , ""labels"" : ""(sub100M,between100Mand500M,500Mplus)"" } ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( false ) ;",<<<text>>>workflow9b.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-9c-SplitUnpivot,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_Domestic_Discretized , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_Domestic_Discretized , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_Domestic_Discretized"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | SplitUnpivot ( columns = [ ""Genre"" ] , delimiter = [ ""-"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow9c.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-9d-NumericalCorrelation,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_Domestic_Discretized , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_Domestic_Discretized , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_Domestic_Discretized"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
FRAMEUNITTEST | RunNumericalCorrelation ( attributes = [ ""MovieBudget"" , ""Revenue_Domestic"" ] , panel = [ 0 ] ) ;",<<<text>>>workflow9d.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-9e-ClusterOptimization,"RunClustering ( algorithm = [ kmeans ] , multiOption = [ true ] , instance = [ Genre ] , attributes = [ ""MovieBudget"" ] , minNumClusters = [ 2 ] , maxNumClusters = [ 20 ] , uniqInstPerRow = [ No ] ) ;
Frame ( FRAMEUNITTEST ) | QueryAll ( ) | AutoTaskOptions ( panel = [ 0 ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;",<<<text>>>workflow9e.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,TRUE
workflow-10a,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow10a.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-10b-Pivot,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Pivot ( pivotCol = [ ""Genre"" ] , valueCol = [ ""MovieBudget"" ] , function = [ ""mean"" ] , maintainCols = [ ""Genre"" , ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow10b.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-10c-Unpivot,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Action_Adventure , Comedy_Musical , Documentary , Drama , Family_Animation , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Thriller_Horror , Title ) .as ( [ Action_Adventure , Comedy_Musical , Documentary , Drama , Family_Animation , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Thriller_Horror , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Action_Adventure"" , ""Comedy_Musical"" , ""Documentary"" , ""Drama"" , ""Family_Animation"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Thriller_Horror"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Unpivot ( columns = [ ""Action_Adventure"" , ""Comedy_Musical"" , ""Documentary"" , ""Drama"" , ""Family_Animation"" , ""Thriller_Horror"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow10c.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-10d-Transpose,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title , value_1 , variable_1 ) .as ( [ Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title , value_1 , variable_1 ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" , ""value_1"" , ""variable_1"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Transpose ( ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow10d.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-11a,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow11a.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-11b-SplitUnpivot,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | SplitUnpivot ( columns = [ ""Genre"" ] , delimiter = [ ""-"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow11b.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-11c-ToPercent,"FRAMEUNITTEST | ToPercent ( column = [ ""RottenTomatoes_Audience"" ] , sigDigits = [ 3 ] , by100 = [ true ] , newCol = [ ""RTAudiencePercent"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow11c.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-11d-RandomForest,"FRAMEUNITTEST | RunRandomForest ( classify = [ MovieBudget ] , attributes = [ ""Genre"" , ""Revenue_Domestic"" , ""Revenue_International"" ] , options = [ ""na.action=na.omit"" , ""importance=TRUE"" , ""ntree=1000"" ] ) | GetRFResults ( requestItem = [ VarImp ] , panel = [ 777 ] ) ;",<<<text>>>workflow11d.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-12a,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow12a.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-12b-DropColumn,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | DropColumn ( columns = [ ""Title"" , ""Genre"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow12b.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-12c-UpdateRows,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( RottenTomatoes_Audience , "".123"" , Filter ( RottenTomatoes_Audience >= 0 ) ) ;
FRAMEUNITTEST | UpdateRowValues ( RottenTomatoes_Critics , "".1234"" , Filter ( RottenTomatoes_Critics >= 0 ) ) ;
FRAMEUNITTEST | UpdateRowValues ( MovieBudget , ""1234"" , Filter ( MovieBudget >= 0 ) ) ;
FRAMEUNITTEST | UpdateRowValues ( Revenue_Domestic , ""12345"" , Filter ( Revenue_Domestic >= 0 ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow12c.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-12d-DropDuplicateRows,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | RemoveDuplicateRows ( ) ;
FRAMEUNITTEST | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) | Distinct ( false ) | Collect ( 2000 );",<<<text>>>workflow12d.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-12e-DropRows,"FRAMEUNITTEST | DropRows ( qs = [ Filter ( Revenue_International >= ""0"" ) ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;
     ",<<<text>>>workflow12e.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,TRUE
workflow-12f-LOF,"FRAMEUNITTEST | RunLOF ( instance = [ Studio ] , uniqInstPerRow = [ ""no"" ] , kNeighbors = [ 10 ] , attributes = [ ""Revenue_International"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow12f.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,TRUE
workflow-13a,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_college<<</appId>>>""}</encode>"" ) ;


Database ( database = [ ""d46cc7d6-7296-4e8e-a080-0af8a0da744c"" ] ) | Select ( UNIT_TEST_COLLEGE__ACT_CUM_75 , UNIT_TEST_COLLEGE__Adm_Rate , UNIT_TEST_COLLEGE__Avg_Cost_Academic_Year , UNIT_TEST_COLLEGE__Avg_Cost_Program_Year , UNIT_TEST_COLLEGE__Avg_Fac_Sal , UNIT_TEST_COLLEGE__City , UNIT_TEST_COLLEGE__City_State , UNIT_TEST_COLLEGE__Compl_Repay_1yr_Rate , UNIT_TEST_COLLEGE__Compl_Repay_7yr_Rate , UNIT_TEST_COLLEGE__CompletionRate_150_4 , UNIT_TEST_COLLEGE__CompletionRate_150_L4 , UNIT_TEST_COLLEGE__Control , UNIT_TEST_COLLEGE__Highest_Deg , UNIT_TEST_COLLEGE__Historically_Black , UNIT_TEST_COLLEGE__In_state_Tuition , UNIT_TEST_COLLEGE__Institution_Name , UNIT_TEST_COLLEGE__Lat , UNIT_TEST_COLLEGE__Level_of_institution , UNIT_TEST_COLLEGE__Locale , UNIT_TEST_COLLEGE__Long , UNIT_TEST_COLLEGE__Low_Inc_Aid , UNIT_TEST_COLLEGE__Main_Campus , UNIT_TEST_COLLEGE__Men_Only , UNIT_TEST_COLLEGE__Noncom_Repay_1yr_Rate , UNIT_TEST_COLLEGE__Noncom_Repay_7yr_Rate , UNIT_TEST_COLLEGE__Out_of_state_Tuition , UNIT_TEST_COLLEGE__Parent_Ed_HS , UNIT_TEST_COLLEGE__Parent_Ed_MS , UNIT_TEST_COLLEGE__Parent_Ed_PS , UNIT_TEST_COLLEGE__Percent_2OrMore , UNIT_TEST_COLLEGE__Percent_AIAN , UNIT_TEST_COLLEGE__Percent_Asian , UNIT_TEST_COLLEGE__Percent_Black , UNIT_TEST_COLLEGE__Percent_Female , UNIT_TEST_COLLEGE__Percent_First_Gen , UNIT_TEST_COLLEGE__Percent_Full_time_Fac , UNIT_TEST_COLLEGE__Percent_Hisp , UNIT_TEST_COLLEGE__Percent_Male , UNIT_TEST_COLLEGE__Percent_NHPI , UNIT_TEST_COLLEGE__Percent_NRA , UNIT_TEST_COLLEGE__Percent_Part_time , UNIT_TEST_COLLEGE__Percent_UNKN , UNIT_TEST_COLLEGE__Percent_Veterans , UNIT_TEST_COLLEGE__Percent_White , UNIT_TEST_COLLEGE__Predominant_Ugrad_Deg , UNIT_TEST_COLLEGE__Random , UNIT_TEST_COLLEGE__Religious_Affiliation , UNIT_TEST_COLLEGE__RetentionRate_FT4 , UNIT_TEST_COLLEGE__RetentionRate_FTL4 , UNIT_TEST_COLLEGE__RetentionRate_PT4 , UNIT_TEST_COLLEGE__RetentionRate_PTL4 , UNIT_TEST_COLLEGE__SAT_M_75 , UNIT_TEST_COLLEGE__SAT_R_75 , UNIT_TEST_COLLEGE__SAT_W_75 , UNIT_TEST_COLLEGE__State , UNIT_TEST_COLLEGE__TIV_Approval_Date , UNIT_TEST_COLLEGE__Top3Majors , UNIT_TEST_COLLEGE__UNIT_TEST_COLLEGE_UNIQUE_ROW_ID , UNIT_TEST_COLLEGE__URL , UNIT_TEST_COLLEGE__Undergrad_Enrollment , UNIT_TEST_COLLEGE__Women_Only , UNIT_TEST_COLLEGE__Zip ) .as ( [ ACT_CUM_75 , Adm_Rate , Avg_Cost_Academic_Year , Avg_Cost_Program_Year , Avg_Fac_Sal , City , City_State , Compl_Repay_1yr_Rate , Compl_Repay_7yr_Rate , CompletionRate_150_4 , CompletionRate_150_L4 , Control , Highest_Deg , Historically_Black , In_state_Tuition , Institution_Name , Lat , Level_of_institution , Locale , Long , Low_Inc_Aid , Main_Campus , Men_Only , Noncom_Repay_1yr_Rate , Noncom_Repay_7yr_Rate , Out_of_state_Tuition , Parent_Ed_HS , Parent_Ed_MS , Parent_Ed_PS , Percent_2OrMore , Percent_AIAN , Percent_Asian , Percent_Black , Percent_Female , Percent_First_Gen , Percent_Full_time_Fac , Percent_Hisp , Percent_Male , Percent_NHPI , Percent_NRA , Percent_Part_time , Percent_UNKN , Percent_Veterans , Percent_White , Predominant_Ugrad_Deg , Random , Religious_Affiliation , RetentionRate_FT4 , RetentionRate_FTL4 , RetentionRate_PT4 , RetentionRate_PTL4 , SAT_M_75 , SAT_R_75 , SAT_W_75 , State , TIV_Approval_Date , Top3Majors , UNIT_TEST_COLLEGE_UNIQUE_ROW_ID , URL , Undergrad_Enrollment , Women_Only , Zip ] ) | Import ( frame = [ CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ ""FRAME499728"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAME499728 ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAME499728 ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
ifError ( ( Task ( ""task3"" ) | Collect ( 2000 ) ) , ( true ) ) ;
FRAME499728 | Convert ( frameType = [ R ] ) .as ( [ 'FRAME499728' ] ) ;
Frame ( frame = [ FRAME499728 ] ) | Select ( ACT_CUM_75 , Adm_Rate , Avg_Cost_Academic_Year , Avg_Cost_Program_Year , Avg_Fac_Sal , City , City_State , CompletionRate_150_4 , CompletionRate_150_L4 , Compl_Repay_1yr_Rate , Compl_Repay_7yr_Rate , Control , Highest_Deg , Historically_Black , Institution_Name , In_state_Tuition , Lat , Level_of_institution , Locale , Long , Low_Inc_Aid , Main_Campus , Men_Only , Noncom_Repay_1yr_Rate , Noncom_Repay_7yr_Rate , Out_of_state_Tuition , Parent_Ed_HS , Parent_Ed_MS , Parent_Ed_PS , Percent_2OrMore , Percent_AIAN , Percent_Asian , Percent_Black , Percent_Female , Percent_First_Gen , Percent_Full_time_Fac , Percent_Hisp , Percent_Male , Percent_NHPI , Percent_NRA , Percent_Part_time , Percent_UNKN , Percent_Veterans , Percent_White , Predominant_Ugrad_Deg , Random , Religious_Affiliation , RetentionRate_FT4 , RetentionRate_FTL4 , RetentionRate_PT4 , RetentionRate_PTL4 , SAT_M_75 , SAT_R_75 , SAT_W_75 , State , TIV_Approval_Date , Top3Majors , Undergrad_Enrollment , UNIT_TEST_COLLEGE_UNIQUE_ROW_ID , URL , Women_Only , Zip ) .as ( [ ACT_CUM_75 , Adm_Rate , Avg_Cost_Academic_Year , Avg_Cost_Program_Year , Avg_Fac_Sal , City , City_State , CompletionRate_150_4 , CompletionRate_150_L4 , Compl_Repay_1yr_Rate , Compl_Repay_7yr_Rate , Control , Highest_Deg , Historically_Black , Institution_Name , In_state_Tuition , Lat , Level_of_institution , Locale , Long , Low_Inc_Aid , Main_Campus , Men_Only , Noncom_Repay_1yr_Rate , Noncom_Repay_7yr_Rate , Out_of_state_Tuition , Parent_Ed_HS , Parent_Ed_MS , Parent_Ed_PS , Percent_2OrMore , Percent_AIAN , Percent_Asian , Percent_Black , Percent_Female , Percent_First_Gen , Percent_Full_time_Fac , Percent_Hisp , Percent_Male , Percent_NHPI , Percent_NRA , Percent_Part_time , Percent_UNKN , Percent_Veterans , Percent_White , Predominant_Ugrad_Deg , Random , Religious_Affiliation , RetentionRate_FT4 , RetentionRate_FTL4 , RetentionRate_PT4 , RetentionRate_PTL4 , SAT_M_75 , SAT_R_75 , SAT_W_75 , State , TIV_Approval_Date , Top3Majors , Undergrad_Enrollment , UNIT_TEST_COLLEGE_UNIQUE_ROW_ID , URL , Women_Only , Zip ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""ACT_CUM_75"" , ""Adm_Rate"" , ""Avg_Cost_Academic_Year"" , ""Avg_Cost_Program_Year"" , ""Avg_Fac_Sal"" , ""City"" , ""City_State"" , ""CompletionRate_150_4"" , ""CompletionRate_150_L4"" , ""Compl_Repay_1yr_Rate"" , ""Compl_Repay_7yr_Rate"" , ""Control"" , ""Highest_Deg"" , ""Historically_Black"" , ""Institution_Name"" , ""In_state_Tuition"" , ""Lat"" , ""Level_of_institution"" , ""Locale"" , ""Long"" , ""Low_Inc_Aid"" , ""Main_Campus"" , ""Men_Only"" , ""Noncom_Repay_1yr_Rate"" , ""Noncom_Repay_7yr_Rate"" , ""Out_of_state_Tuition"" , ""Parent_Ed_HS"" , ""Parent_Ed_MS"" , ""Parent_Ed_PS"" , ""Percent_2OrMore"" , ""Percent_AIAN"" , ""Percent_Asian"" , ""Percent_Black"" , ""Percent_Female"" , ""Percent_First_Gen"" , ""Percent_Full_time_Fac"" , ""Percent_Hisp"" , ""Percent_Male"" , ""Percent_NHPI"" , ""Percent_NRA"" , ""Percent_Part_time"" , ""Percent_UNKN"" , ""Percent_Veterans"" , ""Percent_White"" , ""Predominant_Ugrad_Deg"" , ""Random"" , ""Religious_Affiliation"" , ""RetentionRate_FT4"" , ""RetentionRate_FTL4"" , ""RetentionRate_PT4"" , ""RetentionRate_PTL4"" , ""SAT_M_75"" , ""SAT_R_75"" , ""SAT_W_75"" , ""State"" , ""TIV_Approval_Date"" , ""Top3Majors"" , ""Undergrad_Enrollment"" , ""UNIT_TEST_COLLEGE_UNIQUE_ROW_ID"" , ""URL"" , ""Women_Only"" , ""Zip"" ] } } } ) | Collect ( 2000 ) ;
FRAME499728 | Convert ( frameType = [ R ] ) .as ( [ 'FRAME499728' ] ) ;",<<<text>>>workflow13a.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,TRUE
workflow-13b-,,<<<text>>>workflow13b.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,TRUE
workflow-13c-,,<<<text>>>workflow13c.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,TRUE
workflow-13d-,,<<<text>>>workflow13d.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,TRUE
workflow-13e-,,<<<text>>>workflow13e.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,TRUE
workflow-13f-,,<<<text>>>workflow13f.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,TRUE
