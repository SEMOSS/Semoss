name,pixel,expected_json,compare_all,exclude_paths,ignore_order,ignore_added_dictionary,ignore_added_iterable,clean_test_databases,ignore_failure,insight_state,skip_test
clean-add-column-string-1,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics ) .as ( [ Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics ] ) | Import ( frame = [ FRAMEUNITTEST ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
<j><encode>synchronizeGridToRDataTable(""FRAMEUNITTEST"")</encode></j> ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
AddColumn ( newCol = [ ""test"" ] , dataType = [ ""STRING"" ] ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;",<<<text>>>clean_add_column_string.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
clean-add-column-string-2,"Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;",<<<text>>>clean_add_column_string.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
clean-add-column-number,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics ) .as ( [ Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics ] ) | Import ( frame = [ FRAMEUNITTEST ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
<j><encode>synchronizeGridToRDataTable(""FRAMEUNITTEST"")</encode></j> ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
AddColumn ( newCol = [ ""test"" ] , dataType = [ ""NUMBER"" ] ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;",<<<text>>>clean_add_column_number.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
filter,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Studio == [ ""Buena_Vista"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
filter-mixed,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Studio == [ ""Buena_Vista"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
ReplaceFrameFilter ( ( Genre == [ ""Comedy-Musical"" , ""Drama"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
ReplaceFrameFilter ( ( Director == [ ""Alex_Kurtzman"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
DeleteFrameFilter ( index = [ 2 ] ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_mixed.json<<</text>>>,TRUE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
filter-mixed-rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Studio == [ ""Buena_Vista"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
ReplaceFrameFilter ( ( Genre == [ ""Comedy-Musical"" , ""Drama"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
ReplaceFrameFilter ( ( Director == [ ""Alex_Kurtzman"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
DeleteFrameFilter ( index = [ 2 ] ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_mixed_rdf.json<<</text>>>,TRUE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
filter-multiple,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Genre == [ ""Comedy-Musical"" , ""Drama"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_multiple.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
filter-multiple-rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Genre == [ ""Comedy-Musical"" , ""Drama"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_multiple_rdf.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
filter-rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Studio == [ ""Buena_Vista"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_rdf.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
import-inner-join,"CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ; 
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Frame ( ) | QueryAll ( ) | Collect ( -1 ) ;",<<<text>>>import_inner_join.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
import-inner-join-rdf,"CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ; 
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Frame ( ) | QueryAll ( ) | Collect ( -1 ) ;",<<<text>>>import_inner_join_rdf.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
predict-metamodel,"PredictMetamodel(filePath=[""<<<testDir>>>/data/unit_test_movie.csv""], delimiter=["",""], rowCount=[false]);",<<<text>>>predict_metamodel.json<<</text>>>,FALSE,"root['fileName'],root['fileLocation']",TRUE,FALSE,FALSE,,FALSE,START END,FALSE
r-health,"R ( ""<encode>1+1</encode>"" ) ;",<<<text>>>r_health.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE,START END,FALSE
sort-ascending,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;
Panel ( 0 ) | SetPanelSort ( columns = [ ""Title"" ] , sort = [ ""asc"" ] ) ;
Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>sort_ascending.json<<</text>>>,FALSE,,FALSE,TRUE,FALSE,,FALSE,START END,FALSE
sort-ascending-rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;
Panel ( 0 ) | SetPanelSort ( columns = [ ""Title"" ] , sort = [ ""asc"" ] ) ;
Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>sort_ascending_rdf.json<<</text>>>,FALSE,,FALSE,TRUE,FALSE,,FALSE,START END,FALSE
sort-descending,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director , Title__Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated__Nominated , Studio__Studio , Genre__Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;
Panel ( 0 ) | SetPanelSort ( columns = [ ""Title"" ] , sort = [ ""desc"" ] ) ;
Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>sort_descending.json<<</text>>>,FALSE,,FALSE,TRUE,FALSE,,FALSE,START END,FALSE
sort-descending-rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;
Panel ( 0 ) | SetPanelSort ( columns = [ ""Title"" ] , sort = [ ""desc"" ] ) ;
Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>sort_descending_rdf.json<<</text>>>,FALSE,,FALSE,TRUE,FALSE,,FALSE,START END,FALSE
version,Version();,"{
  ""pixelExpression"": ""Version ( ) ;"",
  ""output"": {
    ""datetime"": ""1000-01-01 01:01:01"",
    ""version"": ""1.0.0-SNAPSHOT""
  }
}",FALSE,"root['datetime'],root['version']",TRUE,FALSE,FALSE,,FALSE,START END,FALSE
Diabetes-1,"AddPanel ( 0 ) ; Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ; Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>(<Frame> | UnfilterFrame(<SelectedColumn>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if((IsEmpty(<SelectedValues>)),(<Frame> | UnfilterFrame(<SelectedColumn>)), (<Frame> | SetFrameFilter(<SelectedColumn>==<SelectedValues>)));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ; Panel ( 0 ) | RetrievePanelEvents ( ) ; Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ; Panel ( 0 ) | SetPanelView ( ""pipeline"" , ""<encode>{""app_id"":""NEWSEMOSSAPP""}</encode>"" ) ; FileRead(filePath=[""<<<testDir>>>/data/unit_test_diabetes.csv""],dataTypeMap=[{""id"":""STRING"",""chol"":""INT"",""stab_glu"":""INT"",""hdl"":""INT"",""ratio"":""DOUBLE"",""glyhb"":""DOUBLE"",""location"":""STRING"",""age"":""INT"",""gender"":""STRING"",""height"":""INT"",""weight"":""INT"",""frame"":""STRING"",""bp_1s"":""INT"",""bp_1d"":""INT"",""bp_2s"":""INT"",""bp_2d"":""INT"",""waist"":""INT"",""hip"":""INT"",""time_ppn"":""INT"",""Drug"":""STRING""}],delimiter=["",""],newHeaders=[{}],fileName=[""unit_test_diabetes.csv""], additionalDataTypes=[{""id"":""INT""}])|Select(DND__id, DND__chol, DND__stab_glu, DND__hdl, DND__ratio, DND__glyhb, DND__location, DND__age, DND__gender, DND__height, DND__weight, DND__frame, DND__bp_1s, DND__bp_1d, DND__bp_2s, DND__bp_2d, DND__waist, DND__hip, DND__time_ppn, DND__Drug).as([id, chol, stab_glu, hdl, ratio, glyhb, location, age, gender, height, weight, frame, bp_1s, bp_1d, bp_2s, bp_2d, waist, hip, time_ppn, Drug]) | Import(frame=[CreateFrame(frameType=[GRID], override=[true]).as([""FRAMEUNITTEST""])]); ",<<<text>>>diabetes-1.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
Diabetes-2,"Panel(0)|SetPanelView(""visualization"");Frame( frame=[FRAMEUNITTEST] )|QueryAll()|AutoTaskOptions(panel=[""0""], layout=[""Grid""] )|Collect(2000); if(  (FRAMEUNITTEST|HasDuplicates(age)) , (Frame( frame=[FRAMEUNITTEST] )|Select(age, Count(id)).as([age, Count_of_id])|Group(age)|With(Panel(0))|Format(type=['table'])|TaskOptions({""0"":{""layout"":""Column"",""alignment"":{""label"":[""age""],""value"":[""Count_of_id""],""tooltip"":[],""facet"":[]}}})|Collect(2000)) , (Frame( frame=[FRAMEUNITTEST] )|Select(age, Count(id)).as([age, Count_of_id])|Group(age)|With(Panel(0))|Format(type=['table'])|TaskOptions({""0"":{""layout"":""Column"",""alignment"":{""label"":[""age""],""value"":[""Count_of_id""],""tooltip"":[],""facet"":[]}}})|Collect(2000)) ); ",<<<text>>>diabetes-2.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
Diabetes-3,"if((IsEmpty([33,34,36,37,38,40,41,42,43,44,45,47,48,50,51,52,53,54,55,58,59,60,61,63,65,66])),(FRAMEUNITTEST | UnfilterFrame(age)), (FRAMEUNITTEST | SetFrameFilter(age==[33,34,36,37,38,40,41,42,43,44,45,47,48,50,51,52,53,54,55,58,59,60,61,63,65,66]))); ifError(  (Frame( frame=[FRAMEUNITTEST] )|Select(age, Count(id)).as([age, Count_of_id])|Group(age)|With(Panel(0))|Format(type=['table'])|TaskOptions({""0"":{""layout"":""Column"",""alignment"":{""label"":[""age""],""value"":[""Count_of_id""]}}})|Collect(2000)) , (true) ); ",<<<text>>>diabetes-3.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
Diabetes-4,"if((IsEmpty([])),(FRAMEUNITTEST | UnfilterFrame(age)), (FRAMEUNITTEST | SetFrameFilter(age==[]))); Panel(0)|Clone(""1""); if(  (FRAMEUNITTEST|HasDuplicates(id)) , (Frame( frame=[FRAMEUNITTEST] )|Select(id, Average(height), Average(weight)).as([id, Average_of_height, Average_of_weight])|Group(id)|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Scatter"",""alignment"":{""label"":[""id""],""x"":[""Average_of_height""],""y"":[""Average_of_weight""],""z"":[],""series"":[],""tooltip"":[],""facet"":[]}}})|Collect(2000)) , (Frame( frame=[FRAMEUNITTEST] )|Select(id, height, weight).as([id, height, weight])|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Scatter"",""alignment"":{""label"":[""id""],""x"":[""height""],""y"":[""weight""],""z"":[],""series"":[],""tooltip"":[],""facet"":[]}}})|Collect(2000)) ); ",<<<text>>>diabetes-4.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
Diabetes-5,"if((IsEmpty([33,34,35,36,37,38,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63])),(FRAMEUNITTEST | UnfilterFrame(age)), (FRAMEUNITTEST | SetFrameFilter(age==[33,34,35,36,37,38,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63]))); ifError(  (Frame( frame=[FRAMEUNITTEST] )|Select(height, weight, id).as([height, weight, id])|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Scatter"",""alignment"":{""x"":[""height""],""y"":[""weight""],""label"":[""id""]}}})|Collect(2000)) , (true) ); ",<<<text>>>diabetes-5.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
Diabetes-6,"if((IsEmpty([])),(FRAMEUNITTEST | UnfilterFrame(age)), (FRAMEUNITTEST | SetFrameFilter(age==[]))); if(  (FRAMEUNITTEST|HasDuplicates(Drug)) , (Frame( frame=[FRAMEUNITTEST] )|Select(Drug, Count(id)).as([Drug, Count_of_id])|Group(Drug)|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Pie"",""alignment"":{""label"":[""Drug""],""value"":[""Count_of_id""],""heat"":[],""tooltip"":[],""facet"":[]}}})|Collect(2000)) , (Frame( frame=[FRAMEUNITTEST] )|Select(Drug, Count(id)).as([Drug, Count_of_id])|Group(Drug)|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Pie"",""alignment"":{""label"":[""Drug""],""value"":[""Count_of_id""],""heat"":[],""tooltip"":[],""facet"":[]}}})|Collect(2000)) ); FRAMEUNITTEST|Convert( frameType=[R]).as(['FRAMEUNITTEST']);Frame( frame=[FRAMEUNITTEST] )|Select(age, bp_1d, bp_1s, bp_2d, bp_2s, chol, Drug, frame, gender, glyhb, hdl, height, hip, id, location, ratio, stab_glu, time_ppn, waist, weight).as([age, bp_1d, bp_1s, bp_2d, bp_2s, chol, Drug, frame, gender, glyhb, hdl, height, hip, id, location, ratio, stab_glu, time_ppn, waist, weight])|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Grid"",""alignment"":{""label"":[""age"",""bp_1d"",""bp_1s"",""bp_2d"",""bp_2s"",""chol"",""Drug"",""frame"",""gender"",""glyhb"",""hdl"",""height"",""hip"",""id"",""location"",""ratio"",""stab_glu"",""time_ppn"",""waist"",""weight""]}}})|Collect(2000); ",<<<text>>>diabetes-6.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
Diabetes-7,"x=FRAMEUNITTEST|MatchColumnValues(column=[""frame""]); Frame(frame=[x])|Select(col1, col2, distance).as([col1, col2, distance])|Sort(columns=[""distance""], sort=[""asc""])|Filter(distance<=0.30000000000000004)|Collect(10); ",<<<text>>>diabetes-7.json<<</text>>>,FALSE,"root['taskId'],root['sources']",TRUE,TRUE,FALSE,,FALSE,,FALSE
Diabetes-8,"FRAMEUNITTEST | SplitUnpivot(columns = [""Drug""], delimiter = ["",_""]);ifError(  (Frame( frame=[FRAMEUNITTEST] )|QueryAll()|AutoTaskOptions(panel=[""1""], layout=[""Grid""] )|Collect(2000)) , (true) );
FRAMEUNITTEST | SplitUnpivot(columns = [""Drug""], delimiter = ["",""]);ifError(  (Frame( frame=[FRAMEUNITTEST] )|QueryAll()|AutoTaskOptions(panel=[""1""], layout=[""Grid""] )|Collect(2000)) , (true) );",<<<text>>>diabetes-8.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
Diabetes-9,"FRAMEUNITTEST|UpdateMatchColumnValues(column=[""frame""], matches=[""med == medium"", ""S == small"", ""L == large""], matchesTable=[""x""]); ",<<<text>>>diabetes-9.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
Diabetes-10,"if(  (FRAMEUNITTEST|HasDuplicates(Drug)) , (Frame( frame=[FRAMEUNITTEST] )|Select(Drug, Count(id)).as([Drug, Count_of_id])|Group(Drug)|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Pie"",""alignment"":{""label"":[""Drug""],""value"":[""Count_of_id""],""heat"":[],""tooltip"":[],""facet"":[]}}})|Collect(2000)) , (Frame( frame=[FRAMEUNITTEST] )|Select(Drug, Count(id)).as([Drug, Count_of_id])|Group(Drug)|With(Panel(1))|Format(type=['table'])|TaskOptions({""1"":{""layout"":""Pie"",""alignment"":{""label"":[""Drug""],""value"":[""Count_of_id""],""heat"":[],""tooltip"":[],""facet"":[]}}})|Collect(2000)) ); ",<<<text>>>diabetes-10.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
Diabetes-11,"Panel(1)|SetPanelView(""visualization"", ""<encode>{""type"":""echarts""}</encode>"");FRAMEUNITTEST | RunNumericalCorrelation(attributes=[""age"",""bp_1d"",""bp_1s"",""bp_2d"",""bp_2s"",""chol"",""glyhb"",""hdl"",""height"",""hip"",""ratio"",""stab_glu"",""time_ppn"",""waist"",""weight""], panel=[1]); ",<<<text>>>diabetes-11.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-1a-r->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director  , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ Director  , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Director ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( Director , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ Director , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director""  , ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow1ar.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-1b-r->DropColumn-Director-(ASCII->UTF-8-issue),"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | DropColumn ( columns = [ ""Director"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ; ",<<<text>>>workflow1br.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,TRUE,,FALSE
workflow-1c-r->DropRows-(Genre==Action-Adventure),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | DropRows ( qs = [ Filter ( Genre == ""Action-Adventure"" ) ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow1cr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,TRUE,,FALSE
workflow-1d-r->RegexReplColumnValue-(MovieBudget --> 50000000=9999999),"FRAMEUNITTEST | RegexReplaceColumnValue ( column = [ ""MovieBudget"" ] , value = [ ""50000000"" ] , newValue = [ ""9999999"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow1dr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,TRUE,END,FALSE
workflow-2a-r->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow2ar.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-2b-r->Collapse,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Collapse ( groupByColumn = [ ""Genre"" , ""Nominated"" ] , value = [ ""MovieBudget"" ] , delimiter = [ "":"" ] , maintainCols = [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow2br.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-2c-r->Concatenate,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , MovieBudget_Collapse , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , MovieBudget_Collapse , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""MovieBudget_Collapse"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | JoinColumns ( newCol = [ ""Genre_and_MovieBudget"" ] , delimiter = [ "","" ] , columns = [ ""Genre"" , ""MovieBudget"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow2cr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-2d-r->2nd-Collapse,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_and_MovieBudget , MovieBudget , MovieBudget_Collapse , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_and_MovieBudget , MovieBudget , MovieBudget_Collapse , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_and_MovieBudget"" , ""MovieBudget"" , ""MovieBudget_Collapse"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Collapse ( groupByColumn = [ ""Nominated"" , ""Revenue_Domestic"" ] , value = [ ""Genre"" ] , delimiter = [ ""&"" ] , maintainCols = [ ""Genre"" , ""Genre_and_MovieBudget"" , ""MovieBudget"" , ""MovieBudget_Collapse"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow2dr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-2e-r->2nd-Concatenate,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_and_MovieBudget , Genre_Collapse , MovieBudget , MovieBudget_Collapse , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_and_MovieBudget , Genre_Collapse , MovieBudget , MovieBudget_Collapse , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_and_MovieBudget"" , ""Genre_Collapse"" , ""MovieBudget"" , ""MovieBudget_Collapse"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | JoinColumns ( newCol = [ ""Both_RottenTomatoes"" ] , delimiter = [ ""+"" ] , columns = [ ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow2er.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-3a-r->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow3ar.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-3b-r->Concatenate,"Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated"" , ""Studio"" , ""Genre"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | JoinColumns ( newCol = [ ""Nominated_Genres"" ] , delimiter = [ "","" ] , columns = [ ""Genre"" , ""Nominated"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;
        ",<<<text>>>workflow3br.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-3c-r->AddColumn,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Nominated_Genres"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | AddColumn ( newCol = [ ""test_column"" ] , dataType = [ ""STRING"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow3cr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-3d-r->ChangeColumnType->Number-to-String,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ) .as ( [ Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Nominated_Genres"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""test_column"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ChangeColumnType ( column = [ MovieBudget ] , dataType = [ ""STRING"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow3dr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-3e-r->UpdateRowValues-(string==string),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ) .as ( [ Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Nominated_Genres"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""test_column"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( Nominated , ""Y"" , Filter ( Genre == ""Action-Adventure"" ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow3er.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-3f-r->ChangeColumnType-(String-to-Number),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ) .as ( [ Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Nominated_Genres"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""test_column"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ChangeColumnType ( column = [ MovieBudget ] , dataType = [ ""NUMBER"" ] ) ;;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow3fr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-4a-r->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow4ar.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-4b-r->DuplicateColumn,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 );
FRAMEUNITTEST | DuplicateColumn ( column = [ ""Genre"" ] , newCol = [ ""Genre_2_test"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow4br.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-4c-r->RenameColumn," Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_2_test , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_2_test , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_2_test"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
 FRAMEUNITTEST | RenameColumn ( column = [ Nominated ] , newCol = [ ""Nominated-test"" ] ) ;
 Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;",<<<text>>>workflow4cr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-4d-r->DropColumn,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_2_test , MovieBudget , Nominated_test , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_2_test , MovieBudget , Nominated_test , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_2_test"" , ""MovieBudget"" , ""Nominated_test"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | DropColumn ( columns = [ ""Genre_2_test"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow4dr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-4e-r->ExtractNumbersAndLetters-(ExtractLetters),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated_test , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated_test , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated_test"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ExtractLetters ( columns = [ ""Title"" ] , override = [ false ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow4er.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-5a-r->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow5ar.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-5b-r->ToUpperCase,"Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated"" , ""Studio"" , ""Genre"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ToUpperCase ( columns = [ ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;
                 ",<<<text>>>workflow5br.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-5c-r->AddColumn-(date),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | AddColumn ( newCol = [ ""date_test"" ] , dataType = [ ""DATE"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow5cr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-5d-r->ChangeColumnType-(Date-to-String),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""date_test"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ChangeColumnType ( column = [ date_test ] , dataType = [ ""STRING"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow5dr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-5e-r->ToProperCase,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""date_test"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ToProperCase ( columns = [ ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""date_test"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow5er.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-5f-r->OutliersAlgorithm,"FRAMEUNITTEST | RunOutlier ( instance = [ Revenue_Domestic ] , attributes = [ ""MovieBudget"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Revenue_International"" ] , alpha = [ 0 . 10 ] , uniqInstPerRow = [ Yes ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow5fr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-6a-r->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow6ar.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-6b-r->ToLowerCase,"Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated"" , ""Studio"" , ""Genre"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ToLowerCase ( columns = [ ""Genre"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow6br.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-6c-r->Trim,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | TrimColumns ( columns = [ ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow6cr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-6d-r->Classification,"Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
FRAMEUNITTEST | RunClassification ( classify = [ MovieBudget ] , attributes = [ ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" ] , panel = [ 0 ] ) ;",<<<text>>>workflow6dr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-7a-r->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow7ar.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-7b-r->UpdateRowValues-(MovieBudget-<-10000000->MovieBudget=100),"Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated"" , ""Studio"" , ""Genre"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( MovieBudget , ""100"" , Filter ( MovieBudget < 10000000 ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 )  ) , ( true ) ) ;",<<<text>>>workflow7br.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7c-r->UpdateRowValues-(Genre!=Action-Adventure->Genre=Drama),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( Genre , ""Drama"" , Filter ( Genre != ""Action-Adventure"" ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 )  ) , ( true ) ) ;",<<<text>>>workflow7cr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7d-r->UpdateRowValues-(Revenue_Domestic<=10000000>Revenue_Domestic=5),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( Revenue_Domestic , ""5"" , Filter ( Revenue_Domestic <= 10000000 ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 )  ) , ( true ) ) ;",<<<text>>>workflow7dr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7e-r->SplitColumn,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | SplitColumns ( columns = [ ""Genre"" ] , delimiter = [ ""-"" ] , search = [ ""Regex"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow7er.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7f-r->RegexReplaceColumnValue,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_1 , Genre_2 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_1 , Genre_2 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_1"" , ""Genre_2"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | RegexReplaceColumnValue ( column = [ ""Genre"" ] , value = [ ""Drama"" ] , newValue = [ ""Comedy-Drama"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_1 , Genre_2 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_1 , Genre_2 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_1"" , ""Genre_2"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow7fr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7g-r->RenameColumn,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_1 , Genre_2 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_1 , Genre_2 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_1"" , ""Genre_2"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | RenameColumn ( column = [ Genre_1 ] , newCol = [ ""Action_Movies"" ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;",<<<text>>>workflow7gr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7h-r->ReplaceColumnValue,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Action_Movies , Genre , Genre_2 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Action_Movies , Genre , Genre_2 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Action_Movies"" , ""Genre"" , ""Genre_2"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ReplaceColumnValue ( column = [ ""Genre_2"" ] , value = [ ""Adventure"" ] , newValue = [ ""Adventurous"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Action_Movies , Genre , Genre_2 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Action_Movies , Genre , Genre_2 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Action_Movies"" , ""Genre"" , ""Genre_2"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow7hr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-8a-r,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow8ar.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-8b-r-AddColumn-(Number),"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | AddColumn ( newCol = [ ""NewNumberColumn"" ] , dataType = [ ""NUMBER"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow8br.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-8c-r-UpdateRowValues,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , NewNumberColumn , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , NewNumberColumn , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""NewNumberColumn"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( MovieBudget , ""123456789"" , Filter ( MovieBudget >= 100000000 ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow8cr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-8d-r-CountIf,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , NewNumberColumn , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , NewNumberColumn , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""NewNumberColumn"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | CountIf ( column = [ Genre ] , regex = [ ""A"" ] , newCol = [ ""CountOfAInGenre"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow8dr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-9a-r,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow9ar.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-9b-r-Discritize,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Discretize ( { ""column"" : ""Revenue_Domestic"" , ""breaks"" : ""(4109095,100000000,500000000,749766139)"" , ""labels"" : ""(sub100M,between100Mand500M,500Mplus)"" } ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( false ) ;",<<<text>>>workflow9br.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-9c-r-SplitUnpivot,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_Domestic_Discretized , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_Domestic_Discretized , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_Domestic_Discretized"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | SplitUnpivot ( columns = [ ""Genre"" ] , delimiter = [ ""-"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow9cr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-9d-r-NumericalCorrelation,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_Domestic_Discretized , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_Domestic_Discretized , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_Domestic_Discretized"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
FRAMEUNITTEST | RunNumericalCorrelation ( attributes = [ ""MovieBudget"" , ""Revenue_Domestic"" ] , panel = [ 0 ] ) ;",<<<text>>>workflow9dr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-9e-r-ClusterOptimization,"RunClustering ( algorithm = [ kmeans ] , multiOption = [ true ] , instance = [ Genre ] , attributes = [ ""MovieBudget"" , ""Revenue_Domestic"" , ""RottenTomatoes_Critics"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" ] , minNumClusters = [ 2 ] , maxNumClusters = [ 5 ] , uniqInstPerRow = [ No ] ) ;
FrameHeaders ( ) ;",<<<text>>>workflow9er.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-10a-r,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow10ar.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-10b-r-Pivot,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Pivot ( pivotCol = [ ""Genre"" ] , valueCol = [ ""MovieBudget"" ] , function = [ """" ] , maintainCols = [ ""Studio"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow10br.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-10c-r-Unpivot,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Action_Adventure , Comedy_Musical , Documentary , Drama , Family_Animation , Studio , Thriller_Horror ) .as ( [ Action_Adventure , Comedy_Musical , Documentary , Drama , Family_Animation , Studio , Thriller_Horror ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Action_Adventure"" , ""Comedy_Musical"" , ""Documentary"" , ""Drama"" , ""Family_Animation"" , ""Studio"" , ""Thriller_Horror"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Unpivot ( columns = [ ""Action_Adventure"" , ""Comedy_Musical"" , ""Documentary"" , ""Drama"" , ""Family_Animation"" , ""Thriller_Horror"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow10cr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-10d-r-Transpose,"FRAMEUNITTEST | Transpose ( ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow10dr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-11a-r,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow11ar.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-11b-r-SplitUnpivot,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | SplitUnpivot ( columns = [ ""Genre"" ] , delimiter = [ ""-"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow11br.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-11c-r-ToPercent,"FRAMEUNITTEST | ToPercent ( column = [ ""RottenTomatoes_Audience"" ] , sigDigits = [ 3 ] , by100 = [ true ] , newCol = [ ""RTAudiencePercent"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow11cr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-11d-r-RandomForest,"FRAMEUNITTEST | RunRandomForest ( classify = [ MovieBudget ] , attributes = [ ""Genre"" , ""Revenue_Domestic"" , ""Revenue_International"" ] , options = [ ""na.action=na.omit"" , ""importance=TRUE"" , ""ntree=1000"" ] ) | GetRFResults ( requestItem = [ VarImp ] , panel = [ 777 ] ) ;",<<<text>>>workflow11dr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-12a-r,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow12ar.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-12b-r-DropColumn,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | DropColumn ( columns = [ ""Title"" , ""Genre"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow12br.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-12c-r-UpdateRowValues,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( RottenTomatoes_Audience , .123 , Filter ( RottenTomatoes_Audience >= 0 ) ) ;
FRAMEUNITTEST | UpdateRowValues ( RottenTomatoes_Critics , .1234 , Filter ( RottenTomatoes_Critics >= 0 ) ) ;
FRAMEUNITTEST | UpdateRowValues ( MovieBudget , 1234 , Filter ( MovieBudget >= 0 ) ) ;
FRAMEUNITTEST | UpdateRowValues ( Revenue_Domestic , 12345 , Filter ( Revenue_Domestic >= 0 ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow12cr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-12d-r-DropDuplicateRows,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | RemoveDuplicateRows ( ) ;
FRAMEUNITTEST | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) | Distinct ( false ) | Collect ( 2000 );",<<<text>>>workflow12dr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-12e-r-DropRows,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | DropRows ( qs = [ Filter ( Revenue_International <= ""0"" ) ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow12er.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-12f-r-LOF,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | RunLOF ( instance = [ Studio ] , uniqInstPerRow = [ ""no"" ] , kNeighbors = [ 10 ] , attributes = [ ""Revenue_International"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow12fr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-13a-r,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow13ar.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-13b-r-ColumnAverage,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
FRAMEUNITTEST | ColumnAverage ( columns = [ ""Revenue_Domestic"" , ""Revenue_International"" ] , newCol = [ 'AvgRevenue' ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow13br.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-13c-r-Concatenate,"FRAMEUNITTEST | JoinColumns ( newCol = [ ""TitleAndBudget"" ] , delimiter = [ ""-"" ] , columns = [ ""Title"" , ""MovieBudget"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow13cr.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-1a-py->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director__Director  , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ Director  , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Director ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( frame = [ CreateFrame ( frameType = [ PY ] , override = [ true ] ) .as ( [ ""FRAMEUNITTEST"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( Director , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ Director , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director""  , ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow1apy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-1b-py->DropColumn-Director-(ASCII->UTF-8-issue),"Frame ( ) | Select ( Director , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ) .as ( [ Director , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated , Studio , Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated"" , ""Studio"" , ""Genre"" ] } } } ) | Collect ( 2000 ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | DropColumn ( columns = [ ""Director"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow1bpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-1c-py->DropRows-(Genre==Action-Adventure),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | DropRows ( qs = [ Filter ( Genre == ""Action-Adventure"" ) ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow1cpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-1d-py->RegexReplaceColumnValue-(MovieBudget===8000000=9999999),"FRAMEUNITTEST | RegexReplaceColumnValue ( column = [ ""MovieBudget"" ] , value = [ ""50000000"" ] , newValue = [ ""9999999"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow1dpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-2a-py->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( frame = [ CreateFrame ( frameType = [ PY ] , override = [ true ] ) .as ( [ ""FRAMEUNITTEST"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow2apy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-2b-py->Collapse,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Collapse ( groupByColumn = [ ""Genre"" , ""Nominated"" ] , value = [ ""MovieBudget"" ] , delimiter = [ "":"" ] , maintainCols = [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow2bpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-2c-py->Concatenate,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Collapsed_MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Collapsed_MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Collapsed_MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | JoinColumns ( newCol = [ ""Genre_and_MovieBudget"" ] , delimiter = [ "","" ] , columns = [ ""Genre"" , ""MovieBudget"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow2cpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-2d-py->2nd-Collapse,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_and_MovieBudget , MovieBudget , Collapsed_MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_and_MovieBudget , MovieBudget , Collapsed_MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_and_MovieBudget"" , ""MovieBudget"" , ""Collapsed_MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Collapse ( groupByColumn = [ ""Nominated"" , ""Revenue_Domestic"" ] , value = [ ""Genre"" ] , delimiter = [ ""&"" ] , maintainCols = [ ""Genre"" , ""Genre_and_MovieBudget"" , ""MovieBudget"" , ""Collapsed_MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow2dpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-2e-py->2nd-Concatenate,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_and_MovieBudget , Collapsed_Genre , MovieBudget , Collapsed_MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_and_MovieBudget , Collapsed_Genre , MovieBudget , Collapsed_MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_and_MovieBudget"" , ""Collapsed_Genre"" , ""MovieBudget"" , ""Collapsed_MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | JoinColumns ( newCol = [ ""Both_RottenTomatoes"" ] , delimiter = [ ""+"" ] , columns = [ ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow2epy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-3a-py->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( frame = [ CreateFrame ( frameType = [ PY ] , override = [ true ] ) .as ( [ ""FRAMEUNITTEST"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow3apy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-3b-py->Concatenate,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | JoinColumns ( newCol = [ ""Nominated_Genres"" ] , delimiter = [ "","" ] , columns = [ ""Genre"" , ""Nominated"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;
        ",<<<text>>>workflow3bpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-3c-py->AddColumn,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Nominated_Genres"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | AddColumn ( newCol = [ ""test_column"" ] , dataType = [ ""STRING"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow3cpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-3d-py->ChangeColumnType()->Number-to-String,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ) .as ( [ Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Nominated_Genres"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""test_column"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ChangeColumnType ( column = [ MovieBudget ] , dataType = [ ""STRING"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow3dpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-3e-py->UpdateRowValues-(string==string),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ) .as ( [ Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Nominated_Genres"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""test_column"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( Nominated , ""Y"" , Filter ( Genre == ""Action-Adventure"" ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow3epy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-3f-py->ChangeColumnType-(String-to-Number),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ) .as ( [ Genre , MovieBudget , Nominated , Nominated_Genres , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , test_column , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Nominated_Genres"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""test_column"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ChangeColumnType ( column = [ MovieBudget ] , dataType = [ ""NUMBER"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow3fpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-4a-py->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( frame = [ CreateFrame ( frameType = [ PY ] , override = [ true ] ) .as ( [ ""FRAMEUNITTEST"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow4apy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-4b-py->DuplicateColumn,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 );
FRAMEUNITTEST | DuplicateColumn ( column = [ ""Genre"" ] , newCol = [ ""Genre_2_test"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow4bpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-4c-py->RenameColumn," Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_2_test , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_2_test , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_2_test"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
 FRAMEUNITTEST | RenameColumn ( column = [ Nominated ] , newCol = [ ""Nominated-test"" ] ) ;
 Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;",<<<text>>>workflow4cpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-4d-py->DropColumn,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_2_test , MovieBudget , Nominated_test , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_2_test , MovieBudget , Nominated_test , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_2_test"" , ""MovieBudget"" , ""Nominated_test"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | DropColumn ( columns = [ ""Genre_2_test"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow4dpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-4e-py->ExtractNumbersAndLetters-(ExtractLetters),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated_test , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated_test , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated_test"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ExtractLetters ( columns = [ ""Title"" ] , override = [ false ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow4epy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-5a-py->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( frame = [ CreateFrame ( frameType = [ PY ] , override = [ true ] ) .as ( [ ""FRAMEUNITTEST"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow5apy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-5b-py->ToUpperCase,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ToUpperCase ( columns = [ ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;
                 ",<<<text>>>workflow5bpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-5c-py->AddColumn-(date),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | AddColumn ( newCol = [ ""date_test"" ] , dataType = [ ""DATE"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow5cpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-5d-py->ChangeColumnType-(Date-to-String),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""date_test"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ChangeColumnType ( column = [ date_test ] , dataType = [ ""STRING"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow5dpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-5e-py->ToProperCase,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""date_test"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ToProperCase ( columns = [ ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ date_test , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""date_test"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;
      ",<<<text>>>workflow5epy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-5f-py->OutliersAlgorithm,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
FRAMEUNITTEST | RunOutlier ( instance = [ Revenue_Domestic ] , attributes = [ ""MovieBudget"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Revenue_International"" ] , alpha = [ 0 . 10 ] , uniqInstPerRow = [ Yes ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow5fpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-6a-py->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( frame = [ CreateFrame ( frameType = [ PY ] , override = [ true ] ) .as ( [ ""FRAMEUNITTEST"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow6apy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-6b-py->ToLowerCase,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ToLowerCase ( columns = [ ""Genre"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow6bpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-6c-py->Trim,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | TrimColumns ( columns = [ ""Title"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow6cpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-6d-py->Classification,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
FRAMEUNITTEST | RunClassification ( classify = [ MovieBudget ] , attributes = [ ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" ] , panel = [ 0 ] ) ;",<<<text>>>workflow6dpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-7a-py->Setup,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( frame = [ CreateFrame ( frameType = [ PY ] , override = [ true ] ) .as ( [ ""FRAMEUNITTEST"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow7apy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-7b-py->UpdateRowValues-(MovieBudget<10000000->MovieBudget=100),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( MovieBudget , ""100"" , Filter ( MovieBudget < 10000000 ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 )  ) , ( true ) ) ;",<<<text>>>workflow7bpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7c-py->UpdateRowValues-(Genre!=Action-Adventure->Genre=Drama),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( Genre , ""Drama"" , Filter ( Genre != ""Action-Adventure"" ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 )  ) , ( true ) ) ;",<<<text>>>workflow7cpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7d-py->UpdateRowValues-(Revenue_Domestic<=10000000>Revenue_Domestic=5),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( Revenue_Domestic , ""5"" , Filter ( Revenue_Domestic <= 10000000 ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 )  ) , ( true ) ) ;",<<<text>>>workflow7dpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7e-py->SplitColumn,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | SplitColumns ( columns = [ ""Genre"" ] , delimiter = [ ""-"" ] , search = [ ""Regex"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow7epy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7f-py->RegexReplaceColumnValue,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_0 , Genre_1 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_0 , Genre_1 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_0"" , ""Genre_1"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | RegexReplaceColumnValue ( column = [ ""Genre"" ] , value = [ ""Drama"" ] , newValue = [ ""Comedy-Drama"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_0 , Genre_1 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_0 , Genre_1 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_0"" , ""Genre_1"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow7fpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7g-py->RenameColumn,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , Genre_0 , Genre_1 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , Genre_0 , Genre_1 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""Genre_0"" , ""Genre_1"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | RenameColumn ( column = [ Genre_0 ] , newCol = [ ""Action_Movies"" ] ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;",<<<text>>>workflow7gpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-7h-py->ReplaceColumnValue,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Action_Movies , Genre , Genre_1 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Action_Movies , Genre , Genre_1 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Action_Movies"" , ""Genre"" , ""Genre_1"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | ReplaceColumnValue ( column = [ ""Genre_1"" ] , value = [ ""Adventure"" ] , newValue = [ ""Adventurous"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Action_Movies , Genre , Genre_1 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Action_Movies , Genre , Genre_1 , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Action_Movies"" , ""Genre"" , ""Genre_1"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow7hpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-8a-py,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( frame = [ CreateFrame ( frameType = [ PY ] , override = [ true ] ) .as ( [ ""FRAMEUNITTEST"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow8apy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-8b-py-AddColumn-(Number),"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | AddColumn ( newCol = [ ""NewNumberColumn"" ] , dataType = [ ""NUMBER"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow8bpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-8c-py-UpdateRowValues,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , NewNumberColumn , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , NewNumberColumn , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""NewNumberColumn"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( MovieBudget , ""123456789"" , Filter ( MovieBudget >= 100000000 ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow8cpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-8d-py-CountIf,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , NewNumberColumn , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , NewNumberColumn , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""NewNumberColumn"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | CountIf ( column = [ Genre ] , regex = [ ""A"" ] , newCol = [ ""CountOfAInGenre"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow8dpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-9a-py,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( frame = [ CreateFrame ( frameType = [ PY ] , override = [ true ] ) .as ( [ ""FRAMEUNITTEST"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow9apy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-9b-py-Discritize,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Discretize ( { ""column"" : ""Revenue_Domestic"" , ""breaks"" : ""(4109095,100000000,500000000,749766139)"" , ""labels"" : ""(sub100M,between100Mand500M,500Mplus)"" } ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( false ) ;",<<<text>>>workflow9bpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-9c-py-SplitUnpivot,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_Domestic_1 , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_Domestic_1 , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_Domestic_1"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | SplitUnpivot ( columns = [ ""Genre"" ] , delimiter = [ ""-"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow9cpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-9d-py-NumericalCorrelation,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
FRAMEUNITTEST | RunNumericalCorrelation ( attributes = [ ""MovieBudget"" , ""Revenue_Domestic"" ] , panel = [ 0 ] ) ;",<<<text>>>workflow9dpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-9e-py-ClusterOptimization,"RunClustering ( algorithm = [ kmeans ] , multiOption = [ true ] , instance = [ Genre ] , attributes = [ ""MovieBudget"" , ""Revenue_Domestic"" , ""RottenTomatoes_Critics"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" ] , minNumClusters = [ 2 ] , maxNumClusters = [ 5 ] , uniqInstPerRow = [ No ] ) ;
FrameHeaders ( ) ;",<<<text>>>workflow9epy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-10a-py,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( frame = [ CreateFrame ( frameType = [ PY ] , override = [ true ] ) .as ( [ ""FRAMEUNITTEST"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow10apy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-10b-py-Pivot,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Pivot ( pivotCol = [ ""Genre"" ] , valueCol = [ ""MovieBudget"" ] , function = [ """" ] , maintainCols = [ ""Studio"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow10bpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-10c-py-Unpivot,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Action_Adventure , Comedy_Musical , Documentary , Drama , Family_Animation , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Thriller_Horror , Title ) .as ( [ Action_Adventure , Comedy_Musical , Documentary , Drama , Family_Animation , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Thriller_Horror , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Action_Adventure"" , ""Comedy_Musical"" , ""Documentary"" , ""Drama"" , ""Family_Animation"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Thriller_Horror"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Unpivot ( columns = [ ""MovieBudget_Action_Adventure"" , ""MovieBudget_Comedy_Musical"" , ""MovieBudget_Drama"" , ""MovieBudget_Documentary"" , ""MovieBudget_Family_Animation"" , ""MovieBudget_Thriller_Horror"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow10cpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-10d-py-Transpose,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title , value_1 , variable_1 ) .as ( [ Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title , value_1 , variable_1 ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" , ""value_1"" , ""variable_1"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | Transpose ( ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow10dpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-11a-py,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( frame = [ CreateFrame ( frameType = [ PY ] , override = [ true ] ) .as ( [ ""FRAMEUNITTEST"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow11apy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-11b-py-SplitUnpivot,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | SplitUnpivot ( columns = [ ""Genre"" ] , delimiter = [ ""-"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow11bpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-11c-py-ToPercent,"FRAMEUNITTEST | ToPercent ( column = [ ""RottenTomatoes_Audience"" ] , sigDigits = [ 3 ] , by100 = [ true ] , newCol = [ ""RTAudiencePercent"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow11cpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-11d-py-RandomForest,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
FRAMEUNITTEST | RunRandomForest ( classify = [ MovieBudget ] , attributes = [ ""Genre"" , ""Revenue_Domestic"" , ""Revenue_International"" ] , options = [ ""na.action=na.omit"" , ""importance=TRUE"" , ""ntree=1000"" ] ) | GetRFResults ( requestItem = [ VarImp ] , panel = [ 777 ] ) ;",<<<text>>>workflow11dpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-12a-py,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( frame = [ CreateFrame ( frameType = [ PY ] , override = [ true ] ) .as ( [ ""FRAMEUNITTEST"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow12apy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,TRUE,START,FALSE
workflow-12b-py-DropColumn,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | DropColumn ( columns = [ ""Title"" , ""Genre"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow12bpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-12c-py-UpdateRowValues,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | UpdateRowValues ( RottenTomatoes_Audience , .123 , Filter ( RottenTomatoes_Audience >= 0 ) ) ;
FRAMEUNITTEST | UpdateRowValues ( RottenTomatoes_Critics , .1234 , Filter ( RottenTomatoes_Critics >= 0 ) ) ;
FRAMEUNITTEST | UpdateRowValues ( MovieBudget , 1234 , Filter ( MovieBudget >= 0 ) ) ;
FRAMEUNITTEST | UpdateRowValues ( Revenue_Domestic , 12345 , Filter ( Revenue_Domestic >= 0 ) ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow12cpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-12d-py-DropDuplicateRows,"Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ;
FRAMEUNITTEST | RemoveDuplicateRows ( ) ;
FRAMEUNITTEST | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) | Distinct ( false ) | Collect ( 2000 );",<<<text>>>workflow12dpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-12e-py-DropRows,"FRAMEUNITTEST | DropRows ( qs = [ Filter ( Revenue_International <= ""0"" ) ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | Select ( MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ) .as ( [ MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" ] } } } ) | Collect ( 2000 ) ) , ( true ) ) ;
     ",<<<text>>>workflow12epy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-12f-py-LOF,"FRAMEUNITTEST | Convert ( frameType = [ R ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
FRAMEUNITTEST | RunLOF ( instance = [ Studio ] , uniqInstPerRow = [ ""no"" ] , kNeighbors = [ 10 ] , attributes = [ ""Revenue_International"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow12fpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
workflow-13a-py,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Nominated__Nominated  , Studio__Studio  , Genre__Genre  ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Nominated  , Studio  , Genre  ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Studio ) ) | Import ( frame = [ CreateFrame ( frameType = [ PY ] , override = [ true ] ) .as ( [ ""FRAMEUNITTEST"" ] ) ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title, Nominated, Studio, Genre ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" , ""Nominated""  , ""Studio""  , ""Genre"" ] } } } ) | Collect ( 2000 ) ;",<<<text>>>workflow13apy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,START,FALSE
workflow-13b-py-ColumnAverage,"FRAMEUNITTEST | ColumnAverage ( columns = [ ""Revenue_Domestic"" , ""Revenue_International"" ] , newCol = [ 'AvgRevenue' ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow13bpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,,FALSE
workflow-13c-py-Concatenate,"FRAMEUNITTEST | JoinColumns ( newCol = [ ""TitleAndBudget"" ] , delimiter = [ ""-"" ] , columns = [ ""Title"" , ""MovieBudget"" ] ) ;
ifError ( ( Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ) , ( true ) ) ;",<<<text>>>workflow13cpy.json<<</text>>>,FALSE,root['taskId'],TRUE,TRUE,FALSE,,FALSE,END,FALSE
