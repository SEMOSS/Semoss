name,pixel,expected_json,compare_all,exclude_paths,ignore_order,ignore_added_dictionary,ignore_added_iterable,clean_test_databases,ignore_failure
clean - add column string,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics ) .as ( [ Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics ] ) | Import ( frame = [ FRAMEUNITTEST ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
<j><encode>synchronizeGridToRDataTable(""FRAMEUNITTEST"")</encode></j> ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
AddColumn ( newCol = [ ""test"" ] , dataType = [ ""STRING"" ] ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;",<<<text>>>clean_add_column_string.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE
clean - add column number,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics ) .as ( [ Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics ] ) | Import ( frame = [ FRAMEUNITTEST ] ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( frame = [ FRAMEUNITTEST ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
<j><encode>synchronizeGridToRDataTable(""FRAMEUNITTEST"")</encode></j> ;
Frame ( ) | Select ( MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""MovieBudget"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Title"" ] } } } ) | Collect ( 2000 ) ;
AddColumn ( newCol = [ ""test"" ] , dataType = [ ""NUMBER"" ] ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;",<<<text>>>clean_add_column_number.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE
clean - auto clean column override false,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""NEWSEMOSSAPP""}</encode>"" ) ;
CreateFrame ( GRID ) .as ( [ 'FRAMEUNITTEST' ] ) ;
FileRead ( filePath = [ ""<<<testDir>>>/text/clean_auto_clean_column.txt"" ] , dataTypeMap = [ { ""ID"" : ""INT"" , ""Test"" : ""STRING"" , ""Random"" : ""INT"" } ] , delimiter = [ "","" ] , newHeaders = [ { } ] , fileName = [ """" ] , additionalDataTypes = [ { } ] ) | Select ( DND__ID , DND__Test , DND__Random ) .as ( [ ID , Test , Random ] ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
<j><encode>synchronizeGridToRDataTable(""FRAMEUNITTEST"")</encode></j> ;
Frame ( ) | Select ( ID , Random , Test ) .as ( [ ID , Random , Test ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""ID"" , ""Random"" , ""Test"" ] } } } ) | Collect ( 2000 ) ;
AutoCleanColumn ( column = [ ""Test"" ] , override = [ false ] ) ;
Frame ( ) | Select ( ID , Test_1 ) .as ( [ ID , Result ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""ID"" , ""Result"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>clean_auto_clean_column_override_false.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,TRUE
clean - auto clean column override true,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""NEWSEMOSSAPP""}</encode>"" ) ;
CreateFrame ( GRID ) .as ( [ 'FRAMEUNITTEST' ] ) ;
FileRead ( filePath = [ ""<<<testDir>>>/text/clean_auto_clean_column.txt"" ] , dataTypeMap = [ { ""ID"" : ""INT"" , ""Test"" : ""STRING"" , ""Random"" : ""INT"" } ] , delimiter = [ "","" ] , newHeaders = [ { } ] , fileName = [ """" ] , additionalDataTypes = [ { } ] ) | Select ( DND__ID , DND__Test , DND__Random ) .as ( [ ID , Test , Random ] ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 2000 ) ;
<j><encode>synchronizeGridToRDataTable(""FRAMEUNITTEST"")</encode></j> ;
Frame ( ) | Select ( ID , Random , Test ) .as ( [ ID , Random , Test ] ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""ID"" , ""Random"" , ""Test"" ] } } } ) | Collect ( 2000 ) ;
AutoCleanColumn ( column = [ ""Test"" ] , override = [ true ] ) ;
Frame ( ) | Select ( ID , Test ) .as ( [ ID , Result ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""ID"" , ""Result"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>clean_auto_clean_column_override_true.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,TRUE
filter,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Studio == [ ""Buena_Vista"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE
filter - mixed,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Studio == [ ""Buena_Vista"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
ReplaceFrameFilter ( ( Genre == [ ""Comedy-Musical"" , ""Drama"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
ReplaceFrameFilter ( ( Director == [ ""Alex_Kurtzman"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
DeleteFrameFilter ( index = [ 2 ] ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_mixed.json<<</text>>>,TRUE,,TRUE,TRUE,FALSE,,FALSE
filter - mixed rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Studio == [ ""Buena_Vista"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
ReplaceFrameFilter ( ( Genre == [ ""Comedy-Musical"" , ""Drama"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
ReplaceFrameFilter ( ( Director == [ ""Alex_Kurtzman"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;
DeleteFrameFilter ( index = [ 2 ] ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_mixed_rdf.json<<</text>>>,TRUE,,TRUE,TRUE,FALSE,,FALSE
filter - multiple,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Genre == [ ""Comedy-Musical"" , ""Drama"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_multiple.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE
filter - multiple rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Genre == [ ""Comedy-Musical"" , ""Drama"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_multiple_rdf.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE
filter - rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( -1 ) ;
ReplaceFrameFilter ( ( Studio == [ ""Buena_Vista"" ] ) ) ;
ifError ( ( Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( -1 ) ) , ( true ) ) ;",<<<text>>>filter_rdf.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE
import - inner join,"CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ; 
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Frame ( ) | QueryAll ( ) | Collect ( -1 ) ;",<<<text>>>import_inner_join.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE
import - inner join rdf,"CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ; 
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Frame ( ) | QueryAll ( ) | Collect ( -1 ) ;",<<<text>>>import_inner_join_rdf.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE
predict metamodel,"PredictMetamodel(filePath=[""<<<testDir>>>/data/unit_test_movie.csv""], delimiter=["",""], rowCount=[false]);",<<<text>>>predict_metamodel.json<<</text>>>,FALSE,"root['fileName'],root['fileLocation']",TRUE,FALSE,FALSE,,FALSE
r health,"R ( ""<encode>1+1</encode>"" ) ;",<<<text>>>r_health.json<<</text>>>,FALSE,,TRUE,TRUE,FALSE,,FALSE
sort - ascending,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;
Panel ( 0 ) | SetPanelSort ( columns = [ ""Title"" ] , sort = [ ""asc"" ] ) ;
Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>sort_ascending.json<<</text>>>,FALSE,,FALSE,TRUE,FALSE,,FALSE
sort - ascending rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;
Panel ( 0 ) | SetPanelSort ( columns = [ ""Title"" ] , sort = [ ""asc"" ] ) ;
Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>sort_ascending_rdf.json<<</text>>>,FALSE,,FALSE,TRUE,FALSE,,FALSE
sort - descending,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;
Panel ( 0 ) | SetPanelSort ( columns = [ ""Title"" ] , sort = [ ""desc"" ] ) ;
Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>sort_descending.json<<</text>>>,FALSE,,FALSE,TRUE,FALSE,,FALSE
sort - descending rdf,"AddPanel ( 0 ) ;
Panel ( 0 ) | AddPanelEvents ( { ""onSingleClick"" : { ""Unfilter"" : [ { ""panel"" : """" , ""query"" : ""<encode>UnfilterFrame(<SelectedColumn>);</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabledVisuals"" : [ ""Grid"" , ""Sunburst"" ] , ""disabled"" : false } ] } , ""onBrush"" : { ""Filter"" : [ { ""panel"" : """" , ""query"" : ""<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>"" , ""options"" : { } , ""refresh"" : false , ""default"" : true , ""disabled"" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" , ""<encode>{""type"":""echarts""}</encode>"" ) ;
Panel ( 0 ) | SetPanelView ( ""federate-view"" , ""<encode>{""app_id"":""<<<appId>>>unit_test_movie_rdf<<</appId>>>""}</encode>"" ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { ""config"" : { ""type"" : ""STANDARD"" , ""opacity"" : 100 } } ] ) ;
CreateFrame ( frameType = [ GRID ] ) .as ( [ 'FRAMEUNITTEST' ] ) ;
Database ( database = [ ""<<<appId>>>unit_test_movie_rdf<<</appId>>>"" ] ) | Select ( Director , Title , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Nominated , Studio , Genre ) .as ( [ Director , Title , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Nominated , Studio , Genre ] ) | Join ( ( Title , inner.join , Director ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Import ( ) ;
Panel ( 0 ) | SetPanelView ( ""visualization"" ) ;
Frame ( ) | QueryAll ( ) | AutoTaskOptions ( panel = [ ""0"" ] , layout = [ ""Grid"" ] ) | Collect ( 500 ) ;
Panel ( 0 ) | SetPanelSort ( columns = [ ""Title"" ] , sort = [ ""desc"" ] ) ;
Frame ( ) | Select ( Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ) .as ( [ Director , Genre , MovieBudget , Nominated , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Studio , Title ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { ""0"" : { ""layout"" : ""Grid"" , ""alignment"" : { ""label"" : [ ""Director"" , ""Genre"" , ""MovieBudget"" , ""Nominated"" , ""Revenue_Domestic"" , ""Revenue_International"" , ""RottenTomatoes_Audience"" , ""RottenTomatoes_Critics"" , ""Studio"" , ""Title"" ] } } } ) | Collect ( 500 ) ;",<<<text>>>sort_descending_rdf.json<<</text>>>,FALSE,,FALSE,TRUE,FALSE,,FALSE
version,Version();,"{
  ""pixelExpression"": ""Version ( ) ;"",
  ""output"": {
    ""datetime"": ""1000-01-01 01:01:01"",
    ""version"": ""1.0.0-SNAPSHOT""
  }
}",FALSE,"root['datetime'],root['version']",TRUE,FALSE,FALSE,,FALSE
